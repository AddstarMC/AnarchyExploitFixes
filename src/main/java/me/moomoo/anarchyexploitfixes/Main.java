package me.moomoo.anarchyexploitfixes;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Boat;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.HashMap;

public class Main extends JavaPlugin implements Listener {
    public FileConfiguration config = getConfig();
    public final HashMap<Player, Integer> newchunks = new HashMap<>();
    public final HashMap<Player, Integer> oldchunks = new HashMap<>();

    public static final Integer[] old_total = {0};
    public static final Integer[] new_total = {0};

    public HashMap<Player, Integer> a = new HashMap<>();
    public HashMap<Player, Integer> b = new HashMap<>();

    @Override
    public void onEnable() {
        PluginManager pm = getServer().getPluginManager();
        getLogger().info("Registering events");
        pm.registerEvents(this, this);
        pm.registerEvents(new DupeFixes(), this);
        pm.registerEvents(new DisableWithers(), this);
        pm.registerEvents(new Elytra(), this);
        pm.registerEvents(new EndPortalPatch(), this);
        pm.registerEvents(new Bedrock(), this);
        pm.registerEvents(new Boats(), this);
        pm.registerEvents(new Chat(), this);
        pm.registerEvents(new ChunkBan(), this);
        pm.registerEvents(new Commands(), this);
        pm.registerEvents(new CrashExploits(), this);
        pm.registerEvents(new GodMode(), this);
        pm.registerEvents(new Illegals(), this);
        pm.registerEvents(new Joinmessages(), this);
        pm.registerEvents(new Kicks(), this);
        pm.registerEvents(new LagExploits(), this);
        pm.registerEvents(new MyServer(), this);
        pm.registerEvents(new NetherRoof(), this);
        pm.registerEvents(new Redstone(), this);

        getLogger().info("Registering events finished");

        if (config.getBoolean("BoatflyPatchStrict")) {
            Bukkit.getServer().getScheduler().runTaskTimer(this, () -> Bukkit.getWorlds().forEach(b -> b.getPlayers().forEach(e -> {
                if (e.isInsideVehicle()) {
                    int x = e.getLocation().getBlockX();
                    int y = e.getLocation().getBlockY();
                    int z = e.getLocation().getBlockZ();
                    // ik its a mess idgaf
                    if ((e.getWorld().getBlockAt(x, y - 1, z).getType() == Material.AIR) && e.getWorld().getBlockAt(x, y - 2, z).getType() == Material.AIR && e.getWorld().getBlockAt(x, y - 3, z).getType() == Material.AIR) {
                        if (e.getVehicle() instanceof Boat) {
                            e.getVehicle().remove();
                            if (config.getBoolean("BoatflyMessage")) {
                                e.sendMessage(ChatColor.GOLD + "Boatfly disabled due to an exploit >:) If you aren't boat flying, boats on land are a little buggy.");
                            }
                        }
                    }
                }
            })), 0L, config.getInt("BoatflyPatchStrictCheckRate"));
        }

        if (config.getBoolean("StrictIllegalPrevention")) {
            Bukkit.getServer().getScheduler().runTaskTimer(this, () -> Bukkit.getWorlds().forEach(b -> b.getPlayers().forEach(e -> e.getInventory().forEach(bb -> {
                if (bb != null) {
                    if (bb.getAmount() > bb.getMaxStackSize()) {
                        bb.setAmount(bb.getMaxStackSize());
                    }
                }
            }))), 0L, 20L);
        }
        if (config.getBoolean("PreventGodMode")) {
            for (Player p : Bukkit.getOnlinePlayers()) {
                GodMode.removePlayer(p);
                GodMode.injectPlayer(p);
                a.put(p, 0);
                b.put(p, 0);
            }
        }
        Bukkit.getServer().getScheduler().runTaskTimer(this, () -> Bukkit.getWorlds().forEach(b -> b.getPlayers().forEach(e -> {
            if (newchunks.get(e) != null) {
                if (!e.isOp()) {
                    if (newchunks.get(e) > 60) {
                        broadcastOp(ChatColor.RED + e.getName() + " is generating a lot of chunks per second! (" + newchunks.get(e) + ")");
                    }
                }
            }
        })), 0L, 20L);

        Bukkit.getScheduler().runTaskTimer(this, () -> {
            new_total[0] = 0;
            old_total[0] = 0;
            Bukkit.getOnlinePlayers().forEach(b -> {
                if (newchunks.get(b) != null) {
                    new_total[0] = new_total[0] + newchunks.get(b);
                }
            });
            Bukkit.getOnlinePlayers().forEach(b -> {
                if (oldchunks.get(b) != null) {
                    old_total[0] = old_total[0] + oldchunks.get(b);
                }
            });
        }, 0L, 20L);

        saveDefaultConfig();

        getLogger().info("[ENABLED] AnarchyExploitFixes - Made by moomoo");

        new Metrics(this, 8700);

        if (Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
            new Expansions(this).register();
        }
    }

    public void onDisable() {
        getLogger().info("[DISABLED] AnarchyExploitFixes - Made by moomoo");
    }

    public Integer checkChunk(Material material, Chunk c) {
        int count = 0;
        int cx = c.getX() << 4;
        int cz = c.getZ() << 4;

        for (int x = cx; x < cx + 16; x++) {
            for (int z = cz; z < cz + 16; z++) {
                for (int y = 0; y < 128; y++) {
                    if (c.getBlock(x, y, z).getType() == material) {
                        count++;
                    }
                }
            }
        }

        return count;
    }

    void broadcastOp(String s) {
        Bukkit.getOnlinePlayers().forEach(b -> {
            if (b.isOp()) {
                b.sendMessage(s);
            }
        });

        getLogger().info(s);
    }
}
