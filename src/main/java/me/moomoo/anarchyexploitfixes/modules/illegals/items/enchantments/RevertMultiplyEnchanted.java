package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XEnchantment;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.logging.Logger;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.*;

public class RevertMultiplyEnchanted implements AnarchyExploitFixesModule, Listener {

    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    public RevertMultiplyEnchanted() {
        Config config = AnarchyExploitFixes.getConfiguration();
        Logger logger = AnarchyExploitFixes.getLog();
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-multiply-enchanted.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-multiply-enchanted.use-as-blacklist-instead", false);
        List<String> configuredWhitelistedItems = config.getList("illegals.enchantments.revert-multiply-enchanted.whitelisted-items", Collections.singletonList("BOW"));
        for (String configuredItem : configuredWhitelistedItems) {
            Material itemMaterial = Material.getMaterial(configuredItem);
            if (itemMaterial != null) {
                whitelistedItems.add(itemMaterial);
            } else {
                logger.warning("("+name()+") Material '"+configuredItem+"' is not a valid Material. Please use correct Material enums for your Minecraft version.");
            }
        }
        this.enableStrictPrevention = config.getBoolean("illegals.enchantments.revert-multiply-enchanted.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.revert-multiply-enchanted.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "revert-multiply-enchanted";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.revert-multiply-enchanted.enable", true);
    }

    private void handleMultiplyEnchanted(ItemStack item) {
        if (item == null) return;
        if (whitelistIsEnabled) {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            }
        } else {
            filterBasedOnType(item);
        }
    }

    private void filterBasedOnType(ItemStack item) {
        if (isArmor(item)) {
            filterProtectionEnchants(item);
            filterCurses(item);
            if (isBoots(item)) {
                filterBoots(item);
            }
            return;
        }
        if (isTool(item)) {
            filterTools(item);
            return;
        }
        if (isSword(item)) {
            filterSwordEnchantments(item);
            return;
        }
        if (isBow(item)) {
            filterBow(item);
            return;
        }
        if (isTrident(item)) {
            filterTrident(item);
            return;
        }
        if (isCrossbow(item)) {
            filterCrossbow(item);
        }
    }

    private void filterCurses(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(XEnchantment.BINDING_CURSE.getEnchant())
                && enchantments.containsKey(XEnchantment.VANISHING_CURSE.getEnchant())
        ) {
            item.removeEnchantment(XEnchantment.BINDING_CURSE.getEnchant());
        }
    }

    private void filterCrossbow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(XEnchantment.MULTISHOT.getEnchant())
                && enchantments.containsKey(XEnchantment.PIERCING.getEnchant())
        ) {
            item.removeEnchantment(XEnchantment.MULTISHOT.getEnchant());
        }
    }

    private void filterTrident(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (enchantments.containsKey(XEnchantment.RIPTIDE.getEnchant())
                && (enchantments.containsKey(XEnchantment.LOYALTY.getEnchant())
                || enchantments.containsKey(XEnchantment.CHANNELING.getEnchant()))
        ) {
            item.removeEnchantment(XEnchantment.RIPTIDE.getEnchant());
        }
    }

    private void filterBow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(XEnchantment.MENDING.getEnchant())
                && enchantments.containsKey(XEnchantment.ARROW_INFINITE.getEnchant())
        ) {
            item.removeEnchantment(XEnchantment.ARROW_INFINITE.getEnchant());
        }
    }

    private void filterTools(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(XEnchantment.SILK_TOUCH.getEnchant())
                && enchantments.containsKey(XEnchantment.LOOT_BONUS_BLOCKS.getEnchant())
        ) {
            item.removeEnchantment(XEnchantment.LOOT_BONUS_BLOCKS.getEnchant());
        }
    }

    private void filterBoots(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(XEnchantment.DEPTH_STRIDER.getEnchant())
                && enchantments.containsKey(XEnchantment.FROST_WALKER.getEnchant())
        ) {
            item.removeEnchantment(XEnchantment.FROST_WALKER.getEnchant());
        }
    }

    private void filterSwordEnchantments(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (swordEnchantmentCount(enchantments) <= 1) return;

        // Prefer keeping Sharpness enchantment if it is present
        if (enchantments.containsKey(XEnchantment.DAMAGE_ALL.getEnchant())) {
            for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
                Enchantment enchantment = enchant.getKey();
                if (
                        enchantment.equals(XEnchantment.DAMAGE_ARTHROPODS.getEnchant())
                        || enchantment.equals(XEnchantment.DAMAGE_UNDEAD.getEnchant())
                ) {
                    item.removeEnchantment(enchantment);
                }
            }
            return;
        }

        // Prefer keeping Smite enchantment
        item.removeEnchantment(XEnchantment.DAMAGE_ARTHROPODS.getEnchant());
    }

    private int swordEnchantmentCount(HashMap<Enchantment, Integer> enchantments) {
        int amountOfSwordEnchantments = 0;
        for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
            Enchantment currentEnch = enchant.getKey();
            if (
                    currentEnch.equals(XEnchantment.DAMAGE_ALL.getEnchant())
                    || currentEnch.equals(XEnchantment.DAMAGE_ARTHROPODS.getEnchant())
                    || currentEnch.equals(XEnchantment.DAMAGE_UNDEAD.getEnchant())
            ) {
                amountOfSwordEnchantments++;
            }
        }
        return amountOfSwordEnchantments;
    }

    private void filterProtectionEnchants(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (protectionEnchantmentCount(enchantments) <= 1) return;

        // Prefer keeping Protection enchantment if it is present
        if (enchantments.containsKey(XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant())) {
            for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
                Enchantment enchantment = enchant.getKey();
                if (
                        enchantment.equals(XEnchantment.PROTECTION_EXPLOSIONS.getEnchant())
                        || enchantment.equals(XEnchantment.PROTECTION_FIRE.getEnchant())
                        || enchantment.equals(XEnchantment.PROTECTION_PROJECTILE.getEnchant())
                ) {
                    item.removeEnchantment(enchantment);
                }
            }
            return;
        }

        // Prefer keeping Blast Protection enchantment if it is present
        if (enchantments.containsKey(XEnchantment.PROTECTION_EXPLOSIONS.getEnchant())) {
            for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
                Enchantment enchantment = enchant.getKey();
                if (
                        enchantment.equals(XEnchantment.PROTECTION_FIRE.getEnchant())
                        || enchantment.equals(XEnchantment.PROTECTION_PROJECTILE.getEnchant())
                ) {
                    item.removeEnchantment(enchantment);
                }
            }
            return;
        }

        // Prefer keeping Projectile Protection enchantment
        item.removeEnchantment(XEnchantment.PROTECTION_FIRE.getEnchant());
    }

    private int protectionEnchantmentCount(HashMap<Enchantment, Integer> enchantments) {
        int amountOfProtEnchants = 0;
        for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
            Enchantment enchantment = enchant.getKey();
            if (
                    enchantment.equals(XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant())
                    || enchantment.equals(XEnchantment.PROTECTION_EXPLOSIONS.getEnchant())
                    || enchantment.equals(XEnchantment.PROTECTION_FIRE.getEnchant())
                    || enchantment.equals(XEnchantment.PROTECTION_PROJECTILE.getEnchant())
            ) {
                amountOfProtEnchants++;
            }
        }
        return amountOfProtEnchants;
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleMultiplyEnchanted(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleMultiplyEnchanted(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleMultiplyEnchanted(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleMultiplyEnchanted(event.getCurrentItem());
        handleMultiplyEnchanted(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleMultiplyEnchanted(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleMultiplyEnchanted(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleMultiplyEnchanted(item);
        }
    }
}
