package me.moomoo.anarchyexploitfixes.modules.illegals.blocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Logger;

import static me.moomoo.anarchyexploitfixes.utils.ChunkUtils.getMinWorldHeight;

public class RemovePlacedIllegalsOnChunkload implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> blocksToRemove = new HashSet<>();
    private final HashSet<String> exemptedWorlds = new HashSet<>();
    private final boolean checkShouldPauseOnLowTPS;
    private final double pauseTPS;

    public RemovePlacedIllegalsOnChunkload() {
        Config config = AnarchyExploitFixes.getConfiguration();
        Logger logger = AnarchyExploitFixes.getLog();
        List<String> configuredBlocksToRemove = config.getList("illegals.remove-placed-blocks-on-chunkload.blocks-to-remove", Arrays.asList(
                "BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK"
        ));
        for (String configuredBlock : configuredBlocksToRemove) {
            if (configuredBlock.equalsIgnoreCase("PLAYER_HEAD")) {
                blocksToRemove.add(XMaterial.PLAYER_HEAD.parseMaterial());
            } else {
                Material blockToRemove = Material.getMaterial(configuredBlock);
                if (blockToRemove != null) {
                    blocksToRemove.add(blockToRemove);
                } else {
                    logger.warning("(Remove illegally placed blocks) Configured block '" + configuredBlock + "' is not a valid Material. Please use correct Material enums for your Minecraft Version");
                }
            }
        }
        this.exemptedWorlds.addAll(config.getList("illegals.remove-placed-blocks-on-chunkload.exempted-worlds", Arrays.asList(
                "exampleworld1", "exampleworld2"
        )));
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-placed-blocks-on-chunkload.pause-on-low-TPS", true);
        this.pauseTPS = config.getDouble("illegals.remove-placed-blocks-on-chunkload.pause-TPS", 14.0);
    }

    @Override
    public String name() {
        return "Remove Illegally Placed on Chunkload";
    }

    @Override
    public String category() {
        return "Illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-placed-blocks-on-chunkload.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk() || checkShouldPauseOnLowTPS && (AnarchyExploitFixes.getTPS() <= pauseTPS)) return;

        Chunk chunk = event.getChunk();
        World world = chunk.getWorld();
        if (!exemptedWorlds.contains(world.getName())) return;

        int minY = getMinWorldHeight(world)+5; //offset by 5 blocks to not delete bedrock floor
        int maxY;
        if (world.getEnvironment().equals(World.Environment.NETHER)) {
            maxY = 123; // again offset to not delete bedrock ceiling
        } else {
            maxY = world.getMaxHeight();
        }

        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                for (int y = minY; y < maxY; y++) {
                    Block block = chunk.getBlock(x, y, z);
                    if (blocksToRemove.contains(block.getType())) {
                        block.setType(Material.AIR, false);
                    }
                }
            }
        }
    }
}
