package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

public class RevertUnnaturalDataValues implements AnarchyExploitFixesModule, Listener {

    public RevertUnnaturalDataValues() {}

    @Override
    public String name() {
        return "revert-unnatural-data-values";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        return (
                config.getBoolean("illegals.data-values.revert-unnatural-data-values.enable", false, "1.12 Only\nEnable only if you must. Not tested with chest gui stuff.")
                && !config.getBoolean("illegals.data-values.remove-items-with-specific-data-values.enable", false)
                && AnarchyExploitFixes.getMCVersion() <= 12
        );
    }

    private void revertUnnaturalDataValuesIfPresent(ItemStack item) {
        if (item != null) {
            MaterialData naturalMaterialData = new MaterialData(item.getType());
            if (!item.getData().equals(naturalMaterialData)) {
                item.setData(naturalMaterialData);
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        revertUnnaturalDataValuesIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        revertUnnaturalDataValuesIfPresent(event.getCurrentItem());
        revertUnnaturalDataValuesIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            revertUnnaturalDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            revertUnnaturalDataValuesIfPresent(event.getItem().getItemStack());
            Player player = (Player) entity;
            for (ItemStack item : player.getInventory()) {
                revertUnnaturalDataValuesIfPresent(item);
            }
        }
    }
}
