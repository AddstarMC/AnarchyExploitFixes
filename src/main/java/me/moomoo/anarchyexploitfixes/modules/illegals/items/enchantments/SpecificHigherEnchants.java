package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.*;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class SpecificHigherEnchants implements AnarchyExploitFixesModule, Listener {

    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention, shouldCheckShulker;
    private final HashSet<Enchantment> specificEnchants = new HashSet<>();
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    public SpecificHigherEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        List<String> configuredEnchantments = config.getList("illegals.enchantments.revert-specific-higher-enchants.enchantments", Collections.singletonList("DIG_SPEED"));
        for (String configuredEnchant : configuredEnchantments) {
            Enchantment enchantment = Enchantment.getByName(configuredEnchant);
            if (enchantment != null) {
                specificEnchants.add(enchantment);
            } else {
                LogUtils.logWithModulePrefix(Level.WARNING, name(),"Enchantment '"+configuredEnchant+"' is not a valid Enchantment. Please use correct Enchantment enums for your Minecraft version!");
            }
        }
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-specific-higher-enchants.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-specific-higher-enchants.use-as-blacklist-instead", false);
        List<String> configuredWhitelistedItems = config.getList("illegals.enchantments.revert-specific-higher-enchants.whitelisted-items", Collections.singletonList("GOLDEN_APPLE"));
        for (String configuredItem : configuredWhitelistedItems) {
            Material itemMaterial = Material.getMaterial(configuredItem);
            if (itemMaterial != null) {
                whitelistedItems.add(itemMaterial);
            } else {
                LogUtils.logWithModulePrefix(Level.WARNING, name(),"Material '"+configuredItem+"' is not a valid Material. Please use correct Material enums for your Minecraft version!");
            }
        }
        this.enableStrictPrevention = config.getBoolean("illegals.enchantments.revert-specific-higher-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.revert-specific-higher-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);
        this.shouldCheckShulker = config.getBoolean("illegals.enchantments.revert-specific-higher-enchants.delete-shulker-if-contains-specific-higher-enchanted", false);
    }

    @Override
    public String name() {
        return "revert-specific-higher-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        return (
                config.getBoolean("illegals.enchantments.revert-specific-higher-enchants.enable", false)
                && !config.getBoolean("illegals.enchantments.revert-unsafe-enchants.enable", true)
        );
    }

    private void handleSpecificOverEnchantedIfPresent(ItemStack item) {
        if (item != null) {
            if (whitelistIsEnabled) {
                if (useWhitelistAsBlacklist) {
                    if (whitelistedItems.contains(item.getType())) {
                        filterEnchantments(item);
                    }
                } else {
                    if (!whitelistedItems.contains(item.getType())) {
                        filterEnchantments(item);
                    }
                }
            } else {
                filterEnchantments(item);
            }
            if (shouldCheckShulker) {
                if (shulkerContainsSpecificHigherEnchanted(item)) {
                    item.subtract(item.getAmount());
                }
            }
        }
    }

    private boolean shulkerContainsSpecificHigherEnchanted(ItemStack shulker) {
        if (!isShulkerBox(shulker)) return false;
        BlockStateMeta meta = (BlockStateMeta) shulker.getItemMeta();
        ShulkerBox box = (ShulkerBox) meta.getBlockState();
        for (ItemStack shulkerItem : box.getInventory().getContents()) {
            if (shulkerItem != null) {
                if (whitelistIsEnabled) {
                    if (useWhitelistAsBlacklist) {
                        if (whitelistedItems.contains(shulkerItem.getType())) {
                            if (isSpecificHigherEnchanted(shulkerItem)) {
                                return true;
                            }
                        }
                    } else {
                        if (!whitelistedItems.contains(shulkerItem.getType())) {
                            if (isSpecificHigherEnchanted(shulkerItem)) {
                                return true;
                            }
                        }
                    }
                } else {
                    if (isSpecificHigherEnchanted(shulkerItem)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean isSpecificHigherEnchanted(ItemStack shulkerItem) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(shulkerItem.getEnchantments());
        if (enchantments.isEmpty()) return false;
        for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
            Enchantment enchantment = enchant.getKey();
            if (!specificEnchants.contains(enchantment)) return false;

            int maxNaturallyPossibleLevel = enchantment.getMaxLevel();
            if (enchant.getValue() > maxNaturallyPossibleLevel) {
                return true;
            }
        }
        return false;
    }

    private void filterEnchantments(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;

        for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
            Enchantment enchantment = enchant.getKey();
            if (!specificEnchants.contains(enchantment)) return;

            int maxNaturallyPossibleLevel = enchantment.getMaxLevel();
            if (enchant.getValue() > maxNaturallyPossibleLevel) {
                item.removeEnchantment(enchantment);
                item.addUnsafeEnchantment(enchantment, maxNaturallyPossibleLevel);
            }
        }
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleSpecificOverEnchantedIfPresent(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleSpecificOverEnchantedIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleSpecificOverEnchantedIfPresent(event.getCurrentItem());
        handleSpecificOverEnchantedIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificOverEnchantedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            handleSpecificOverEnchantedIfPresent(event.getItem().getItemStack());
            Player player = (Player) entity;
            for (ItemStack item : player.getInventory()) {
                handleSpecificOverEnchantedIfPresent(item);
            }
        }
    }
}
