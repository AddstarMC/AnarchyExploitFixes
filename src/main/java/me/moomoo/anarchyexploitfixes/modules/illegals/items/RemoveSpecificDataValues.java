package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public class RemoveSpecificDataValues implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> forbiddenDataValues = new HashSet<>();

    public RemoveSpecificDataValues() {
        List<String> configuredIllegalValues = AnarchyExploitFixes.getConfiguration().getList("illegals.remove-items-with-specific-data-values.data-values", Collections.singletonList("SuperIllegalItem(0)"));
        forbiddenDataValues.addAll(configuredIllegalValues);
    }

    @Override
    public String name() {
        return "remove-items-with-specific-data-values";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getMCVersion() > 12) return false;
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-items-with-specific-data-values.enable", false);
    }

    private void handleSpecificDataValuesIfPresent(ItemStack item) {
        if (item == null) return;
        if (forbiddenDataValues.contains(item.getData().toString())) {
            item.subtract(item.getAmount());
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleSpecificDataValuesIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleSpecificDataValuesIfPresent(event.getCurrentItem());
        handleSpecificDataValuesIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleSpecificDataValuesIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleSpecificDataValuesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            Player player = (Player) entity;
            for (ItemStack item : player.getInventory()) {
                handleSpecificDataValuesIfPresent(item);
            }
        }
    }
}
