package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Logger;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class RemoveBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final boolean enableStrictPrevention, shouldCheckShulker;
    private final HashSet<Material> bannedItems = new HashSet<>();
    private final long checkPeriod;

    public RemoveBannedBlocks() {
        Logger logger = AnarchyExploitFixes.getLog();
        Config config = AnarchyExploitFixes.getConfiguration();
        List<String> configuredBannedBlocks = config.getList("illegals.banned-blocks.banned-blocks", Arrays.asList("BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME"));
        for (String configuredBlock : configuredBannedBlocks) {
            Material bannedMaterial = Material.getMaterial(configuredBlock);
            if (bannedMaterial != null) {
                bannedItems.add(bannedMaterial);
            } else {
                logger.warning("("+name()+") Material '"+configuredBlock+"' is not a valid Material. Please use correct Material enums for your Minecraft version!");
            }
        }
        this.shouldCheckShulker = config.getBoolean("illegals.banned-blocks.delete-shulker-if-contains-banned-block", false);
        this.enableStrictPrevention = config.getBoolean("illegals.banned-blocks.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.banned-blocks.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "banned-blocks.remove-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.banned-blocks.remove-items", true);
    }

    private void handleBannedItemsIfPresent(ItemStack item) {
        if (item == null) return;
        if (shouldCheckShulker) checkForIllegalsInShulker(item);
        if (bannedItems.contains(item.getType())) {
            item.subtract(item.getAmount());
        }
    }

    private void checkForIllegalsInShulker(ItemStack potShulker) {
        if (isShulkerBox(potShulker)) {
            BlockStateMeta meta = (BlockStateMeta) potShulker.getItemMeta();
            ShulkerBox box = (ShulkerBox) meta.getBlockState();
            for (ItemStack shulkerItem : box.getInventory()) {
                if (bannedItems.contains(shulkerItem.getType())) {
                    potShulker.subtract(potShulker.getAmount());
                    break;
                }
            }
        }
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleBannedItemsIfPresent(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemsIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleBannedItemsIfPresent(event.getCurrentItem());
        handleBannedItemsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }
}
