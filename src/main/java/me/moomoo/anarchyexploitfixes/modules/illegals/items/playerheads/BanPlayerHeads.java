package me.moomoo.anarchyexploitfixes.modules.illegals.items.playerheads;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.SkullMeta;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class BanPlayerHeads implements AnarchyExploitFixesModule, Listener {

    private final boolean enableStrictPrevention, shouldCheckShulker;
    private final ItemStack player_head;
    private final long checkPeriod;

    public BanPlayerHeads() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.player_head = XMaterial.PLAYER_HEAD.parseItem();
        config.addComment("illegals.ban-player-heads.enable", "This deletes playerheads with and without owners");
        this.shouldCheckShulker = config.getBoolean("illegals.ban-player-heads.delete-shulker-if-contains-player-head", false);
        this.enableStrictPrevention = config.getBoolean("illegals.ban-player-heads.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.ban-player-heads.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "ban-specific-blocks.remove-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-player-heads.enable", false);
    }

    private void handleBannedItemsIfPresent(ItemStack item) {
        if (item != null) {
            if (item.getType().equals(player_head.getType())) {
                SkullMeta skull = (SkullMeta) item.getItemMeta();
                if (
                        skull.hasOwner()
                        || item.isSimilar(player_head)
                ) {
                    item.subtract(item.getAmount());
                }
            }
            if (shouldCheckShulker) {
                checkForIllegalsInShulker(item);
            }
        }
    }

    private void checkForIllegalsInShulker(ItemStack potShulker) {
        if (isShulkerBox(potShulker)) {
            BlockStateMeta meta = (BlockStateMeta) potShulker.getItemMeta();
            ShulkerBox box = (ShulkerBox) meta.getBlockState();
            for (ItemStack shulkerItem : box.getInventory().getContents()) {
                if (shulkerItem != null) {
                    if (shulkerItem.getType().equals(player_head.getType())) {
                        SkullMeta playerHead = (SkullMeta) shulkerItem.getItemMeta();
                        if (
                                playerHead.hasOwner()
                                || shulkerItem.isSimilar(player_head)
                        ) {
                            potShulker.subtract(potShulker.getAmount());
                            break;
                        }
                    }
                }
            }
        }
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleBannedItemsIfPresent(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemsIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleBannedItemsIfPresent(event.getCurrentItem());
        handleBannedItemsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            Player player = (Player) entity;
            handleBannedItemsIfPresent(event.getItem().getItemStack());
            for (ItemStack item : player.getInventory()) {
                handleBannedItemsIfPresent(item);
            }
        }
    }
}
