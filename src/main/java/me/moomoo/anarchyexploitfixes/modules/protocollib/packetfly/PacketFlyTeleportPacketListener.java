package me.moomoo.anarchyexploitfixes.modules.protocollib.packetfly;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class PacketFlyTeleportPacketListener extends PacketAdapter {

    private final boolean logIsEnabled, shouldKickPlayer;
    private final int maxTeleportPacketsPer10s;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    private final Material air = XMaterial.AIR.parseMaterial();
    private final String log_name;

    public PacketFlyTeleportPacketListener(
            AnarchyExploitFixes plugin,
            int maxTeleportPacketsPer10s,
            boolean shouldKickPlayer,
            boolean logIsEnabled,
            String log_name
    ) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TELEPORT_ACCEPT);
        this.maxTeleportPacketsPer10s = maxTeleportPacketsPer10s;
        this.shouldKickPlayer = shouldKickPlayer;
        this.logIsEnabled = logIsEnabled;
        this.log_name = log_name;
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    public void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary()) return;
        Player player = event.getPlayer();
        if (player == null || player.isGliding() || player.isInsideVehicle()) return;

        if (player.getLocation().getBlock().getRelative(BlockFace.DOWN).getType().equals(air)) {
            UUID playerUniqueID = player.getUniqueId();
            if (levels.containsKey(playerUniqueID)) {
                if (levels.get(playerUniqueID) > maxTeleportPacketsPer10s) {
                    event.setCancelled(true);
                    if (shouldKickPlayer) player.kickPlayer(ChatColor.translateAlternateColorCodes('&', AnarchyExploitFixes.getLang(player.getLocale()).masked_KickMessage));
                    if (logIsEnabled) LogUtils.moduleLog(Level.INFO, log_name, "Prevented player '"+player.getName()+"' from packet flying");
                } else {
                    levels.merge(playerUniqueID, 1, Integer::sum);
                    plugin.getServer().getScheduler().scheduleSyncDelayedTask(
                            plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                    );
                }
            } else {
                levels.put(playerUniqueID, 1);
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(
                        plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                );
            }
        }
    }

    /*

    Old leftover code from before the recode that also works but had no real reason to be used like this
    Requires Paperlib dependency:
        <dependency>
            <groupId>io.papermc</groupId>
            <artifactId>paperlib</artifactId>
            <version>1.0.8</version>
            <scope>compile</scope>
        </dependency>


    private boolean playerIsFlying(Player player) {
        Location location = player.getLocation();

        Chunk chunk;
        try {
            chunk = PaperLib.getChunkAtAsync(location, false).join();
        } catch (CompletionException e) {
            chunk = location.getChunk();
        }

        if (chunk == null) return false;

        boolean isFlying;
        try {
            isFlying = chunk.getBlock(location.getBlockX() & 0xF, location.getBlockY(), location.getBlockZ() & 0xF).getType().equals(air);
        } catch (IllegalArgumentException e) {
            // thrown when block is out of bounds, so definitely flying
            isFlying = true;
        }

        return isFlying;
    }
    */
}
