package me.moomoo.anarchyexploitfixes.modules.protocollib.packetfly;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XTag;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.HashSet;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;

public class PacketFlyTeleportPacketListener extends PacketAdapter {

    private final boolean logIsEnabled, shouldKickPlayer, shouldSkipPluginFlying;
    private final int maxTeleportPacketsPer10s;
    private final HashMap<UUID, Integer> flyingViolations = new HashMap<>();
    private final HashSet<Material> falsePositives = new HashSet<>();
    private final Material air = XMaterial.AIR.parseMaterial();
    private final String log_name;

    protected PacketFlyTeleportPacketListener(
            AnarchyExploitFixes plugin,
            int maxTeleportPacketsPer10s,
            boolean shouldKickPlayer,
            boolean shouldSkipPluginFlying,
            boolean logIsEnabled,
            String log_name
    ) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TELEPORT_ACCEPT);
        this.maxTeleportPacketsPer10s = maxTeleportPacketsPer10s;
        this.shouldKickPlayer = shouldKickPlayer;
        this.shouldSkipPluginFlying = shouldSkipPluginFlying;
        this.logIsEnabled = logIsEnabled;
        this.log_name = log_name;

        for (XMaterial xMaterial : XTag.FENCES.getValues()) {
            Material falsePositive = xMaterial.parseMaterial();
            if (falsePositive != null) falsePositives.add(falsePositive);
        }
        falsePositives.add(XMaterial.CHORUS_FLOWER.parseMaterial());
        falsePositives.add(XMaterial.CHORUS_PLANT.parseMaterial());
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary()) return;
        Player player = event.getPlayer();
        if (player == null || player.isGliding() || player.isInsideVehicle()) return;

        if (shouldSkipPluginFlying && player.isFlying()) return;
        if (!playerIsInAir(player)) return;

        UUID playerUniqueID = player.getUniqueId();
        if (flyingViolations.containsKey(playerUniqueID)) {
            if (flyingViolations.get(playerUniqueID) > maxTeleportPacketsPer10s) {

                event.setCancelled(true);

                if (shouldKickPlayer) plugin.getServer().getScheduler().runTask(
                        plugin, () -> player.kickPlayer(ChatColor.translateAlternateColorCodes('&', AnarchyExploitFixes.getLang(player.getLocale()).misc_MaskedKickMessage))
                );
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, log_name, "Prevented player '"+player.getName()+"' from packet flying");
            } else {
                flyingViolations.merge(playerUniqueID, 1, Integer::sum);
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(
                        plugin, () -> flyingViolations.put(playerUniqueID, flyingViolations.get(playerUniqueID) - 1), 200L
                );
            }
        } else {
            flyingViolations.put(playerUniqueID, 1);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(
                    plugin, () -> flyingViolations.put(playerUniqueID, flyingViolations.get(playerUniqueID) - 1), 200L
            );
        }
    }

    private boolean playerIsInAir(Player player) {
        final Location location = player.getLocation();

        AtomicBoolean isFlying = new AtomicBoolean(false);
        PaperLib.getChunkAtAsync(location, false).thenAccept(chunk -> {
            try {
                int chunkX = location.getBlockX() & 0xF;
                int chunkY = location.getBlockY();
                int chunkZ = location.getBlockZ() & 0xF;

                isFlying.set(
                        chunk.getBlock(chunkX, chunkY-1, chunkZ).getType().equals(air) // Block below feet is air
                        && !falsePositives.contains(chunk.getBlock(chunkX, chunkY-2, chunkZ).getType()) // 1 Block below that is not a block causing false positives
                );
            } catch (IllegalArgumentException e) {
                isFlying.set(true); // Thrown when trying to get a block out of chunk bounds, so 99% flying
            }
        });

        return isFlying.get();
    }
}
