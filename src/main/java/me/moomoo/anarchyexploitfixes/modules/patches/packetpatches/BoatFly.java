package me.moomoo.anarchyexploitfixes.modules.patches.packetpatches;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Boat;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class BoatFly implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private final BukkitScheduler bukkitScheduler;
    private final HashMap<UUID, Integer> boatLevels = new HashMap<>();
    private final boolean logIsEnabled, shouldKickPlayer;
    private final int maxEntityPacketsPer10s;

    public BoatFly() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.bukkitScheduler = plugin.getServer().getScheduler();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.boatfly-patch.enable", "Patches Futureclient / Rusherhack boat fly exploit.");
        this.logIsEnabled = config.getBoolean("patches.boatfly-patch.log", true);
        this.maxEntityPacketsPer10s = config.getInt("patches.boatfly-patch.max-entity-packets-per-10s", 15);
        this.shouldKickPlayer = config.getBoolean("patches.boatfly-patch.kick-player-if-boatflying", false);
    }

    @Override
    public String name() {
        return "boatfly-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.USE_ENTITY
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;

                Player player = event.getPlayer();
                if (player == null) return;

                Entity vehicle = player.getVehicle();
                if (!(vehicle instanceof Boat)) return;

                UUID playerUniqueID = player.getUniqueId();
                Integer playerBoatLevels = boatLevels.get(playerUniqueID);

                if (playerBoatLevels != null) {
                    if (playerBoatLevels > maxEntityPacketsPer10s) {
                        bukkitScheduler.runTask(plugin, vehicle::remove);
                        if (shouldKickPlayer) player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).masked_KickMessage);
                        if (logIsEnabled) AnarchyExploitFixes.log(Level.INFO, name(),
                                "Prevented player '"+player.getName()+"' from boat flying"
                        );
                    } else {
                        boatLevels.merge(playerUniqueID, 1, Integer::sum);
                        bukkitScheduler.runTaskLater(
                                plugin, () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L
                        );
                    }
                } else {
                    boatLevels.put(playerUniqueID, 1);
                    bukkitScheduler.runTaskLater(
                            plugin, () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L
                    );
                }
            }
        });
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.boatfly-patch.enable", true);
    }
}
