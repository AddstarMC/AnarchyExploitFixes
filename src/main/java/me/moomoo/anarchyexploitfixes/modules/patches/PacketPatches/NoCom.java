package me.moomoo.anarchyexploitfixes.modules.patches.PacketPatches;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.wrappers.BlockPosition;
import com.comphenix.protocol.wrappers.EnumWrappers;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;

public class NoCom implements AnarchyExploitFixesModule {

    private final int noComMaxDistance;
    public NoCom() {
        this.noComMaxDistance = AnarchyExploitFixes.getConfiguration().getInt("patches.prevent-nocom-coordinate-exploit.nocom-max-distance", 64);
    }

    @Override
    public String name() {
        return "NoCom Coord-Exploit Patch";
    }

    @Override
    public String category() {
        return "Patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        ProtocolManager protocolManager = ProtocolLibrary.getProtocolManager();

        protocolManager.addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.NORMAL, PacketType.Play.Client.BLOCK_DIG
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;

                final EnumWrappers.PlayerDigType playerDigType = event.getPacket().getPlayerDigTypes().read(0);

                if (
                        playerDigType.equals(EnumWrappers.PlayerDigType.START_DESTROY_BLOCK)
                        || playerDigType.equals(EnumWrappers.PlayerDigType.ABORT_DESTROY_BLOCK)
                        || playerDigType.equals(EnumWrappers.PlayerDigType.STOP_DESTROY_BLOCK)
                ) {
                    final BlockPosition packetLocation = event.getPacket().getBlockPositionModifier().read(0);
                    if (event.getPlayer().getLocation().distance(packetLocation.toLocation(event.getPlayer().getWorld())) > noComMaxDistance) {
                        event.setCancelled(true);
                    }
                }
            }
        });

        // Bypass - Causing errors on 1.17.1. - Please let me know if there is a way to fix this.
        // https://paste.ee/p/BdWAH Shouldn't be much of an issue as I believe NoCom is fixed in newer versions of Paper.
        if (AnarchyExploitFixes.getMCVersion() == 12) {
            protocolManager.addPacketListener(new PacketAdapter(
                    plugin, ListenerPriority.NORMAL, PacketType.Play.Client.USE_ITEM
            ) {
                @Override
                public void onPacketReceiving(PacketEvent event) {
                    if (event.isPlayerTemporary()) return;

                    final BlockPosition packetLocation = event.getPacket().getBlockPositionModifier().read(0);

                    if (event.getPlayer().getLocation().distance(packetLocation.toLocation(event.getPlayer().getWorld())) > noComMaxDistance) {
                        event.setCancelled(true);
                    }
                }
            });
        }
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        if (config.protocolLib_IsDisabled) {
            Bukkit.getLogger().warning("Not patching NoCom Coordinate-Exploit because ProtocolLib is disabled in config.");
            return false;
        } else {
            if (!Bukkit.getPluginManager().isPluginEnabled("ProtocolLib")) {
                Bukkit.getLogger().warning("Unable to patch NoCom Coordinate-Exploit because ProtocolLib is not installed!");
                return false;
            } else {
                return config.getBoolean("patches.prevent-nocom-coordinate-exploit.enable", true);
            }
        }
    }
}
