package me.moomoo.anarchyexploitfixes.modules.patches.packetpatches.craftingrecipelag;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;

import java.util.logging.Level;

public class CraftingRecipeLag implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private final long craftingRecipeDelayInMillis;

    public CraftingRecipeLag() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-crafting-recipe-lag-exploit.enable", "Prevent lagging the server by spamming the crafting recipe book.");
        this.craftingRecipeDelayInMillis = config.getInt("patches.prevent-crafting-recipe-lag-exploit.crafting-recipe-delay-in-ticks", 5, "How many ticks a player needs to wait to be able to use the crafting recipe book again") * 50L;
    }

    @Override
    public String name() {
        return "prevent-crafting-recipe-lag-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        if (plugin.getServer().getPluginManager().isPluginEnabled("ProtocolLib")) {
            if (AnarchyExploitFixes.getConfiguration().protocolLib_IsDisabled) {
                AnarchyExploitFixes.log(Level.WARNING, name(), "Not enabling because ProtocolLib is disabled in config.");
            } else {
                new CraftingRecipePacketListener(plugin, craftingRecipeDelayInMillis);
            }
        } else {
            AnarchyExploitFixes.log(Level.SEVERE, name(), "Exploit can't be patched because ProtocolLib is missing.");
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-crafting-recipe-lag-exploit.enable", true);
    }
}
