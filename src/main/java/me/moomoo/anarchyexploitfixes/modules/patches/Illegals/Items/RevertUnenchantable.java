package me.moomoo.anarchyexploitfixes.modules.patches.Illegals.Items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.*;

public class RevertUnenchantable implements AnarchyExploitFixesModule, Listener {

    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist;
    private final HashSet<Material> whitelistedItems = new HashSet<>();

    public RevertUnenchantable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-unenchantables.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-unenchantables.use-as-blacklist-instead", false);
        List<String> configuredWhitelistedItems = config.getList("illegals.enchantments.revert-unenchantables.whitelisted-items", Collections.singletonList("GOLDEN_APPLE"));
        for (String configuredItem : configuredWhitelistedItems) {
            Material itemMaterial = Material.getMaterial(configuredItem);
            if (itemMaterial != null) {
                whitelistedItems.add(itemMaterial);
            } else {
                Bukkit.getLogger().warning("(Revert Unenchantables) Material '"+configuredItem+"' is not a valid Material. Please use correct Material enums for your Minecraft version.");
            }
        }
    }
    
    @Override
    public String name() {
        return "Revert Unenchantables";
    }

    @Override
    public String category() {
        return "Illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.revert-unenchantables.enable", true);
    }

    private void handleUnEnchantablesIfPresent(ItemStack item) {
        if (item == null) return;
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;

        for (Map.Entry<Enchantment, Integer> enchant : enchantments.entrySet()) {
            Enchantment enchantment = enchant.getKey();
            if (!enchantment.canEnchantItem(item)) {
                if (whitelistIsEnabled) {
                    if (useWhitelistAsBlacklist) {
                        if (whitelistedItems.contains(item.getType())) {
                            item.removeEnchantment(enchantment);
                        }
                    } else {
                        if (!whitelistedItems.contains(item.getType())) {
                            item.removeEnchantment(enchantment);
                        }
                    }
                } else {
                    item.removeEnchantment(enchantment);
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleUnEnchantablesIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleUnEnchantablesIfPresent(event.getCurrentItem());
        handleUnEnchantablesIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleUnEnchantablesIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleUnEnchantablesIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleUnEnchantablesIfPresent(item);
        }
    }
}
