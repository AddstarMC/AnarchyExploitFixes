package me.moomoo.anarchyexploitfixes.modules.patches.packetpatches;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class CraftingRecipeLag implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<UUID, Long> playersClickingCraftingRecipes = new HashMap<>();
    private final long craftingRecipeDelayInMillis;

    public CraftingRecipeLag() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-crafting-recipe-lag-exploit.enable", "Prevent lagging the server by spamming the crafting recipe book.");
        this.craftingRecipeDelayInMillis = config.getInt("patches.prevent-crafting-recipe-lag-exploit.crafting-recipe-delay-in-ticks", 5, "How many ticks a player needs to wait to be able to use the crafting recipe book again") * 50L;
    }

    @Override
    public String name() {
        return "prevent-crafting-recipe-lag-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.NORMAL, PacketType.Play.Client.AUTO_RECIPE
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;
                Player player = event.getPlayer();
                if (player == null) return;
                UUID playerUniqueID = player.getUniqueId();
                if (playersClickingCraftingRecipes.get(playerUniqueID) == null) {
                    playersClickingCraftingRecipes.put(playerUniqueID, System.currentTimeMillis());
                } else {
                    if (System.currentTimeMillis()-playersClickingCraftingRecipes.get(playerUniqueID) <= craftingRecipeDelayInMillis) {
                        event.setCancelled(true);
                    } else {
                        playersClickingCraftingRecipes.remove(playerUniqueID);
                    }
                }
            }
        });
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-crafting-recipe-lag-exploit.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        UUID playerUniqueID = event.getPlayer().getUniqueId();
        if (playersClickingCraftingRecipes.get(playerUniqueID) != null) {
            playersClickingCraftingRecipes.remove(playerUniqueID);
        }
    }
}
