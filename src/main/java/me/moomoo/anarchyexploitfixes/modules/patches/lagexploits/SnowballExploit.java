package me.moomoo.anarchyexploitfixes.modules.patches.lagexploits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.ThrownExpBottle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileLaunchEvent;

import java.awt.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.UUID;

public class SnowballExploit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<UUID, Integer> throwCoolDown = new HashMap<>();
    private final HashSet<Location> throwCoolDownLocations = new HashSet<>();
    private final int maxProjectilesPerTime;
    private final long projectileTimeInTicks;

    public SnowballExploit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-snowball-exploit.enable",  "Patches a lag exploit.");
        this.maxProjectilesPerTime = config.getInt("patches.prevent-snowball-exploit.projectile-max-per-time", 3);
        this.projectileTimeInTicks = config.getInt("patches.prevent-snowball-exploit.projectile-time-in-ticks", 10);
    }

    @Override
    public String name() {
        return "prevent-snowball-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-snowball-exploit.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onThrow(ProjectileLaunchEvent event) {
        Entity projectile = event.getEntity();
        Location projectileLocation = projectile.getLocation();
        Point projectilePoint = new Point(projectileLocation.getBlockX(), projectileLocation.getBlockZ());

        boolean found = false;
        for (Player player : plugin.getServer().getOnlinePlayers()) {
            if (projectilePoint.distance(new Point(player.getLocation().getBlockX(), player.getLocation().getBlockZ())) <= 1) {
                UUID playerUniqueID = player.getUniqueId();
                found = true;
                if (throwCoolDown.containsKey(playerUniqueID) && throwCoolDown.get(playerUniqueID) > maxProjectilesPerTime) {
                    if (!(projectile instanceof ThrownExpBottle)) {
                        event.setCancelled(true);
                    }
                } else {
                    throwCoolDown.merge(playerUniqueID, 1, Integer::sum);
                    plugin.getServer().getScheduler().runTaskLaterAsynchronously(
                            plugin, () -> throwCoolDown.put(playerUniqueID, throwCoolDown.get(playerUniqueID) - 1), projectileTimeInTicks
                    );
                }
            }
        }
        if (!found) {
            boolean done = false;
            for (Location savedLocation : throwCoolDownLocations) {
                // We check if the entity is anywhere near our last
                if (projectilePoint.distance(new Point(savedLocation.getBlockX(), savedLocation.getBlockZ())) <= 100) {
                    done = true;
                    event.setCancelled(true);
                }
            }
            if (!done) {
                throwCoolDownLocations.add(projectileLocation);
                plugin.getServer().getScheduler().runTaskLaterAsynchronously(
                        plugin, () -> throwCoolDownLocations.remove(projectileLocation), 20L
                );
            }
        }
    }
}
