package me.moomoo.anarchyexploitfixes.modules.patches.Illegals;

import me.moomoo.anarchyexploitfixes.utils.ItemUtils;
import org.bukkit.Bukkit;
import org.bukkit.block.ShulkerBox;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.Map;

public class IllegalUtils {

    public static void iterateThroughShulker(ItemStack item) {
        // Warning: Enables a dupe exploit, reason why its disabled by default - Fix in a pr if you have time! -
        // https://cdn.discordapp.com/attachments/810446565822038016/858851144750989312/jbIAkzJ9CU.mp4
        if (!ItemUtils.isShulkerBox(item)) return;

        BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
        ShulkerBox shulkerBox = (ShulkerBox) meta.getBlockState();

        for (ItemStack itemInShulker : shulkerBox.getInventory()) {
            // do something
        }

        shulkerBox.update();
        meta.setBlockState(shulkerBox);
        item.setItemMeta(meta);
    }

    public static void revertUnbreakableIfPresent(ItemStack item) {
        int durability = item.getDurability();
        short maxDurability = item.getType().getMaxDurability();

        if (!getConfig().getBoolean("RevertUnbreakables.SkipZeroDurability") || maxDurability != 0) {
            if (durability > maxDurability) {
                item.setDurability(maxDurability);
            }
            if (durability < 0) {
                item.subtract(item.getAmount());
            }
        } else {
            if (durability > 2031) {
                item.setDurability(maxDurability);
            }
        }
    }


    // old shitty barely readable code
    public void revert(ItemStack item) {
        if (item != null) {

            if (getConfig().getBoolean("RevertStackedItems")) {
                if (getConfig().getBoolean("OnlyRevertStacksForCertainItems")) {
                    for (String s : getConfig().getStringList("RevertStackedItemsList")) {
                        if (item.getType().name().equals(s) && item.getAmount() > item.getMaxStackSize()) {
                            item.setAmount(item.getMaxStackSize());
                        }
                    }
                } else {
                    if (item.getAmount() > item.getMaxStackSize()) {
                        item.setAmount(item.getMaxStackSize());
                    }
                }
            }

            if (getConfig().getBoolean("RevertUnbreakables.Enabled")) {
                if (getConfig().getBoolean("RevertUnbreakables.EnableWhitelist")) {
                    if (getConfig().getStringList("RevertUnbreakables.Whitelist").contains(item.getType().name())) {
                        if (!getConfig().getBoolean("RevertUnbreakables.SkipZeroDurability") || item.getType().getMaxDurability() != 0) {
                            if (item.getDurability() > item.getType().getMaxDurability()) {
                                item.setDurability(item.getType().getMaxDurability());
                            }
                            if (item.getDurability() < 0) {
                                item.subtract(item.getAmount());
                            }
                        } else {
                            if (item.getDurability() > 2031) {
                                item.setDurability(item.getType().getMaxDurability());
                            }
                        }
                    }
                } else {
                    if (!getConfig().getStringList("ItemsSkipped").contains(item.getType().name())) {
                        if (!getConfig().getBoolean("RevertUnbreakables.SkipZeroDurability") || item.getType().getMaxDurability() != 0) {
                            if (item.getDurability() > item.getType().getMaxDurability()) {
                                item.setDurability(item.getType().getMaxDurability());
                            }
                            if (item.getDurability() < 0) {
                                item.subtract(item.getAmount());
                            }
                        } else {
                            if (item.getDurability() > 2031) {
                                item.setDurability(item.getType().getMaxDurability());
                            }
                        }
                    }
                }
            }

            if (getConfig().getBoolean("RevertEnchantments"))
                revertEnchantments(item);


            if (getConfig().getStringList("BANNED_BLOCKS").contains(item.getType().name()))
                item.subtract(item.getAmount());
            if (getConfig().getStringList("BANNED_NAMES").contains(item.getI18NDisplayName()))
                item.subtract(item.getAmount());
            if (getConfig().getBoolean("DataValues.RevertSpecificDataValues")) {
                if (getConfig().getStringList("DataValues.SpecificDataValues").contains(item.getData().toString())) {
                    item.subtract(item.getAmount());
                }
                if (getConfig().getBoolean("DataValues.RevertIllegalGoldenApple")) {
                    if (item.getType().name().equals("GOLDEN_APPLE")) {
                        if (!item.getData().toString().equals("GOLDEN_APPLE(0)") && !item.getData().toString().equals("GOLDEN_APPLE(1)") && !item.getData().toString().equals("GOLDEN_APPLE0") && !item.getData().toString().equals("LEGACY_GOLDEN_APPLE(0)") && !item.getData().toString().equals("LEGACY_GOLDEN_APPLE(1)")) {
                            item.subtract(item.getAmount());
                        }
                    }
                }
            }
        }
    }

    private void revertEnchantments(ItemStack item) {
        if (!getConfig().getStringList("ItemsSkipped").contains(item.getType().name())) {
            for (Map.Entry<Enchantment, Integer> entry : item.getEnchantments().entrySet()) {
                if (entry.getValue() != null && entry.getKey() != null) {
                    if (getConfig().getBoolean("RevertSpecificEnchantments")) {
                        for (String s : getConfig().getStringList("SpecificEnchantments")) {
                            if (entry.getKey().getName().contains(s)) {
                                if (entry.getValue() > entry.getKey().getMaxLevel()) {
                                    replaceEnchantment(item, entry.getKey(), entry.getKey().getMaxLevel());
                                } else {
                                    if (!entry.getKey().canEnchantItem(item)) {
                                        item.removeEnchantment(entry.getKey());
                                    }
                                }
                            }

                        }
                    } else {
                        if (entry.getValue() > entry.getKey().getMaxLevel()) {
                            replaceEnchantment(item, entry.getKey(), entry.getKey().getMaxLevel());
                        } else {
                            if (!entry.getKey().canEnchantItem(item)) {
                                item.removeEnchantment(entry.getKey());
                            }
                        }
                    }
                }
            }
        }
    }

    public void replaceEnchantment(ItemStack item, Enchantment enchantment, Integer level) {
        item.removeEnchantment(enchantment);

        if (enchantment.canEnchantItem(item)) {
            item.addEnchantment(enchantment, level);
        } else {
            if (!getConfig().getBoolean("RevertUnEnchantable"))
                item.addUnsafeEnchantment(enchantment, level);
        }
    }

    if (getConfig().getBoolean("StrictIllegalPrevention")) {
        Bukkit.getServer().getScheduler().runTaskTimer(this, () -> Bukkit.getWorlds().forEach(world -> world.getPlayers().forEach(player -> player.getInventory().forEach(this::revert))), 0L, 20L);
    }
}
