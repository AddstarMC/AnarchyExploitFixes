package me.moomoo.anarchyexploitfixes.modules.patches.packetpatches.craftingrecipelag;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class CraftingRecipePacketListener implements Listener {

    private final HashMap<UUID, Long> playersClickingCraftingRecipes = new HashMap<>();

    protected CraftingRecipePacketListener(
            final long craftingRecipeDelayInMillis
    ) {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.NORMAL, PacketType.Play.Client.AUTO_RECIPE
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary() || event.getPlayer() == null) return;

                UUID playerUniqueID = event.getPlayer().getUniqueId();

                if (
                        playersClickingCraftingRecipes.containsKey(playerUniqueID)
                        && playersClickingCraftingRecipes.get(playerUniqueID) > System.currentTimeMillis()
                ) {
                    event.setCancelled(true);
                } else {
                    playersClickingCraftingRecipes.put(playerUniqueID, System.currentTimeMillis() + craftingRecipeDelayInMillis);
                }
            }
        });
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        UUID playerUniqueID = event.getPlayer().getUniqueId();
        if (playersClickingCraftingRecipes.get(playerUniqueID) != null) {
            playersClickingCraftingRecipes.remove(playerUniqueID);
        }
    }
}
