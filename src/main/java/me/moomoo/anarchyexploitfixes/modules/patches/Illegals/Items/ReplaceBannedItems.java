package me.moomoo.anarchyexploitfixes.modules.patches.Illegals.Items;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

public class ReplaceBannedItems implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> bannedItems = new HashSet<>();
    private final Material replacement;

    public ReplaceBannedItems() {
        Config config = AnarchyExploitFixes.getConfiguration();
        List<String> configuredBannedItems = config.getList("illegals.replace-banned-items.banned-items", Arrays.asList("BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME"));
        for (String configuredItem : configuredBannedItems) {
            Material bannedMaterial = Material.getMaterial(configuredItem);
            if (bannedMaterial != null) {
                bannedItems.add(bannedMaterial);
            } else {
                Bukkit.getLogger().warning("(Replace Banned Items) Material '"+configuredItem+"' is not a valid Material. Please use correct Material enums for your Minecraft version.");
            }
        }
        String configuredReplacement = config.getString("illegals.replace-banned-items.replacement-item", "STONE");
        Material replaceMaterial = Material.getMaterial(configuredReplacement);
        if (replaceMaterial != null) {
            this.replacement = replaceMaterial;
        } else {
            Bukkit.getLogger().warning("(Replace Banned Items) Replacement Material '"+configuredReplacement+"' is not a valid Material. Please use correct Material enums for your Minecraft version.");
            this.replacement = XMaterial.STONE.parseMaterial();
        }
    }

    @Override
    public String name() {
        return "Replace Banned Items";
    }

    @Override
    public String category() {
        return "Illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.replace-banned-items.enable", true);
    }

    private void handleBannedItemsIfPresent(ItemStack item) {
        if (item == null) return;
        if (bannedItems.contains(item.getType())) {
            item.setType(replacement);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemsIfPresent(event.getItemDrop().getItemStack());
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleBannedItemsIfPresent(event.getCurrentItem());
        handleBannedItemsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }
}
