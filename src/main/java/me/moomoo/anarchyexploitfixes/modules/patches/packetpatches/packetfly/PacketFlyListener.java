package me.moomoo.anarchyexploitfixes.modules.patches.packetpatches.packetfly;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class PacketFlyListener {
    private final BukkitScheduler bukkitScheduler;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    protected PacketFlyListener(
            final AnarchyExploitFixes plugin,
            final int maxTeleportPacketsPer10s,
            final boolean shouldKickPlayer,
            final boolean logIsEnabled,
            final String modulePrefix
    ) {
        this.bukkitScheduler = plugin.getServer().getScheduler();
        final Material air = XMaterial.AIR.parseMaterial();
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TELEPORT_ACCEPT
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;
                Player player = event.getPlayer();
                if (
                        player == null
                        || player.isGliding()
                        || player.isInsideVehicle()
                ) return;

                if (
                        player.getLocation().getBlock().getRelative(BlockFace.DOWN).getType().equals(air)
                ) {
                    UUID playerUniqueID = player.getUniqueId();
                    Integer playerTPPackets = levels.get(playerUniqueID);

                    if (playerTPPackets != null) {
                        if (playerTPPackets > maxTeleportPacketsPer10s) {
                            event.setCancelled(true);
                            if (shouldKickPlayer) player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).masked_KickMessage);
                            if (logIsEnabled) LogUtils.moduleLog(Level.INFO, modulePrefix,
                                    "Prevented player '"+player.getName()+"' from packet flying"
                            );
                        } else {
                            levels.merge(playerUniqueID, 1, Integer::sum);
                            bukkitScheduler.runTaskLaterAsynchronously(
                                    plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                            );
                        }
                    } else {
                        levels.put(playerUniqueID, 1);
                        bukkitScheduler.runTaskLaterAsynchronously(
                                plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                        );
                    }
                }
            }
        });
    }
    
}
