package me.moomoo.anarchyexploitfixes.modules.patches.crashexploits;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.util.HashSet;

public class RedstoneOnTrapdoorCrash implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> redstone = new HashSet<>();

    public RedstoneOnTrapdoorCrash() {
        redstone.add(XMaterial.REDSTONE_WIRE.parseMaterial());
        redstone.add(XMaterial.REDSTONE.parseMaterial());
    }

    @Override
    public String name() {
        return "prevent-redstone-on-trapdoors";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.enable", false, "prevents a powerful crash exploit present in 1.13 - 1.19.3");
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (redstone.contains(event.getBlock().getType()) && event.getBlock().getRelative(BlockFace.DOWN).getType().name().contains("TRAPDOOR")) {
            event.setCancelled(true);
        }
    }
}
