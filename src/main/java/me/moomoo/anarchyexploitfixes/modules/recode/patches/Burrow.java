package me.moomoo.anarchyexploitfixes.modules.recode.patches;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

public class Burrow implements AnarchyExploitFixesModule, Listener {

    private final double damageWhenMoving;
    private final boolean teleportAboveBlock, preventIfBlockAboveBurrow, breakAnvilInsteadOfTP, allowSlabs;

    public Burrow() {
        Config config = AnarchyExploitFixes.getConfiguration();
        this.damageWhenMoving = config.getDouble("patches.prevent-burrow.burrow-damage-when-moving",1.0);
        this.teleportAboveBlock = config.getBoolean("patches.prevent-burrow.teleport-above-block", true);
        this.preventIfBlockAboveBurrow = config.getBoolean("patches.prevent-burrow.prevent-if-block-above", false);
        this.breakAnvilInsteadOfTP = config.getBoolean("patches.prevent-burrow.break-anvil-instead-of-teleport", true);
        this.allowSlabs = config.getBoolean("patches.prevent-burrow.allow-slabs-in-burrow", true);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Prevent Burrow");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-burrow.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getGameMode().equals(GameMode.SURVIVAL)) return;
        
        Location playerLocation = player.getLocation();
        Block burrowBlock = playerLocation.getBlock();
        Material burrowBlockMaterial = burrowBlock.getType();

        if (
                burrowBlockMaterial.equals(Material.AIR) ||
                burrowBlockMaterial.equals(Material.SAND) ||
                burrowBlockMaterial.equals(Material.GRAVEL)
        ) return;

        Block blockAboveBurrowBlock = burrowBlock.getRelative(BlockFace.UP);
        if (preventIfBlockAboveBurrow || blockAboveBurrowBlock.getType().equals(Material.AIR)) {
            if (!burrowBlockMaterial.equals(Material.SOUL_SAND) && burrowBlockMaterial.isOccluding()) {
                if (!burrowBlockMaterial.equals(Material.DOUBLE_STEP) || !allowSlabs) {
                    player.damage(damageWhenMoving);
                    if (teleportAboveBlock) {
                        player.teleport(blockAboveBurrowBlock.getLocation());
                    }
                }
            }
            switch (burrowBlockMaterial) {
                case ENDER_CHEST:
                case SOUL_SAND: {
                    if (playerLocation.getY() - playerLocation.getBlockY() < 0.875) {
                        player.damage(damageWhenMoving);
                        if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                    }
                    break;
                }
                case ENCHANTMENT_TABLE: {
                    if (playerLocation.getY() - playerLocation.getBlockY() < 0.75) {
                        player.damage(damageWhenMoving);
                        if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                    }
                    break;
                }
                case ANVIL: {
                    player.damage(damageWhenMoving);
                    if (breakAnvilInsteadOfTP) {
                        burrowBlock.breakNaturally();
                    } else {
                        if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                    }
                    break;
                }
                case BEDROCK:
                case BEACON: {
                    player.damage(damageWhenMoving);
                    if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                    break;
                }
            }
        }
    }
}
