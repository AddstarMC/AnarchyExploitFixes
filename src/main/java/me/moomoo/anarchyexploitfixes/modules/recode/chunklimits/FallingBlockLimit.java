package me.moomoo.anarchyexploitfixes.modules.recode.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtils;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.FallingBlock;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.block.BlockPlaceEvent;

public class FallingBlockLimit implements AnarchyExploitFixesModule, Listener {

    private final int maxGravityBlockPerChunk;

    public FallingBlockLimit() {
        this.maxGravityBlockPerChunk = AnarchyExploitFixes.getConfiguration().getInt("chunk-limits.falling-block-limit.max-gravitiy-blocks-per-chunk", 50);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Falling Block Limit");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.falling-block-limit.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Material blockPlayerWantsToPlace = event.getBlock().getType();
        if (!blockPlayerWantsToPlace.hasGravity()) return;

        if (ChunkUtils.amountOfMaterialInChunk(event.getBlock().getChunk(), blockPlayerWantsToPlace) > maxGravityBlockPerChunk) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onEntityChange(BlockPhysicsEvent event) {
        if (!event.getChangedType().hasGravity()) return;

        int gravityBlocks = 0;
        for (Entity entity : event.getBlock().getChunk().getEntities()) {
            if (entity instanceof FallingBlock) {
                gravityBlocks++;
                if (gravityBlocks > maxGravityBlockPerChunk) {
                    event.setCancelled(true);
                    return;
                }
            }
        }
    }
}
