package me.moomoo.anarchyexploitfixes.modules.recode.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ElytraUtils;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

public class ElytraAtSpawn implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private final int spawn_radius;
    private final double spawn_SpeedOldChunks, spawn_SpeedNewChunks, spawn_DenyElytraTPS;
    private final boolean spawn_DenyElytra, spawn_DenyOnLowTPS, spawn_AlsoRemoveOnLowTPS, showActionbarMsgs, displayChunkInfo;

    public ElytraAtSpawn() {
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        this.spawn_DenyElytra = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-usage", false);
        this.spawn_radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.spawn_SpeedOldChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-old-chunks", 1.0);
        this.spawn_SpeedNewChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-new-chunks", 0.8);
        this.spawn_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-on-low-TPS", true);
        this.spawn_DenyElytraTPS = config.getDouble("elytra.elytra-speed.At-Spawn.deny-elytra-TPS", 10.0);
        this.spawn_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "Speed Limit At Spawn";
    }

    @Override
    public String category() {
        return "Elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (!player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (!ElytraUtils.isAtSpawn(player, spawn_radius)) return;

        LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());

        if (spawn_DenyElytra) {
            event.setCancelled(true);
            if (showActionbarMsgs) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.spawn_DisabledHere.replace("%radius%", String.valueOf(spawn_radius))
            ));
            return;
        }

        if (spawn_DenyOnLowTPS && plugin.tps <= spawn_DenyElytraTPS) {
            event.setCancelled(true);
            if (showActionbarMsgs) {
                player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                        lang.spawn_DisabledLowTPS).replace("%tps%", String.valueOf(spawn_DenyElytraTPS))
                );
            }
            if (spawn_AlsoRemoveOnLowTPS) {
                PlayerInventory playerInv = player.getInventory();
                if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(Material.ELYTRA)) {
                    ItemStack elytra = playerInv.getChestplate();
                    playerInv.setChestplate(null);
                    player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                }
            }
            return;
        }

        Location from = event.getFrom();
        Location to = event.getTo();
        double distX = to.getX() - from.getX();
        double distZ = to.getZ() - from.getZ();
        double flySpeed = Math.hypot(distX, distZ);

        if (plugin.playersInNewChunks.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (flySpeed > spawn_SpeedNewChunks+tolerance) {
                // too fast
                event.setCancelled(true);
                if (!showActionbarMsgs) return;
                if (displayChunkInfo) {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.spawn_TooFastChunkInfo
                                    .replace("%neworold%", lang.spawn_New)
                                    .replace("%chunks%", lang.spawn_Chunks)
                            )
                    );
                } else {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.spawn_TooFast.replace("%radius%", String.valueOf(spawn_radius))
                    ));
                }
            } else {
                if (!showActionbarMsgs) return;
                if (displayChunkInfo) {
                    player.sendActionBar(
                            ChatColor.translateAlternateColorCodes('&',
                                    lang.spawn_YouAreFlyingIn
                                            .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.spawn_New_Color)+lang.spawn_New)
                                            .replace("%chunks%", lang.spawn_Chunks)
                            )
                                    +" "
                                    + ChatColor.translateAlternateColorCodes('&',
                                    lang.spawn_Speed
                                            .replace("%speed%", String.valueOf(flySpeed))
                                            .replace("%maxspeed%", String.valueOf(spawn_SpeedNewChunks))
                            )
                    );
                } else {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.global_Speed
                                    .replace("%speed%", ElytraUtils.speed(flySpeed))
                                    .replace("%maxspeed%", String.valueOf(spawn_SpeedNewChunks))
                            )
                    );
                }
            }
        } else {
            // Speed Old Chunks
            if (flySpeed > spawn_SpeedOldChunks+tolerance) {
                // too fast
                event.setCancelled(true);
                if (!showActionbarMsgs) return;
                if (displayChunkInfo) {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.spawn_TooFastChunkInfo
                                    .replace("%neworold%", lang.spawn_Old)
                                    .replace("%chunks%", lang.spawn_Chunks)
                    ));
                } else {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.spawn_TooFast.replace("%radius%", String.valueOf(spawn_radius))
                    ));
                }
            } else {
                if (!showActionbarMsgs) return;
                if (displayChunkInfo) {
                    player.sendActionBar(
                            ChatColor.translateAlternateColorCodes('&',
                                    lang.spawn_YouAreFlyingIn
                                            .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.spawn_Old_Color)+lang.spawn_Old)
                                            .replace("%chunks%", lang.spawn_Chunks)
                            )
                                    +" "
                                    + ChatColor.translateAlternateColorCodes('&',
                                    lang.spawn_Speed
                                            .replace("%speed%", String.valueOf(flySpeed))
                                            .replace("%maxspeed%", String.valueOf(spawn_SpeedOldChunks))
                            )
                    );
                } else {
                    player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                            lang.global_Speed
                                    .replace("%speed%", ElytraUtils.speed(flySpeed))
                                    .replace("%maxspeed%", String.valueOf(spawn_SpeedOldChunks))
                            )
                    );
                }
            }
        }
    }
}
