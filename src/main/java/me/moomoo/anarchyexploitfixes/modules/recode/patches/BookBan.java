package me.moomoo.anarchyexploitfixes.modules.recode.patches;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtils;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class BookBan implements AnarchyExploitFixesModule, Listener {

    private final int maxByteSizePerPage;
    public BookBan() {
        this.maxByteSizePerPage = AnarchyExploitFixes.getConfiguration().getInt("patches.prevent-book-ban.max-byte-size-per-page", 255);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.enabledModules.add("(Patches) Prevent Book Ban");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-book-ban.enable", true);
    }

    private void clearBooks(Player player) {
        for (ItemStack itemInInventory : player.getInventory().getContents()) {
            if (itemInInventory != null && itemInInventory.getType() != null) {
                if (ItemUtils.isBook(itemInInventory)) {
                    stripPages(itemInInventory);
                }

                if (ItemUtils.isShulkerBox(itemInInventory)) {
                    BlockStateMeta meta = (BlockStateMeta) itemInInventory.getItemMeta();
                    ShulkerBox shulkerBox = (ShulkerBox) meta.getBlockState();

                    for (ItemStack itemInsideShulker : shulkerBox.getInventory().getContents()) {
                        if (itemInsideShulker != null && itemInsideShulker.getType() != null && ItemUtils.isBook(itemInsideShulker)) {
                            stripPages(itemInsideShulker);
                        }
                    }

                    shulkerBox.update();
                    meta.setBlockState(shulkerBox);
                    itemInInventory.setItemMeta(meta);
                }
            }
        }
    }

    private void stripPages(ItemStack book) {
        BookMeta bookMeta = (BookMeta) book.getItemMeta();

        List<String> pages = new ArrayList<>();

        for (String page : bookMeta.getPages()) {
            if (page.getBytes(StandardCharsets.UTF_8).length <= maxByteSizePerPage)
                pages.add(page);
        }

        bookMeta.setPages(pages);

        book.setItemMeta(bookMeta);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        clearBooks(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        clearBooks(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onKick(PlayerKickEvent event) {
        clearBooks(event.getPlayer());
    }
}
