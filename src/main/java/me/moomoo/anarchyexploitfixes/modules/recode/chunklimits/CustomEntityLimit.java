package me.moomoo.anarchyexploitfixes.modules.recode.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

public class CustomEntityLimit implements AnarchyExploitFixesModule {

    private final Logger logger;
    private final HashMap<EntityType, Integer> entityLimits = new HashMap<>();
    private final boolean logIsEnabled;
    private final long checkPeriod;

    public CustomEntityLimit() {
        this.logger = Bukkit.getLogger();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.custom-limit.log-removals", true);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.custom-limit.check-period-in-ticks", 20);
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("WITHER", 16);
        defaults.put("COW", 10);
        defaults.put("CHICKEN", 10);
        defaults.put("HORSE", 5);
        defaults.put("SKELETON_HORSE", 5);
        defaults.put("DONKEY", 5);
        ConfigurationSection section = config.getConfigSection("chunk-limits.entity-limits.custom-limit.limited-types", defaults);
        for (String configuredEntity : section.getKeys(false)) {
            Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredEntity));
            EntityType limitedEntity = EntityType.fromName(configuredEntity);
            if (limitedEntity != null) {
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } else {
                logger.warning("(Entity Limit) Entity of Type '"+configuredEntity+"' not recognized. Use correct EntityType enums for your Minecraft version!");
            }
        }
    }

    @Override
    public String name() {
        return "Custom Entity Limit";
    }

    @Override
    public String category() {
        return "ChunkLimits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, checkAndRemoveCustom, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.custom-limit.enable", false);
    }

    private final Runnable checkAndRemoveCustom = new Runnable() {
        @Override
        public void run() {
            for (World world : Bukkit.getWorlds()) {
                for (Chunk chunk : world.getLoadedChunks()) {
                    for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {

                        Integer maxAllowed = limit.getValue();
                        int count = 0;

                        for (Entity entity : chunk.getEntities()) {
                            if (!entity.getType().equals(limit.getKey())) return;

                            if (count > maxAllowed) {
                                entity.remove();
                                if (logIsEnabled) logger.info("(EntityLimits) Removed entity " + entity.getType()
                                        + " at " + entity.getLocation() + " because reached limit of " + maxAllowed
                                );
                            }

                            count++;
                        }
                    }
                }
            }
        }
    };
}
