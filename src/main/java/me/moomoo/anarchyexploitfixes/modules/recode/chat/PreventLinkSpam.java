package me.moomoo.anarchyexploitfixes.modules.recode.chat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

public class PreventLinkSpam implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Logger logger;
    private final BukkitScheduler bukkitScheduler;
    private final HashSet<UUID> playersSendingLinksInChat = new HashSet<>();
    private final HashSet<String> linkRegexes = new HashSet<>();
    private final HashSet<String> lenientExempts = new HashSet<>();
    private final boolean logIsEnabled, preventOnlyAtSpawn, lenientCheckIsEnabled;
    private final int radius;
    private final long linkTime;

    public PreventLinkSpam() {
        this.plugin = AnarchyExploitFixes.getInstance();
        this.logger = Bukkit.getLogger();
        this.bukkitScheduler = Bukkit.getScheduler();

        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("chat.links.prevent-spamming.log", true);
        this.preventOnlyAtSpawn = config.getBoolean("chat.links.prevent-spamming.only-for-players-around-spawn", true);
        this.radius = config.getInt("chat.links.prevent-spamming.spawn-radius", 1000);
        this.linkTime = config.getInt("chat.links.prevent-spamming.delay-until-next-link-in-seconds", 300) * 20L;
        List<String> configuredLinkRegexes = config.getList("chat.links.link-regex",
                Arrays.asList("(https?://(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?://(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})",
                        "[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z()]{1,6}\\b([-a-zA-Z()@:%_+.~#?&/=]*)")
        );
        linkRegexes.addAll(configuredLinkRegexes);
        this.lenientCheckIsEnabled = config.getBoolean("chat.links.more-lenient-link-check.enable", true);
        List<String> configuredLenientExempts = config.getList("chat.prevent-links.more-lenient-link-check.exemptions", Arrays.asList("discord", "dc"));
        if (lenientCheckIsEnabled) lenientExempts.addAll(configuredLenientExempts);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.enabledModules.add("(Chat) Prevent Link Spam");
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        if (config.getBoolean("chat.links.prevent-sending.enable", false)) return false;
        return config.getBoolean("chat.links.prevent-spamming.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerChat(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.chatbypass")) return;
        if (preventOnlyAtSpawn && player.getLocation().distance(player.getWorld().getSpawnLocation()) > radius) return;

        String message = event.getMessage();
        int amountOfDetectedLinks = 0;
        int amountOfExemptedLinks = 0;

        for (String word : message.split(" ")) {
            for (String regex : linkRegexes) {
                if (!word.matches(regex)) return;
                amountOfDetectedLinks++;

                if (lenientCheckIsEnabled && !lenientExempts.isEmpty()) {
                    for (String exemption : lenientExempts) {
                        if (!word.contains(exemption)) return;
                        amountOfExemptedLinks++;
                    }
                }

                // if one regex matched, no need try matching further patterns
                break;
            }
        }

        if (amountOfDetectedLinks > amountOfExemptedLinks) {
            UUID playerUniqueId = player.getUniqueId();

            if (!playersSendingLinksInChat.contains(playerUniqueId)) {
                playersSendingLinksInChat.add(playerUniqueId);
            } else {
                if (logIsEnabled) logger.info(
                            "(Prevent Link Spam) Prevented "+player.getName()+" from spamming message containing link: '"+message+"'"
                );
                bukkitScheduler.runTaskLater(
                        plugin, () -> playersSendingLinksInChat.remove(playerUniqueId), linkTime
                );
            }
        }
    }
}
