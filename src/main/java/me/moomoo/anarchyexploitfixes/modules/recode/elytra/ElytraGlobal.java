package me.moomoo.anarchyexploitfixes.modules.recode.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ElytraUtils;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

public class ElytraGlobal implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private final int spawn_radius;
    private final double global_SpeedOldChunks, global_SpeedNewChunks, global_BurstSpeedOldChunks,
            global_BurstSpeedNewChunks, global_BurstOldChunk_TPS, global_BurstNewChunk_TPS, global_DenyElytraTPS;
    private final boolean showActionbarMsgs, displayChunkInfo, spawn_settingsEnabled, ceiling_settingsEnabled, global_DenyElytra,
            global_EnableBursting, global_DenyOnLowTPS, global_AlsoRemoveOnLowTPS;

    public ElytraGlobal() {
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);

        this.spawn_settingsEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.ceiling_settingsEnabled = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);

        this.global_DenyElytra = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-usage", false);
        this.global_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-old-chunks", 1.81);
        this.global_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-new-chunks", 1.81);
        this.global_EnableBursting = config.getBoolean("elytra.elytra-speed.Global-Settings.enable-bursting", true);
        this.global_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunks", 5.0);
        this.global_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunk-TPS", 18.0);
        this.global_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunks", 3.12);
        this.global_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunk-TPS", 19.0);
        this.global_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-on-low-TPS", true);
        this.global_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Global-Settings.deny-elytra-TPS", 12.0);
        this.global_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "Global Speed Limit";
    }

    @Override
    public String category() {
        return "Elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.Global-Settings.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (!player.hasPermission("anarchyexploitfixes.bypass")) return;

        LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());

        if (global_DenyElytra) {
            event.setCancelled(true);
            if (showActionbarMsgs) player.sendActionBar(
                    ChatColor.translateAlternateColorCodes('&', lang.elytra_normal_disabledHere)
            );
            return;
        }

        if (shouldDenyWhileTPSLow && plugin.tps <= deny_TPS) {
            event.setCancelled(true);
            if (showActionbarMsgs) {
                player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                        lang.elytra_disabledLowTPS).replace("%tps%", String.valueOf(deny_TPS))
                );
            }
            if (shouldAlsoRemoveElytra) {
                PlayerInventory playerInv = player.getInventory();
                if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(Material.ELYTRA)) {
                    ItemStack elytra = playerInv.getChestplate();
                    playerInv.setChestplate(null);
                    player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                }
            }
            return;
        }

        Location from = event.getFrom();
        Location to = event.getTo();
        double distX = to.getX() - from.getX();
        double distZ = to.getZ() - from.getZ();
        double flySpeed = Math.hypot(distX, distZ);

        if (plugin.playersInNewChunks.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (global_EnableBursting && ElytraUtils.canBurst(new_Chunks_Burst_TPS)) {
                // Burst Speed New Chunks
                if (flySpeed > new_Chunks_Burst_Speed+tolerance) {
                    // Too fast
                    event.setCancelled(true);
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {

                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_goingTooFast
                        ));
                    }
                } else {
                    // Not too fast
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        // actionbar info with old/new chunks info + speed
                        switch (env) {
                            case 1:
                                player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                        lang.elytra_youAreFlyingIn
                                                .replace("%neworold%", ChatColor.RED+lang.elytra_new.toUpperCase())
                                                .replace("%chunks%", lang.elytra_normal_chunks)
                                                +" "+lang.elytra_speed
                                                .replace("%speed%", ElytraUtils.speed(flySpeed))
                                                .replace("%maxspeed%", String.valueOf(new_Chunks_Burst_Speed))
                                ));
                                break;
                            case 3:
                                player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                        lang.elytra_youAreFlyingIn
                                                .replace("%neworold%", ChatColor.RED+lang.elytra_new.toUpperCase())
                                                .replace("%chunks%", lang.elytra_netherceiling_chunks)
                                                +" "+lang.elytra_speed
                                                .replace("%speed%", ElytraUtils.speed(flySpeed))
                                                .replace("%maxspeed%", String.valueOf(new_Chunks_Burst_Speed))
                                ));
                                break;
                        }
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_speed
                                        .replace("%speed%", ElytraUtils.speed(flySpeed))
                                        .replace("%maxspeed%", String.valueOf(new_Chunks_Burst_Speed))
                        ));
                    }
                }
            } else {
                // Normal Speed New Chunks
                if (flySpeed > new_Chunks_Speed+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    if (!showActionbarMsgs) return;
                    // you are going too fast (2 cases, 1 normal going too fast, 1 restricted during low tps)
                    if (displayChunkInfo) {

                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_goingTooFast
                        ));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        // actionbar info with old/new chunks info + speed

                    } else {
                        // actionbar info with only speed info
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_speed
                                        .replace("%speed%", ElytraUtils.speed(flySpeed))
                                        .replace("%maxspeed%", String.valueOf(new_Chunks_Speed))
                        ));
                    }
                }
            }
        } else {
            // Speed Old Chunks
            if (global_EnableBursting && ElytraUtils.canBurst(old_Chunks_Burst_TPS)) {
                // Burst Speed Old Chunks
                if (flySpeed > old_Chunks_Burst_Speed+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_goingTooFastChunks
                                        .replace("%neworold%", lang.elytra_new)
                                        .replace("%chunks%", lang.elytra_normal_chunks)
                        ));
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                lang.elytra_goingTooFast
                        ));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        // actionbar info with old/new chunks info + speed
                    } else {
                        // actionbar info with only speed info
                    }
                }
            } else {
                // Normal Speed Old Chunks
                if (flySpeed > old_Chunks_Speed+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    if (!showActionbarMsgs) return;
                    // you are going too fast (2 cases)
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        // actionbar info with old/new chunks info + speed
                    } else {
                        // actionbar info with only speed info
                    }
                }
            }
        }
    }


}
