package me.moomoo.anarchyexploitfixes.modules.recode.chat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.ConfigCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.*;
import java.util.logging.Logger;

public class PreventChatSpam implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final ConfigCache configCache;
    private final Logger logger;
    private final BukkitScheduler bukkitScheduler;
    private final HashSet<UUID> playersWritingInChat = new HashSet<>();
    private final HashSet<String> previouslySentMessages = new HashSet<>();
    private final HashMap<UUID, Integer> playersAndTheirMessageCounts = new HashMap<>();

    public PreventChatSpam() {
        this.plugin = AnarchyExploitFixes.getInstance();
        this.configCache = AnarchyExploitFixes.getConfiguration();
        this.logger = Bukkit.getLogger();
        this.bukkitScheduler = Bukkit.getScheduler();
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.chatbypass")) return;

        String message = event.getMessage();

        if (playerIsSpamming(player, message)) event.setCancelled(true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPreProcess(PlayerCommandPreprocessEvent event) {
        if (!configCache.commands_PreventCmdSpam_IsEnabled) return;
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.chatbypass")) return;

        String command = event.getMessage().toLowerCase();

        if (configCache.commands_PreventCmdSpam_WhitelistIsEnabled) {
            for (String whitelistedCommand : configCache.commands_PreventCmdSpam_Whitelist) {
                if (!command.startsWith(whitelistedCommand.toLowerCase())) return;
                if (playerIsSpamming(player, command)) {
                    event.setCancelled(true);
                    break;
                }
            }
        } else {
            if (playerIsSpamming(player, command)) event.setCancelled(true);
        }
    }

    private boolean playerIsSpamming(Player player, String message) {
        UUID playerUniqueId = player.getUniqueId();

        if (!playersWritingInChat.contains(playerUniqueId)) {
            playersWritingInChat.add(playerUniqueId);
            bukkitScheduler.runTaskLaterAsynchronously(
                    plugin, () -> playersWritingInChat.remove(playerUniqueId), configCache.chat_PreventChatSpam_Time
            );
            if (!previouslySentMessages.contains(message)) {
                previouslySentMessages.add(message);
                bukkitScheduler.runTaskLaterAsynchronously(
                        plugin, () -> previouslySentMessages.remove(message), configCache.chat_PreventChatSpam_WordTime
                );
                Integer amountOfMessages = playersAndTheirMessageCounts.get(playerUniqueId);
                if (amountOfMessages == null) {
                    playersAndTheirMessageCounts.put(playerUniqueId, 1);
                } else {
                    if (amountOfMessages > configCache.chat_PreventChatSpam_MessagesPerTime) {
                        logger.info(
                                "(Chat Prevent Spam) "+player.getName() + " FAILED to send message due to too many messages in time period: '" + message + "'"
                        );
                        return true;
                    } else {
                        playersAndTheirMessageCounts.merge(playerUniqueId, 1, Integer::sum);
                        bukkitScheduler.runTaskLaterAsynchronously(
                                plugin, () -> playersAndTheirMessageCounts.put(playerUniqueId, playersAndTheirMessageCounts.get(playerUniqueId) - 1), configCache.chat_PreventChatSpam_CheckTime
                        );
                    }
                }
            } else {
                logger.info("(Chat Prevent Spam) "+player.getName() + " FAILED to send message due to duplicate message: " + message);
                return true;
            }
        } else {
            logger.info(
                    "(Chat Prevent Spam) "+player.getName()+" FAILED to send message due to slowmode: '"+message+"'"
            );
            return true;
        }
        return false;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: (Chat) Prevent Chat Spam");
    }

    @Override
    public boolean shouldEnable() {
        return configCache.chat_PreventChatSpam_IsEnabled;
    }
}
