package me.moomoo.anarchyexploitfixes.modules.recode.patches;

import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;

public class ElytraPacketFly implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final BukkitScheduler bukkitScheduler;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    private final int maxElytraOpensPer10s;
    private final boolean playerShouldBeNotified, playerShouldBeKickedInstead;

    public ElytraPacketFly() {
        this.plugin = AnarchyExploitFixes.getInstance();
        this.bukkitScheduler = Bukkit.getScheduler();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxElytraOpensPer10s = config.getInt("elytra.packet-elytra-fly.max-elytra-opens-per-10-seconds", 25);
        this.playerShouldBeNotified = config.getBoolean("elytra.packet-elytra-fly.notify-player-to-disable-packetfly", true);
        this.playerShouldBeKickedInstead = config.getBoolean("elytra.packet-elytra-fly.kick-instead-of-remove-elytra", false);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Prevent Packet Elytra Fly");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.packet-elytra-fly.patch-packet-elytra-fly", true);
    }

    @EventHandler
    public void onOpen(EntityToggleGlideEvent event) {
        if (!(event.getEntity() instanceof Player)) return;

        Player player = (Player) event.getEntity();
        UUID playerUniqueID = player.getUniqueId();

        Integer level = levels.get(playerUniqueID);
        if (level != null) {
            if (level > maxElytraOpensPer10s) {
                if (playerShouldBeKickedInstead) {
                    player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                            AnarchyExploitFixes.getLang(player.getLocale()).disablePacketElytraFly
                    ));
                } else {
                    ItemStack chestplate = player.getInventory().getChestplate();
                    if (chestplate != null && chestplate.getType().equals(Material.ELYTRA)) {
                        // remove elytra from chestplate
                        player.getInventory().setChestplate(null);
                        // drop elytra at player position
                        player.getWorld().dropItemNaturally(player.getLocation(), chestplate);
                        // play sound to notify
                        player.playSound(player.getLocation(), XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound(), 1.0F, 1.0F);
                        if (playerShouldBeNotified) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                                    AnarchyExploitFixes.getLang(player.getLocale()).disablePacketElytraFly
                        ));
                    }
                }
            } else {
                levels.merge(playerUniqueID, 1, Integer::sum);
                bukkitScheduler.runTaskLater(plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L);
            }
        } else {
            levels.put(playerUniqueID, 1);
            bukkitScheduler.runTaskLater(plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L);
        }
    }
}
