package me.moomoo.anarchyexploitfixes.modules.recode.patches.PacketPatches;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Boat;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Logger;

public class BoatFly implements AnarchyExploitFixesModule {

    private final BukkitScheduler bukkitScheduler;
    private final Logger logger;
    private final HashMap<UUID, Integer> boatLevels = new HashMap<>();
    private final boolean logIsEnabled;
    private final int maxEntityPacketsPer10s;

    public BoatFly() {
        this.bukkitScheduler = Bukkit.getScheduler();
        this.logger = Bukkit.getLogger();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("patches.boatfly-patch.log", true);
        this.maxEntityPacketsPer10s = config.getInt("patches.boatfly-patch.max-entity-packets-per-10s", 15);
    }

    @Override
    public void enable() {
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                AnarchyExploitFixes.getInstance(), ListenerPriority.HIGHEST, PacketType.Play.Client.USE_ENTITY
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;
                Player player = event.getPlayer();
                Entity vehicle = player.getVehicle();
                if (!(vehicle instanceof Boat)) return;

                UUID playerUniqueID = player.getUniqueId();
                Integer boatLevel = boatLevels.get(playerUniqueID);

                if (boatLevel != null) {
                    if (boatLevel > maxEntityPacketsPer10s) {
                        new BukkitRunnable() {
                            public void run() {
                                vehicle.remove();
                            }
                        }.runTask(plugin);
                        if (logIsEnabled) logger.info(
                                "Prevented player '"+player.getName()+"' from boat flying"
                        );
                    } else {
                        boatLevels.merge(playerUniqueID, 1, Integer::sum);
                        bukkitScheduler.runTaskLater(
                                plugin, () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L
                        );
                    }
                } else {
                    boatLevels.put(playerUniqueID, 1);
                    bukkitScheduler.runTaskLater(
                            plugin, () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L
                    );
                }
            }
        });

        logger.info("Enabled: Prevent BoatFly");
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        if (!config.protocolLib_IsDisabled && !Bukkit.getPluginManager().isPluginEnabled("ProtocolLib")) {
            logger.warning("Unable to patch BoatFly Exploit because ProtocolLib is not installed!");
            return false;
        }
        return config.getBoolean("patches.boatfly-patch.enable", true);
    }
}
