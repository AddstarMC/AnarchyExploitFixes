package me.moomoo.anarchyexploitfixes.modules.recode.bedrock;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtils;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

public class FillNetherCeilingOnChunkload implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final int ceilingY;
    private final double pauseTPS;
    private final boolean alsoCheckNewChunks, checkShouldPauseOnLowTPS;
    private final HashSet<String> exemptedWorlds = new HashSet<>();

    public FillNetherCeilingOnChunkload() {
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.ceilingY = config.getInt("bedrock.fill-in-bedrock.nether-ceiling.max-ceiling-y", 127);
        this.alsoCheckNewChunks = config.getBoolean("bedrock.fill-in-bedrock.nether-ceiling.fill-on-chunkload.also-check-new-chunks", false);
        List<String> configuredExemptedWorlds = config.getList("bedrock.fill-in-bedrock.nether-ceiling.exempted-worlds", Arrays.asList("exampleworld", "exampleworld2"));
        exemptedWorlds.addAll(configuredExemptedWorlds);
        this.checkShouldPauseOnLowTPS = config.getBoolean("bedrock.fill-in-bedrock.nether-ceiling.fill-on-chunkload.pause-on-low-tps", true);
        this.pauseTPS = config.getDouble("bedrock.fill-in-bedrock.fill-on-chunkload.nether-ceiling.pause-tps", 16.0);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Fill Nether Bedrock Ceiling On Chunkload");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.fill-in-bedrock.nether-ceiling.fill-on-chunkload.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (checkShouldPauseOnLowTPS && (plugin.tps <= pauseTPS)) return;
        if (!alsoCheckNewChunks && event.isNewChunk()) return;
        if (!event.getWorld().getEnvironment().equals(World.Environment.NORMAL)) return;

        Chunk chunk = event.getChunk();
        if (!exemptedWorlds.contains(chunk.getWorld().getName())) return;

        ChunkUtils.fillInBedrock(chunk, ceilingY);
    }
}
