package me.moomoo.anarchyexploitfixes.modules.recode.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;

import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;

public class AntiBedTrap implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, AtomicInteger> deathCount = new HashMap<>();
    private final int maxDeaths;

    public AntiBedTrap() {
        this.maxDeaths = AnarchyExploitFixes.getConfiguration().getInt("preventions.anti-bed-trap.death-amount", 2);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, deathCount::clear, 0, 30 * 20L);
        Bukkit.getLogger().info("Enabled: Anti Bed Trap");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.anti-bed-trap.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onDeath(PlayerDeathEvent event) {
        Player player = event.getEntity();
        if (player.getBedSpawnLocation() == null) return;

        UUID playerUniqueID = player.getUniqueId();
        deathCount.putIfAbsent(playerUniqueID, new AtomicInteger());

        if (deathCount.get(playerUniqueID).incrementAndGet() > maxDeaths) {
            player.setBedSpawnLocation(null);
        }
    }
}
