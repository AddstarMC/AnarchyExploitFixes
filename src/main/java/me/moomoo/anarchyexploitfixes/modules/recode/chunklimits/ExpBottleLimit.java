package me.moomoo.anarchyexploitfixes.modules.recode.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Entity;
import org.bukkit.entity.ThrownExpBottle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ExpBottleEvent;

public class ExpBottleLimit implements AnarchyExploitFixesModule, Listener {

    private final int maxExpBottlePerChunk;

    public ExpBottleLimit() {
        this.maxExpBottlePerChunk = AnarchyExploitFixes.getConfiguration().getInt("chunk-limits.exp-bottle-limit.max-exp-bottle-per-chunk", 25);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Limit Thrown Experience Bottles");
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.exp-bottle-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onExpBottle(ExpBottleEvent event) {
        Entity[] entitiesInEventChunk = event.getEntity().getChunk().getEntities();

        if (amountOfExpBottles(entitiesInEventChunk) > maxExpBottlePerChunk) {
            removeExpBottles(entitiesInEventChunk);
        }
    }

    private int amountOfExpBottles(Entity[] entities) {
        int count=0;
        for (Entity entity : entities) {
            if (entity instanceof ThrownExpBottle) {
                count++;
            }
        }
        return count;
    }

    private void removeExpBottles(Entity[] entities) {
        for (Entity entity : entities) {
            if (entity instanceof ThrownExpBottle) {
                entity.remove();
            }
        }
    }
}
