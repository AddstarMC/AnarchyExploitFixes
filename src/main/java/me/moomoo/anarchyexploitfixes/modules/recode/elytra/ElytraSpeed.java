package me.moomoo.anarchyexploitfixes.modules.recode.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.Event;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.world.ChunkLoadEvent;

import java.awt.*;
import java.util.HashSet;
import java.util.UUID;

public class ElytraSpeed implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<UUID> playersInNewChunks = new HashSet<>();
    private static final double tolerance = 0.02;
    private final boolean showActionbarMsgs, displayChunkInfo;

    // Global elytra settings
    private final double global_SpeedOldChunks, global_SpeedNewChunks, global_BurstSpeedOldChunks, global_BurstSpeedNewChunks, global_BurstOldChunk_TPS,
            global_BurstNewChunk_TPS, global_DenyElytraTPS;
    private final boolean global_SettingsAreEnabled, global_DenyElytra, global_EnableBursting, global_DenyOnLowTPS, global_AlsoRemoveOnLowTPS;

    // At-Spawn elytra settings
    private final double spawn_SpeedOldChunks, spawn_SpeedNewChunks, spawn_DenyElytraTPS;
    private final boolean spawn_SettingsAreEnabled, spawn_DenyElytra, spawn_DenyOnLowTPS, spawn_AlsoRemoveOnLowTPS;
    private final int spawn_radius;

    // Nether-Ceiling elytra settings
    private final double ceiling_SpeedOldChunks, ceiling_SpeedNewChunks, ceiling_BurstSpeedOldChunks, ceiling_BurstSpeedNewChunks, ceiling_BurstOldChunk_TPS,
            ceiling_BurstNewChunk_TPS, ceiling_DenyElytraTPS;
    private final boolean ceiling_SettingsAreEnabled, ceiling_DenyElytra, ceiling_EnableBursting, ceiling_DenyOnLowTPS, ceiling_AlsoRemoveOnLowTPS;

    public ElytraSpeed() {
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        // Global Settings
        this.global_SettingsAreEnabled = config.getBoolean("elytra.elytra-speed.Global-Settings.enable", true);
        this.global_DenyElytra = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-usage", false);
        this.global_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-old-chunks", 1.81);
        this.global_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-new-chunks", 1.81);
        this.global_EnableBursting = config.getBoolean("elytra.elytra-speed.Global-Settings.enable-bursting", true);
        this.global_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunks", 5.0);
        this.global_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunk-TPS", 18.0);
        this.global_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunks", 3.12);
        this.global_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunk-TPS", 19.0);
        this.global_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-on-low-TPS", true);
        this.global_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Global-Settings.deny-elytra-TPS", 12.0);
        this.global_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.also-remove-elytra-on-low-TPS", true);
        // Spawn Settings
        this.spawn_SettingsAreEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_DenyElytra = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-usage", false);
        this.spawn_radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.spawn_SpeedOldChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-old-chunks", 1.0);
        this.spawn_SpeedNewChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-new-chunks", 0.8);
        this.spawn_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-on-low-TPS", true);
        this.spawn_DenyElytraTPS = config.getDouble("elytra.elytra-speed.At-Spawn.deny-elytra-TPS", 10.0);
        this.spawn_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.also-remove-elytra-on-low-TPS", true);
        // Ceiling Settings
        this.ceiling_SettingsAreEnabled = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);
        this.ceiling_DenyElytra = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-usage", false);
        this.ceiling_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-old-chunks", 0.5);
        this.ceiling_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-new-chunks", 0.5);
        this.ceiling_EnableBursting = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable-bursting", true);
        this.ceiling_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunks", 1.0);
        this.ceiling_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunk-TPS", 18.0);
        this.ceiling_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunks", 1.0);
        this.ceiling_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunk-TPS", 18.0);
        this.ceiling_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-on-low-TPS", true);
        this.ceiling_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.deny-elytra-TPS", 12.0);
        this.ceiling_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        Bukkit.getLogger().info("Enabled: Elytra Speed");
    }

    @Override
    public boolean shouldEnable() {
        return (global_SettingsAreEnabled || spawn_SettingsAreEnabled || ceiling_SettingsAreEnabled);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        Chunk chunk = event.getChunk();
        Point chunkLoc = new Point(chunk.getX() * 16, chunk.getZ() * 16);
        if (event.isNewChunk()) {
            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
                Point playerLoc = new Point(onlinePlayer.getLocation().getBlockX(), onlinePlayer.getLocation().getBlockZ());
                if (chunkLoc.distance(playerLoc) < 250) playersInNewChunks.add(onlinePlayer.getUniqueId());
            }
        } else {
            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
                Point playerLoc = new Point(onlinePlayer.getLocation().getBlockX(), onlinePlayer.getLocation().getBlockZ());
                if (chunkLoc.distance(playerLoc) < 250) playersInNewChunks.remove(onlinePlayer.getUniqueId());
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (!player.hasPermission("anarchyexploitfixes.bypass")) return;

        switch (elytraEnvironment(player)) {
            case 1: // Global
                manageElytraSpeed(event, player, );
                break;
            case 2: // At Spawn
                manageElytraSpeed(event, player, );
                break;
            case 3: // Nether Ceiling
                manageElytraSpeed(event, player, );
                break;
        }
    }

    private void manageElytraSpeed(
            Event event,
            Player player,
            boolean elytraIsDisabled,
            double old_Chunks_Speed,
            double new_Chunks_Speed,
            boolean burstIsEnabled,
            double old_Chunks_Burst_TPS,
            double old_Chunks_Burst_Speed,
            double new_Chunks_Burst_TPS,
            double new_Chunks_Burst_Speed,
            boolean shouldDenyWhileTPSLow,
            double deny_TPS,
            boolean shouldRemoveWhileTPSLow
    ) {
        Location from = event.getFrom();
        Location to = event.getTo();
        double distX = to.getX() - from.getX();
        double distZ = to.getZ() - from.getZ();
        double flySpeed = Math.hypot(distX, distZ);


    }

    private boolean canBurst(double burstTPS) {
        return plugin.tps > burstTPS;
    }

    private String speed(double flySpeed) {
        return String.format("%.2f", Math.min((double) Math.round(flySpeed * 100.0D) / 100.0D, 20.0D));
    }

    private int elytraEnvironment(Player player) {
        // Nether Ceiling
        if (ceiling_SettingsAreEnabled) {
            if (player.getWorld().getEnvironment().equals(World.Environment.NETHER) && player.getLocation().getY() >= 127) return 3;
        }
        // Spawn
        if (spawn_SettingsAreEnabled) {
            Point spawnPoint = new Point(0, 0);
            Point playerPoint = new Point(player.getLocation().getBlockX(), player.getLocation().getBlockZ());
            if (playerPoint.distance(spawnPoint) < spawn_radius) return 2;
        }
        // Global
        if (global_SettingsAreEnabled) {
            return 1;
        }
        return -1;
    }
}
