package me.moomoo.anarchyexploitfixes.modules.recode.patches.PacketPatches;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Logger;

public class PacketFly implements AnarchyExploitFixesModule {

    private final BukkitScheduler bukkitScheduler;
    private final Logger logger;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    private final boolean logIsEnabled;
    private final int maxTeleportPacketsPer10s;

    public PacketFly() {
        this.bukkitScheduler = Bukkit.getScheduler();
        this.logger = Bukkit.getLogger();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("patches.packetfly-patch.log", true);
        this.maxTeleportPacketsPer10s = config.getInt("patches.packetfly-patch.max-teleport-packets-per-10s", 25);
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(
                plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TELEPORT_ACCEPT
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isPlayerTemporary()) return;

                Player player = event.getPlayer();
                Location playerLocation = player.getLocation();
                int relX = playerLocation.getBlockX() & 0xF; // keep the 4 least significant bits, range 0-15
                int relY = playerLocation.getBlockY();
                int relZ = playerLocation.getBlockZ() & 0xF;

                Chunk chunk = PaperLib.getChunkAtAsync(playerLocation, false).join();

                if (
                        chunk != null
                        && (relY <= 0 || chunk.getBlock(relX, relY - 1, relZ).getType().equals(XMaterial.AIR.parseMaterial()))
                        && !player.isGliding()
                        && !player.isInsideVehicle()
                ) {
                    UUID playerUniqueID = player.getUniqueId();
                    Integer level = levels.get(playerUniqueID);

                    if (level != null) {
                        if (level > maxTeleportPacketsPer10s) {
                            event.setCancelled(true);
                            if (logIsEnabled) logger.info(
                                    "Prevented player '"+player.getName()+"' from packet flying"
                            );
                        } else {
                            levels.merge(playerUniqueID, 1, Integer::sum);
                            bukkitScheduler.runTaskLater(
                                    plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                            );
                        }
                    } else {
                        levels.put(playerUniqueID, 1);
                        bukkitScheduler.runTaskLater(
                                plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                        );
                    }
                }
            }
        });
        plugin.enabledModules.add("(Patches) PacketFly Patch");
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        if (config.protocolLib_IsDisabled) {
            Bukkit.getLogger().warning("Not patching PacketFly Exploit because ProtocolLib is disabled in config.");
            return false;
        } else {
            if (!Bukkit.getPluginManager().isPluginEnabled("ProtocolLib")) {
                Bukkit.getLogger().warning("Unable to patch PacketFly Exploit because ProtocolLib is not installed!");
                return false;
            } else {
                return config.getBoolean("patches.packetfly-patch.enable", true);
            }
        }
    }
}
