package me.moomoo.anarchyexploitfixes.modules.oldcode.patches;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.*;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.awt.*;
public class Elytra implements Listener {
    private final AnarchyExploitFixes plugin;

    @EventHandler
    private void onMove(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("DisableAllElytras")) {
            Player player = evt.getPlayer();
            PlayerInventory i = player.getInventory();
            Location l = i.getLocation();
            if (i.getChestplate() != null && i.getChestplate().getType().equals(Material.ELYTRA)) {
                ItemStack elytra = i.getChestplate();
                i.setChestplate(null);
                l.getWorld().dropItemNaturally(l, elytra);
            }
        }
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (evt.getPlayer().isGliding()) {
            Location from = evt.getFrom();
            Location to = evt.getTo();
            double distX = to.getX() - from.getX();
            double distZ = to.getZ() - from.getZ();
            double finalValue = Math.hypot(distX, distZ);
            double tps = Bukkit.getServer().getTPS()[0];

            if (tps < config.getDouble("Elytra")) {
                Player player = evt.getPlayer();
                PlayerInventory i = player.getInventory();
                Location l = i.getLocation();
                if (evt.getPlayer().getLocale().startsWith("es")) {
                    evt.getPlayer().sendActionBar(ChatColor.DARK_RED + "Los Elytras están actualmente deshabilitados porque el tps es mas bajo que " + config.getInt("Elytra"));
                } else {
                    evt.getPlayer().sendActionBar(ChatColor.DARK_RED + "Elytras are currently disabled because the tps is lower than " + config.getInt("Elytra"));
                }
                evt.setCancelled(true);
                if (config.getBoolean("RemoveElytra")) {
                    evt.getPlayer().setGliding(false);
                    if (i.getChestplate() != null && i.getChestplate().getType().equals(Material.ELYTRA)) {
                        ItemStack elytra = i.getChestplate();
                        i.setChestplate(null);
                        l.getWorld().dropItemNaturally(l, elytra);
                    }
                }
            } else {
                if (plugin.playersInNewChunks.contains(evt.getPlayer().getName())) {
                    double max_speed;
                    if (tps > plugin.getConfig().getDouble("ElytraBurstNewChunkTPS") && plugin.getConfig().getBoolean("EnableBursting") && (plugin.getConfig().getDouble("ElytraBurstNewChunkSpeed") > plugin.getConfig().getDouble("ElytraNewChunkSpeed"))) {
                        max_speed = plugin.getConfig().getDouble("ElytraBurstNewChunkSpeed");
                    } else {
                        max_speed = plugin.getConfig().getDouble("ElytraNewChunkSpeed");
                    }

                    boolean atSpawn = false;
                    if (plugin.getConfig().getBoolean("ElytraAtSpawn.Enabled")) {
                        atSpawn = isAtSpawnRadius(evt.getPlayer().getLocation());
                        if (atSpawn) {
                            max_speed = plugin.getConfig().getDouble("ElytraAtSpawn.SpeedNewChunks");
                        }
                    }

                    if (finalValue > (max_speed + 0.02) && !evt.getPlayer().isOp()) {
                        evt.setCancelled(true);
                        if (atSpawn) {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu élitro, la velocidad está restringida en nuevos spawn chunks.");
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, speed is restricted in new spawn chunks.");
                            }
                        } else {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu élitro, la velocidad está restringida en nuevos chunks.");
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, speed is restricted in new chunks.");
                            }
                        }

                        evt.getPlayer().playSound(evt.getPlayer().getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
                    } else {
                        if (config.getBoolean("ElytraActionBar")) {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "Estás volando en" + ChatColor.DARK_RED + " NUEVO" + ChatColor.GRAY + " chunks. Velocidad: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "You are flying in" + ChatColor.DARK_RED + " NEW" + ChatColor.GRAY + " chunks. Speed: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            }
                        }
                    }
                } else {
                    double max_speed;
                    if (tps > plugin.getConfig().getDouble("ElytraBurstOldChunkTPS") && plugin.getConfig().getBoolean("EnableBursting") && (plugin.getConfig().getDouble("ElytraBurstOldChunkSpeed") > plugin.getConfig().getDouble("ElytraOldChunkSpeed"))) {
                        max_speed = plugin.getConfig().getDouble("ElytraBurstOldChunkSpeed");
                    } else {
                        max_speed = plugin.getConfig().getDouble("ElytraOldChunkSpeed");
                    }

                    boolean atSpawn = false;
                    if (plugin.getConfig().getConfigurationSection("ElytraAtSpawn").getBoolean("Enabled")) {
                        atSpawn = isAtSpawnRadius(evt.getPlayer().getLocation());
                        if (atSpawn) {
                            max_speed = plugin.getConfig().getDouble("ElytraAtSpawn.SpeedOldChunks");
                        }
                    }

                    if (finalValue > (max_speed + 0.02) && !evt.getPlayer().isOp()) {
                        evt.setCancelled(true);
                        if (atSpawn) {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu élitro, la velocidad está restringida en spawn chunks.");
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, speed is restricted in spawn chunks.");
                            }
                        } else {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu elytra, vas demasiado rápido.");
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, you are going too fast.");
                            }
                        }
                        evt.getPlayer().playSound(evt.getPlayer().getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
                    } else {
                        if (config.getBoolean("ElytraActionBar")) {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "Estás volando en" + ChatColor.GREEN + " ANTIGUO" + ChatColor.GRAY + " chunks. Velocidad: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "You are flying in" + ChatColor.GREEN + " OLD" + ChatColor.GRAY + " chunks. Speed: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            }
                        }
                    }
                }
            }
        }
    }

    private boolean isAtSpawnRadius(Location loc) {
        Point p1 = new Point((int) loc.getX(), (int) loc.getZ());
        Point p2 = new Point(0, 0);
        return p1.distance(p2) < plugin.getConfig().getInt("ElytraAtSpawn.Radius");
    }
}
