package me.moomoo.anarchyexploitfixes.modules.chat.commandwhitelist;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

import static me.moomoo.anarchyexploitfixes.utils.CommandUtils.*;

public class CWTabCompletePacketListener extends PacketAdapter {

    private final ProtocolManager protocolManager;
    private final HashSet<String> bannedSubCommands;

    protected CWTabCompletePacketListener(AnarchyExploitFixes plugin, HashSet<String> bannedSubCommands) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TAB_COMPLETE);
        this.protocolManager = ProtocolLibrary.getProtocolManager();
        this.bannedSubCommands = bannedSubCommands;
    }

    protected void register() {
        protocolManager.addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        PacketContainer packet = event.getPacket();
        String buffer = packet.getStrings().read(0);
        if (!buffer.startsWith("/")) return;
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;

        if (!buffer.contains(" ")) {
            PacketContainer filteredTabCompletions = new PacketContainer(PacketType.Play.Server.TAB_COMPLETE);
            filteredTabCompletions.getStringArrays().write(0, getFilteredTabCompletions(buffer, packet.getStringArrays().read(0)));
            protocolManager.sendServerPacket(player, filteredTabCompletions);
            event.setCancelled(true);
        }

        else if (bannedSubCommands.contains(getCommandLabel(buffer).toLowerCase())) {
            event.setCancelled(true);
        }
    }

    private String[] getFilteredTabCompletions(String buffer, String[] suggestions) {
        if (buffer.startsWith("/")) buffer = buffer.substring(1);

        List<String> suggestionsList = new ArrayList<>(Arrays.asList(suggestions));
        if (suggestionsList.isEmpty() || bannedSubCommands.isEmpty()) return suggestions;

        for (String bannedSubCommand : bannedSubCommands) {
            if (buffer.startsWith(cutLastArgument(bannedSubCommand))) {
                String slast = getLastArgument(bannedSubCommand);
                while (suggestionsList.contains(slast))
                    suggestionsList.remove(slast);
            }
        }

        return suggestionsList.toArray(new String[0]);
    }
}
