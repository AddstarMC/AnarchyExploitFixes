package me.moomoo.anarchyexploitfixes.modules.chat.commandwhitelist;

import com.destroystokyo.paper.event.server.AsyncTabCompleteEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.server.TabCompleteEvent;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.CommandUtils.*;

public class CommandWhitelist implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> allowedCommands = new HashSet<>();
    private final HashSet<String> bannedSubCommands = new HashSet<>();
    private final boolean shouldUseProtocolLib;

    public CommandWhitelist() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();

        config.addComment("chat.command-whitelist.enable", "This will make it pretty much impossible to find your plugins as only the commands you specify will be able to work." +
                "\nAllow bypass using permission: anarchyexploitfixes.commandwhitelistbypass"
        );

        this.shouldUseProtocolLib = config.getBoolean("chat.command-whitelist.use-protocollib", false, "Enable this if you're on 1.12 or have trouble with some plugin commands not working." +
                "\nWithout this enabled, tabcomplete filters will not work properly in 1.12");

        // Whitelisted Commands
        List<String> configuredAllowedCommands = config.getList("chat.command-whitelist.whitelisted-commands", Arrays.asList(
                "help", "vote", "kill", "discord", "togglechat", "toggleconnectionmsgs", "toggletells", "togglewhispering", "toggleprivatemsgs",
                "ignore", "ignorelist", "ignorehard", "toggledeathmsg", "dmt", "worldstats", "stats", "tps", "msg", "whisper", "w", "m", "t",
                "pm", "tell", "r", "reply", "last"
        ), "Add all commands you want your players to be able to access (without the '/'). Not case sensitive.");
        for (String configuredAllowedCmd : configuredAllowedCommands) {
            if (configuredAllowedCmd.startsWith("/")) { // Old configs had entries starting with "/"
                allowedCommands.add(configuredAllowedCmd.substring(1).toLowerCase());
            } else {
                allowedCommands.add(configuredAllowedCmd.toLowerCase());
            }
        }

        // Blacklisted Subcommands
        List<String> configuredBannedSubCommands = config.getList("chat.command-whitelist.blacklisted-subcommands", Arrays.asList(
                "help about", "vote List", "vote Best", "vote Total", "worldstats reload", "stats reload"
        ), "Add all subcommands you don't want your players to be able to access. Case sensitive!");
        bannedSubCommands.addAll(configuredBannedSubCommands);
    }

    @Override
    public String name() {
        return "command-whitelist";
    }

    @Override
    public String category() {
        return "chat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (shouldUseProtocolLib) {
            if (AnarchyExploitFixes.getConfiguration().protocolLib_IsDisabled) {
                LogUtils.moduleLog(Level.WARNING, name(), "Can't enable packet listener(s) because ProtocolLib is disabled in config.");
            } else {
                if (AnarchyExploitFixes.isProtocolLibInstalled()) {
                    new CWChatPacketListener(plugin, allowedCommands, bannedSubCommands).register();
                    if (AnarchyExploitFixes.getMCVersion() <= 12) new CWTabCompletePacketListener(plugin, allowedCommands).register();
                } else {
                    LogUtils.moduleLog(Level.SEVERE, name(), "Can't enable packet listener(s) because ProtocolLib is missing.");
                }
            }
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chat.command-whitelist.enable", false);
    }

    /*
    *     Credits go to YouHaveTrouble (https://github.com/YouHaveTrouble/CommandWhitelist)
    *     Code was mainly only implemented into AEF by xGinko.
    */

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommandPreProcess(PlayerCommandPreprocessEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;

        String message = event.getMessage();
        String commandLabel = getCommandLabel(message).toLowerCase();
        String fullCommand = message.substring(commandLabel.length()+1);
        fullCommand = "/"+commandLabel+fullCommand;
        event.setMessage(fullCommand);

        if (!allowedCommands.contains(commandLabel)) {
            event.setCancelled(true);
            player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                    AnarchyExploitFixes.getLang(player.getLocale()).command_Whitelist_BadCommand)
            );
            return;
        }

        for (String bannedSubCommand : bannedSubCommands) {
            if (message.toLowerCase().substring(1).startsWith(bannedSubCommand)) {
                event.setCancelled(true);
                player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).command_Whitelist_BadCommand)
                );
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAsyncCommandTabComplete(AsyncTabCompleteEvent event) {
        if (!(event.getSender() instanceof Player)) return;
        Player player = (Player) event.getSender();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;
        if (event.getCompletions().isEmpty()) return;
        event.setCompletions(getFilteredTabCompletions(event.getBuffer(), event.getCompletions()));
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCommandTabComplete(TabCompleteEvent event) {
        if (!(event.getSender() instanceof Player)) return;
        Player player = (Player) event.getSender();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;
        if (event.getCompletions().isEmpty()) return;
        event.setCompletions(getFilteredTabCompletions(event.getBuffer(), event.getCompletions()));
    }

    private List<String> getFilteredTabCompletions(String buffer, List<String> suggestions) {
        if (buffer.startsWith("/")) buffer = buffer.substring(1);
        List<String> suggestionsList = new ArrayList<>(suggestions);
        if (suggestions.isEmpty() || bannedSubCommands.isEmpty()) return suggestionsList;
        for (String bannedSubCommand : bannedSubCommands) {
            String scommand = cutLastArgument(bannedSubCommand);
            if (buffer.startsWith(scommand)) {
                String slast = getLastArgument(bannedSubCommand);
                while (suggestionsList.contains(slast))
                    suggestionsList.remove(slast);
            }
        }
        return suggestionsList;
    }
}
