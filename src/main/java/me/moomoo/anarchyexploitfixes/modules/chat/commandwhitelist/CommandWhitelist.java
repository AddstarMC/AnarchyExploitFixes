package me.moomoo.anarchyexploitfixes.modules.chat.commandwhitelist;

import com.destroystokyo.paper.event.server.AsyncTabCompleteEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.server.TabCompleteEvent;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

public class CommandWhitelist implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> allowedCommands = new HashSet<>();
    private final HashSet<String> bannedSubCommands = new HashSet<>();
    private final boolean shouldUseProtocolLib;

    public CommandWhitelist() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();

        config.addComment("chat.command-whitelist.enable", "This will make it pretty much impossible to find your plugins as only the commands you specify will be able to work." +
                "\nAllow bypass using permission: anarchyexploitfixes.commandwhitelistbypass" +
                "\nNOTE: Command tabcomplete suggestions after the '/' will still be displayed. This is because there is no method to filter these suggestions in 1.12." +
                "\n      If you're on 1.12+ and want to enable tab-completion, use CommandWhitelist: https://github.com/YouHaveTrouble/CommandWhitelist" +
                "\n      Otherwise set 'tab-complete' to -1 in spigot.yml."
        );

        this.shouldUseProtocolLib = config.getBoolean("chat.command-whitelist.use-protocollib", false, "Only enable if you have problems with plugins not properly registering commands.\nTHIS IS NOT A 'BETTER WAY TO DO IT'!");

        // Whitelisted Commands
        List<String> configuredAllowedCommands = config.getList("chat.command-whitelist.whitelisted-commands", Arrays.asList(
                "help", "vote", "kill", "discord", "togglechat", "toggleconnectionmsgs", "toggletells", "togglewhispering", "toggleprivatemsgs",
                "ignore", "ignorelist", "ignorehard", "toggledeathmsg", "dmt", "worldstats", "stats", "tps", "msg", "whisper", "w", "m", "t",
                "pm", "tell", "r", "reply", "last"
        ), "Add all commands you want your players to be able to access (without the '/'). Not case sensitive.");
        for (String configuredAllowedCmd : configuredAllowedCommands) {
            allowedCommands.add(configuredAllowedCmd.toLowerCase());
        }

        // Blacklisted Subcommands
        List<String> configuredBannedSubCommands = config.getList("chat.command-whitelist.blacklisted-subcommands", Arrays.asList(
                "help about", "vote List", "vote Best", "vote Total", "worldstats reload", "stats reload"
        ), "Add all subcommands you don't want your players to be able to access. Case sensitive!");
        bannedSubCommands.addAll(configuredBannedSubCommands);
    }

    @Override
    public String name() {
        return "command-whitelist";
    }

    @Override
    public String category() {
        return "command-whitelist";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (
                !AnarchyExploitFixes.getConfiguration().protocolLib_IsDisabled
                && plugin.getServer().getPluginManager().isPluginEnabled("ProtocolLib")
                && shouldUseProtocolLib
        ) {
            new CWPacketListener(allowedCommands, bannedSubCommands);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chat.command-whitelist.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommandPreProcess(PlayerCommandPreprocessEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;

        String message = event.getMessage();
        String commandLabel = getCommandLabel(message).toLowerCase();
        String fullCommand = message.substring(commandLabel.length()+1);
        fullCommand = "/"+commandLabel+fullCommand;
        event.setMessage(fullCommand);

        if (!allowedCommands.contains(commandLabel)) {
            event.setCancelled(true);
            player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                    AnarchyExploitFixes.getLang(player.getLocale()).command_Whitelist_BadCommand)
            );
            return;
        }

        for (String bannedSubCommand : bannedSubCommands) {
            if (message.toLowerCase().substring(1).startsWith(bannedSubCommand)) {
                event.setCancelled(true);
                player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).command_Whitelist_BadCommand)
                );
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onAsyncCommandTabComplete(AsyncTabCompleteEvent event) {
        if (!(event.getSender() instanceof Player)) return;
        Player player = (Player) event.getSender();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;
        String buffer = event.getBuffer();
        // prevent hacked clients scanning for server plugins
        if ((buffer.split(" ").length == 1 && !buffer.endsWith(" ")) || !buffer.startsWith("/")) {
            event.setCancelled(true);
            return;
        }
        if (event.getCompletions().isEmpty()) return;
        event.setCompletions(filteredSubCmdTabCompletions(buffer, event.getCompletions()));
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommandTabComplete(TabCompleteEvent event) {
        if (!(event.getSender() instanceof Player)) return;
        Player player = (Player) event.getSender();
        if (player.hasPermission("anarchyexploitfixes.commandwhitelistbypass")) return;
        String buffer = event.getBuffer();
        // prevent hacked clients scanning for server plugins
        if ((buffer.split(" ").length == 1 && !buffer.endsWith(" ")) || !buffer.startsWith("/")) {
            event.setCancelled(true);
            return;
        }
        if (event.getCompletions().isEmpty()) return;
        event.setCompletions(filteredSubCmdTabCompletions(buffer, event.getCompletions()));
    }

    private String getCommandLabel(String cmd) {
        String[] parts = cmd.split(" ");
        if (parts[0].startsWith("/"))
            parts[0] = parts[0].substring(1);
        return parts[0];
    }

    private List<String> filteredSubCmdTabCompletions(String buffer, List<String> suggestions) {
        if (buffer.startsWith("/")) buffer = buffer.substring(1);
        List<String> suggestionsList = new ArrayList<>(suggestions);
        if (suggestions.isEmpty() || bannedSubCommands.isEmpty()) return suggestionsList;
        for (String bannedSubCommand : bannedSubCommands) {
            String scommand = cutLastArgument(bannedSubCommand);
            if (buffer.startsWith(scommand)) {
                String slast = getLastArgument(bannedSubCommand);
                while (suggestionsList.contains(slast))
                    suggestionsList.remove(slast);
            }
        }
        return suggestionsList;
    }

    private String getLastArgument(String cmd) {
        String[] parts = cmd.split(" ");
        if (parts.length == 0) return "";
        return parts[parts.length - 1];
    }

    private String cutLastArgument(String cmd) {
        String[] cmdSplit = cmd.split(" ");
        StringBuilder cmdBuilder = new StringBuilder();
        for (int i = 0; i <= cmdSplit.length - 2; i++)
            cmdBuilder.append(cmdSplit[i]).append(" ");
        return cmdBuilder.toString();
    }
}
