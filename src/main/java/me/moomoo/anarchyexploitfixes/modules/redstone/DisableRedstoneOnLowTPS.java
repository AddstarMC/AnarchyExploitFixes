package me.moomoo.anarchyexploitfixes.modules.redstone;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.time.Instant;

public class DisableRedstoneOnLowTPS implements AnarchyExploitFixesModule, Listener {

    private final double disableRedstoneTPS;
    private long lastGathered;
    private final boolean logIsEnabled;

    public DisableRedstoneOnLowTPS() {
        Config config = AnarchyExploitFixes.getConfiguration();
        shouldEnable();
        config.addComment("redstone.disable-redstone-on-low-tps.enable", "Disable Redstone during low TPS to prevent some lag machines.");
        this.logIsEnabled = config.getBoolean("redstone.disable-redstone-on-low-tps.log", true);
        this.disableRedstoneTPS = config.getDouble("redstone.disable-redstone-on-low-tps.disable-TPS", 16.0);
    }

    @Override
    public String name() {
        return "disable-redstone-on-low-tps";
    }

    @Override
    public String category() {
        return "redstone";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("redstone.disable-redstone-on-low-tps.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onRedstoneEvent(BlockRedstoneEvent event) {
        long now = Instant.now().toEpochMilli();

        if (AnarchyExploitFixes.getTPS() <= disableRedstoneTPS) {
            int current = event.getOldCurrent();
            event.setNewCurrent(current);
            if ((now - lastGathered) >= 30000) {
                lastGathered = now;
                if (logIsEnabled) AnarchyExploitFixes.getLog().info("("+name()+") Disabled redstone because tps is lower than " + disableRedstoneTPS);
            }
        } else {
            int newCurrent = event.getNewCurrent();
            event.setNewCurrent(newCurrent);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onPistonExtendEvent(BlockPistonExtendEvent event) {
        if (AnarchyExploitFixes.getTPS() <= disableRedstoneTPS) {
            event.setCancelled(true);
            if (logIsEnabled) AnarchyExploitFixes.getLog().info("("+name()+") Cancelled piston event because tps is lower than " + disableRedstoneTPS);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onPistonRetractEvent(BlockPistonRetractEvent event) {
        if (AnarchyExploitFixes.getTPS() <= disableRedstoneTPS) {
            event.setCancelled(true);
            if (logIsEnabled) AnarchyExploitFixes.getLog().info("("+name()+") Cancelled piston event because tps is lower than " + disableRedstoneTPS);
        }
    }
}
