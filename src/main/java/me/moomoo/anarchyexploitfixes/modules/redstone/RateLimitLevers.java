package me.moomoo.anarchyexploitfixes.modules.redstone;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class RateLimitLevers implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> playersUsingLevers = new HashMap<>();
    private final boolean shouldKickPlayer, sendActionBar;
    private final long leverDelayInMillis;

    public RateLimitLevers() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("redstone.rate-limit-levers.enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean("redstone.rate-limit-levers.show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean("redstone.rate-limit-levers.kick-player", false);
        this.leverDelayInMillis = config.getInt("redstone.rate-limit-levers.lever-delay-in-ticks", 20, "How many ticks a player needs to wait until he can use the lever again\n20 Ticks = 1 Second") * 50L;
    }

    @Override
    public String name() {
        return "rate-limit-levers";
    }

    @Override
    public String category() {
        return "redstone";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("redstone.rate-limit-levers.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (!event.getClickedBlock().getType().equals(XMaterial.LEVER.parseMaterial())) return;

        Player player = event.getPlayer();
        UUID playerUniqueID = player.getUniqueId();

        if (playersUsingLevers.get(playerUniqueID) == null) {
            playersUsingLevers.put(playerUniqueID, System.currentTimeMillis());
        } else {
            if (System.currentTimeMillis()-playersUsingLevers.get(playerUniqueID) <= leverDelayInMillis) {
                event.setCancelled(true);
                if (sendActionBar) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
                if (shouldKickPlayer) player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
            } else {
                playersUsingLevers.remove(playerUniqueID);
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        UUID playerUniqueID = event.getPlayer().getUniqueId();
        if (playersUsingLevers.get(playerUniqueID) != null) {
            playersUsingLevers.remove(playerUniqueID);
        }
    }
}
