package me.moomoo.anarchyexploitfixes.modules.redstone;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class RateLimitLevers implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Integer> playersUsingLevers = new HashMap<>();
    private final boolean shouldKickPlayer, sendActionBar;
    private final int maxLeverUsesPerTime;
    private final long timeInTicks;

    public RateLimitLevers() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("redstone.rate-limit-levers.enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean("redstone.rate-limit-levers.show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean("redstone.rate-limit-levers.kick-player", false);
        this.maxLeverUsesPerTime = config.getInt("redstone.rate-limit-levers.lever-uses-per-time", 5);
        this.timeInTicks = config.getInt("redstone.rate-limit-levers.time-in-ticks", 40);
    }

    @Override
    public String name() {
        return "rate-limit-levers";
    }

    @Override
    public String category() {
        return "redstone";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, cooldown, 20L, timeInTicks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("redstone.rate-limit-levers.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (!event.getClickedBlock().getType().equals(XMaterial.LEVER.parseMaterial())) return;

        Player player = event.getPlayer();
        UUID playerUniqueID = player.getUniqueId();
        Integer playerLeverUses = playersUsingLevers.get(playerUniqueID);

        if (playerLeverUses == null) {
            playersUsingLevers.put(playerUniqueID, 1);
        } else {
            if (playerLeverUses > maxLeverUsesPerTime) {
                event.setCancelled(true);
                if (sendActionBar) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
                if (shouldKickPlayer) player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
            } else {
                playersUsingLevers.merge(playerUniqueID, 1, Integer::sum);
            }
        }
    }

    private final Runnable cooldown = () -> {
        if (!playersUsingLevers.isEmpty()) {
            for (Map.Entry <UUID, Integer> playerUsingLever : playersUsingLevers.entrySet()) {
                Integer leverUsages = playerUsingLever.getValue();
                if (leverUsages > 0) {
                    playersUsingLevers.put(playerUsingLever.getKey(), leverUsages - 1);
                }
            }
        }
    };
}
