package me.moomoo.anarchyexploitfixes.modules.bedrock;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonRetractEvent;

import java.util.Collections;
import java.util.HashSet;

public class PistonPlaceWhileRetractBedrockRemoval implements AnarchyExploitFixesModule, Listener {

    private final Material bedrock;
    private final HashSet<String> whitelistedWorlds = new HashSet<>();

    public PistonPlaceWhileRetractBedrockRemoval() {
        this.bedrock = XMaterial.BEDROCK.parseMaterial();
        this.whitelistedWorlds.addAll(
                AnarchyExploitFixes.getConfiguration().getList("bedrock.prevent-removing-bedrock-by-placing-piston-on-retract.whitelisted-worlds", Collections.singletonList("example_world_name"))
        );
    }

    @Override
    public String name() {
        return "prevent-removing-bedrock-by-placing-piston-on-retract";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.prevent-removing-bedrock-by-placing-piston-on-retract.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPistonRetract(BlockPistonRetractEvent event) {
        if (whitelistedWorlds.contains(event.getBlock().getWorld().getName())) return;

        if (event.getBlock().getRelative(event.getDirection().getOppositeFace()).getType().equals(bedrock)) {
            event.setCancelled(true);
        }
    }
}
