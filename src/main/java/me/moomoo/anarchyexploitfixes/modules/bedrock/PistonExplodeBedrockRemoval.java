package me.moomoo.anarchyexploitfixes.modules.bedrock;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;

public class PistonExplodeBedrockRemoval implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<String> whitelistedWorlds = new HashSet<>();
    private final HashSet<Material> pistonMaterials = new HashSet<>();
    private static final BlockFace[] cardinalDirections = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };
    private final Material bedrock, air;

    public PistonExplodeBedrockRemoval() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.whitelistedWorlds.addAll(
                AnarchyExploitFixes.getConfiguration().getList("bedrock.prevent-removing-bedrock-by-exploding-pistons.whitelisted-worlds", Collections.singletonList("example_world_name"))
        );

        // Initialize piston materials for each version
        int version = AnarchyExploitFixes.getMCVersion();
        if (version <= 12) {
            pistonMaterials.add(Material.PISTON_MOVING_PIECE);
        } else if (version == 13) {
            try {
                pistonMaterials.add(Material.valueOf("PISTON"));
                pistonMaterials.add(Material.valueOf("PISTON_HEAD"));
                pistonMaterials.add(Material.valueOf("MOVING_PISTON"));
            } catch (IllegalArgumentException e) {
                LogUtils.moduleLog(Level.WARNING, name(), "An error occurred trying to parse piston materials for your version. Report this to the plugins github.");
            }
        } else {
            try {
                pistonMaterials.add(Material.valueOf("PISTON"));
                pistonMaterials.add(Material.valueOf("MOVING_PISTON"));
            } catch (IllegalArgumentException e) {
                LogUtils.moduleLog(Level.WARNING, name(), "An error occurred trying to parse piston materials for your version. Report this to the plugins github.");
            }
        }

        // this is theoretically not needed but there in case something changes with Material enums
        this.bedrock = XMaterial.BEDROCK.parseMaterial();
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-removing-bedrock-by-exploding-pistons";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.prevent-removing-bedrock-by-exploding-pistons.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        HashSet<Block> pistons_that_could_remove_bedrock = new HashSet<>();

        for (Block potentialPistonPart : event.blockList()) {
            if (!pistonMaterials.contains(potentialPistonPart.getType())) continue;

            for (BlockFace blockFace : BlockFace.values()) {
                if (!potentialPistonPart.getRelative(blockFace).getType().equals(bedrock)) continue;

                pistons_that_could_remove_bedrock.add(potentialPistonPart);
                potentialPistonPart.setType(air);

                for (BlockFace cardinalDirection : cardinalDirections) {
                    Block next = potentialPistonPart.getRelative(cardinalDirection);
                    if (pistonMaterials.contains(next.getType())) {
                        next.setType(air);
                    }
                }
            }
        }

        if (!pistons_that_could_remove_bedrock.isEmpty()) {
            event.blockList().removeAll(pistons_that_could_remove_bedrock);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
                for (Block block : pistons_that_could_remove_bedrock) {
                    block.setType(air);
                }
            }, 5);
        }
    }
}
