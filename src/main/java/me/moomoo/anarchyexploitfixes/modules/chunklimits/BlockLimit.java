package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import static me.moomoo.anarchyexploitfixes.utils.ChunkUtils.amountOfMaterialInChunk;

public class BlockLimit implements AnarchyExploitFixesModule, Listener {

    private final HashMap<Material, Integer> blockLimits = new HashMap<>();

    public BlockLimit() {
        Logger logger = AnarchyExploitFixes.getLog();
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("ENCHANTMENT_TABLE", 16);
        defaults.put("ENDER_CHEST", 64);
        defaults.put("CHEST", 500);
        defaults.put("DISPENSER", 100);
        defaults.put("TRAPPED_CHEST", 200);
        defaults.put("SIGN", 100);
        defaults.put("SLIME_BLOCK", 128);
        defaults.put("BEACON", 32);
        defaults.put("PISTON_BASE", 32);
        defaults.put("PISTON_EXTENSION", 32);
        defaults.put("PISTON_MOVING_PIECE", 32);
        defaults.put("PISTON_STICKY_BASE", 32);
        defaults.put("GLOWSTONE", 5000);
        defaults.put("BANNER", 100);
        defaults.put("SKULL", 50);
        defaults.put("SKULL_ITEM", 50);
        ConfigurationSection section = AnarchyExploitFixes.getConfiguration().getConfigSection("chunk-limits.block-limit.max-blocks-per-chunk", defaults);
        for (String configuredMaterial : section.getKeys(false)) {
            Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredMaterial));
            Material blockMaterial = Material.getMaterial(configuredMaterial);
            if (blockMaterial != null) {
                blockLimits.put(blockMaterial, maxAmountPerChunk);
            } else {
                logger.warning("("+name()+") Material '"+configuredMaterial+"' not recognized. Use correct Material enums for your Minecraft version!");
            }
        }
    }

    @Override
    public String name() {
        return "block-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.block-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Chunk chunk = event.getBlock().getChunk();
        Material blockPlayerWantsToPlace = event.getBlock().getType();

        for (Map.Entry<Material, Integer> entry : blockLimits.entrySet()) {
            Material limitedMaterial = entry.getKey();
            if (!limitedMaterial.equals(blockPlayerWantsToPlace)) return;

            Integer maxAllowedAmountOfLimitedMaterial = entry.getValue();
            if (amountOfMaterialInChunk(chunk, limitedMaterial) > maxAllowedAmountOfLimitedMaterial) {
                event.setCancelled(true);
                return;
            }
        }
    }
}
