package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Villager;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;

public class VillagerLimit implements AnarchyExploitFixesModule, Runnable, Listener {

    private final AnarchyExploitFixes plugin;
    private final List<Villager.Profession> removalPriority = new ArrayList<>();
    private final int maxVillagersPerChunk;
    private final boolean logIsEnabled;
    private final long checkPeriod;

    public VillagerLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxVillagersPerChunk = config.getInt("chunk-limits.entity-limits.villager-limit.max-villagers-per-chunk", 25);
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.custom-limit.log-removals", false);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.custom-limit.check-period-in-ticks", 600, "check all chunks every x ticks.");
        config.getList("chunk-limits.entity-limits.villager-limit.removal-priority", Arrays.asList(
                "NONE", "NITWIT", "SHEPHERD", "FISHERMAN", "BUTCHER", "CARTOGRAPHER", "LEATHERWORKER",
                "FLETCHER", "MASON", "FARMER", "ARMORER", "TOOLSMITH", "WEAPONSMITH", "CLERIC", "LIBRARIAN"
        ),
                "Professions that are in the top of the list are going to be scheduled for removal first."

        ).forEach(configuredProfession -> {
            try {
                Villager.Profession profession = Villager.Profession.valueOf(configuredProfession);
                this.removalPriority.add(profession);
            } catch (IllegalArgumentException e) {
                LogUtils.moduleLog(Level.WARNING, name(), "Villager profession '"+configuredProfession+"' not recognized. Make sure youre using the correct profession enums for your Version.");
            }
        });
    }

    @Override
    public String name() {
        return "villager-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.villager-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreateSpawn(CreatureSpawnEvent event) {
        if (event.getEntityType().equals(EntityType.VILLAGER)) {
            checkVillagersInChunk(event.getEntity().getChunk());
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (chunk.isLoaded()) {
                    checkVillagersInChunk(chunk);
                }
            }
        }
    }

    private void checkVillagersInChunk(Chunk chunk) {
        // Create a list with all entities in that chunk
        List<Entity> entities_in_chunk = Arrays.asList(chunk.getEntities());

        // Remove all entities from the list that aren't villagers
        entities_in_chunk.removeIf(entity -> !entity.getType().equals(EntityType.VILLAGER));

        // Check if there are more villagers in that chunk than allowed
        int amount_over_the_limit = entities_in_chunk.size() - maxVillagersPerChunk;
        if (amount_over_the_limit <= 0) return;

        // Sort villager list by profession priority
        entities_in_chunk.sort(Comparator.comparingInt(this::getProfessionPriority));

        // Remove prioritized villagers that are too many
        for (int i = 0; i < amount_over_the_limit; i++) {
            entities_in_chunk.get(i).remove();
            if (logIsEnabled) {
                // A bit ugly but debug logs aren't supposed to be on when not needed
                Villager villager = (Villager) entities_in_chunk.get(i);
                LogUtils.moduleLog(Level.INFO, name(), "Removed a villager of profession type '"+villager.getProfession()+"' at "+villager.getLocation());
            }
        }
    }

    private int getProfessionPriority(Entity entity) {
        Villager.Profession profession = ((Villager)entity).getProfession();
        return removalPriority.contains(profession) ? removalPriority.indexOf(profession) : Integer.MAX_VALUE;
    }
}
