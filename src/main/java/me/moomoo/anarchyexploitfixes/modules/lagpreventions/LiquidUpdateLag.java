package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockFromToEvent;
import org.bukkit.event.world.ChunkUnloadEvent;

import java.util.HashMap;

public class LiquidUpdateLag implements AnarchyExploitFixesModule, Listener {

    private final HashMap<String, Long> cooldowns = new HashMap<>();
    private final HashMap<String, Integer> liquidEventCount = new HashMap<>();
    private final int maxLiquidSpreadEventsPerChunk;
    private final long liquidSpreadCooldownInMillis;
    private final Material dragon_egg;

    public LiquidUpdateLag() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxLiquidSpreadEventsPerChunk = config.getInt("lag-preventions.prevent-liquid-update-lag.max-liquid-events-in-same-chunk-per-time", 800, "amount of liquid source blocks * sides it can spread to * block spread length");
        this.liquidSpreadCooldownInMillis = config.getInt("lag-preventions.prevent-liquid-update-lag.time-in-ticks", 120, "Record time after first liquid spread. \nWhen this time runs out, the spread counter resets") * 50L;
        this.dragon_egg = XMaterial.DRAGON_EGG.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-liquid-update-lag";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, () -> {
            cooldowns.clear();
            liquidEventCount.clear();
        }, 2000L, 2000L);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-liquid-update-lag.enable", false);
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onLiquidSpread(BlockFromToEvent event) {
        Block sourceBlock = event.getBlock();
        if (sourceBlock.getType().equals(dragon_egg)) return;

        final String chunkId = String.valueOf(sourceBlock.getChunk().getWorld().getUID()) + sourceBlock.getChunk().getChunkKey();
        final long currentTime = System.currentTimeMillis();

        if (!liquidEventCount.containsKey(chunkId) || !cooldowns.containsKey(chunkId)) {
            liquidEventCount.put(chunkId, 1);
            cooldowns.put(chunkId, currentTime);
            return;
        }

        int liquidSpreadEventPerChunkCount = liquidEventCount.get(chunkId);
        final long millisBetweenFirstUseAndNow = currentTime - cooldowns.get(chunkId);

        if (liquidSpreadEventPerChunkCount >= maxLiquidSpreadEventsPerChunk) {
            if (millisBetweenFirstUseAndNow < liquidSpreadCooldownInMillis) {
                event.setCancelled(true);
                return;
            }

            liquidSpreadEventPerChunkCount = 1;
        }

        liquidSpreadEventPerChunkCount++;

        liquidEventCount.put(chunkId, liquidSpreadEventPerChunkCount);
        cooldowns.put(chunkId, currentTime);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkUnload(ChunkUnloadEvent event) {
        String chunkId = String.valueOf(event.getChunk().getWorld().getUID()) + event.getChunk().getChunkKey();
        liquidEventCount.remove(chunkId);
        cooldowns.remove(chunkId);
    }
}
