package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class LeverSpam implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> cooldowns = new HashMap<>();
    private final HashMap<UUID, Integer> leverCount = new HashMap<>();
    private final Material lever;

    private final boolean shouldKickPlayer, sendActionBar;
    private final int leverUsageLimit;
    private final long leverCooldownInMillis;

    public LeverSpam() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("lag-preventions.prevent-lever-spam.enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean("lag-preventions.prevent-lever-spam.show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean("lag-preventions.prevent-lever-spam.kick-player", false);
        this.leverUsageLimit = config.getInt("lag-preventions.prevent-lever-spam.max-lever-usages-per-time", 10);
        this.leverCooldownInMillis = config.getInt("lag-preventions.prevent-lever-spam.lever-time-in-ticks", 180) * 50L;
        this.lever = XMaterial.LEVER.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-lever-spam";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-lever-spam.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (!event.getClickedBlock().getType().equals(lever)) return;

        Player player = event.getPlayer();
        final UUID playerUniqueId = player.getUniqueId();
        final long currentTime = System.currentTimeMillis();

        if (!leverCount.containsKey(playerUniqueId)) {
            leverCount.put(playerUniqueId, 1);
            cooldowns.put(playerUniqueId, currentTime);
            return;
        }

        int leverUseCount = leverCount.get(playerUniqueId);
        final long millisBetweenFirstUseAndNow = currentTime - cooldowns.get(playerUniqueId);

        if (leverUseCount >= leverUsageLimit) {
            if (millisBetweenFirstUseAndNow < leverCooldownInMillis) {
                event.setCancelled(true);
                if (sendActionBar) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
                if (shouldKickPlayer) player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                        AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
                );
                return;
            }

            // Reset
            leverCount.remove(playerUniqueId);
            leverUseCount = 1;
        }

        leverUseCount++;

        leverCount.put(playerUniqueId, leverUseCount);
        cooldowns.put(playerUniqueId, currentTime);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        cooldowns.remove(event.getPlayer().getUniqueId());
    }
}
