package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockFromToEvent;

import java.util.HashMap;

public class WaterUpdateLag implements AnarchyExploitFixesModule, Listener {

    private final HashMap<Location, Integer> flowDownwardsCount = new HashMap<>();
    private final HashMap<Location, BlockFace> lastFlowDirections = new HashMap<>();
    private final int waterDownwardsFlowMaxLength;
    private final Material water;

    public WaterUpdateLag() {
        shouldEnable();
        this.waterDownwardsFlowMaxLength = AnarchyExploitFixes.getConfiguration().getInt("lag-preventions.prevent-water-update-lag.max-downwards-flow-length-in-blocks", 8);
        this.water = XMaterial.WATER.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-water-update-lag";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, flowDownwardsCount::clear, 2000L, 2000L);
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, lastFlowDirections::clear, 2000L, 2000L);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-water-update-lag.enable", false);
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onLiquidSpread(BlockFromToEvent event) {
        Block sourceBlock = event.getBlock();
        if (!sourceBlock.getType().equals(water)) return;

        Location liquidSourceLoc = sourceBlock.getLocation();
        BlockFace currentFlowDirection = event.getFace();

        if (
                !lastFlowDirections.containsKey(liquidSourceLoc)
                || !flowDownwardsCount.containsKey(liquidSourceLoc)
        ) {
            lastFlowDirections.put(liquidSourceLoc, currentFlowDirection);
            flowDownwardsCount.put(liquidSourceLoc, 1);
        } else {
            if (lastFlowDirections.get(liquidSourceLoc).equals(BlockFace.DOWN) && currentFlowDirection.equals(BlockFace.DOWN)) {
                if (flowDownwardsCount.get(liquidSourceLoc) >= waterDownwardsFlowMaxLength) {
                    event.setCancelled(true);
                } else {
                    flowDownwardsCount.put(liquidSourceLoc, flowDownwardsCount.get(liquidSourceLoc) + 1);
                }
            } else {
                lastFlowDirections.put(liquidSourceLoc, currentFlowDirection);
                flowDownwardsCount.put(liquidSourceLoc, 1);
            }
        }
    }
}
