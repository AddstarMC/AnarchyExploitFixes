package me.moomoo.anarchyexploitfixes.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.util.*;
import java.util.logging.Level;

public class CrystalAuraSilentSwitch implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> playersSwitchingHeldItems = new HashMap<>();
    private final HashSet<Material> blacklistedSwitchMaterials = new HashSet<>();
    private final boolean onlyForSpecificMaterials;
    private final long switchAwayFromCrystalsDelayInMillis;
    private final Material end_crystal;

    public CrystalAuraSilentSwitch() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.switchAwayFromCrystalsDelayInMillis = config.getInt("combat.crystal-aura.hotbar-switch-delay.delay-in-ticks", 2, "Delay between switching from an end crystal to other items in hotbar") * 50L;
        this.onlyForSpecificMaterials = config.getBoolean("combat.crystal-aura.hotbar-switch-delay.only-delay-specific-materials", true, "Only delay when switched to specific materials");
        List<String> configuredBlacklistedMaterials = config.getList("combat.crystal-aura.hotbar-switch-delay.delayed-specific-materials", Arrays.asList(
                "BOW", "CROSSBOW", "TRIDENT",
                "NETHERITE_SWORD", "NETHERITE_AXE", "DIAMOND_SWORD", "DIAMOND_AXE",
                "GOLDEN_SWORD", "GOLDEN_AXE", "IRON_SWORD", "IRON_AXE",
                "STONE_SWORD", "STONE_AXE", "WOODEN_SWORD", "WOODEN_AXE"
        ));
        for (String configuredMaterial : configuredBlacklistedMaterials) {
            try {
                Material bannedMaterial = Material.valueOf(configuredMaterial);
                blacklistedSwitchMaterials.add(bannedMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredMaterial);
            }
        }
        this.end_crystal = XMaterial.END_CRYSTAL.parseMaterial();
    }

    @Override
    public String name() {
        return "crystal-aura.hotbar-switch-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.crystal-aura.hotbar-switch-delay.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onHeldItemChange(PlayerItemHeldEvent event) {
        UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (
                playersSwitchingHeldItems.containsKey(playerUniqueId)
                && playersSwitchingHeldItems.get(playerUniqueId) > System.currentTimeMillis()
        ) {
            PlayerInventory playerInventory = event.getPlayer().getInventory();
            ItemStack previouslyHeldItem = playerInventory.getItem(event.getPreviousSlot());
            if (previouslyHeldItem == null || !previouslyHeldItem.getType().equals(end_crystal)) return;
            ItemStack newHeldItem = playerInventory.getItem(event.getNewSlot());
            if (newHeldItem == null) return;
            if (onlyForSpecificMaterials && !blacklistedSwitchMaterials.contains(newHeldItem.getType())) return;
            event.setCancelled(true);
        } else {
            playersSwitchingHeldItems.put(playerUniqueId, System.currentTimeMillis() + switchAwayFromCrystalsDelayInMillis);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersSwitchingHeldItems.remove(event.getPlayer().getUniqueId());
    }
}
