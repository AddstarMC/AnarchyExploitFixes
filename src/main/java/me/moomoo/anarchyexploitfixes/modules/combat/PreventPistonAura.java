package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;

import java.util.HashMap;

public class PreventPistonAura implements AnarchyExploitFixesModule, Listener {

    private final HashMap<Location, Long> pistonsPushingCrystals = new HashMap<>();
    private final long pistonExtendToCrystalDelay;

    public PreventPistonAura() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("combat.crystal-aura.piston-aura.enable", "Rate-limits pistons that extend into crystals");
        this.pistonExtendToCrystalDelay = config.getInt("combat.crystal-aura.piston-aura.piston-extend-to-crystal-delay-in-ticks", 40);
    }

    @Override
    public String name() {
        return "prevent-piston-aura";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.prevent-piston-aura.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPistonExtend(BlockPistonExtendEvent event) {
        if (!event.getBlock().getRelative(event.getDirection()).getLocation().getNearbyEntitiesByType(EnderCrystal.class, 1,1,1).isEmpty()) {
            Location pistonLoc = event.getBlock().getLocation();
            if (pistonsPushingCrystals.containsKey(pistonLoc) && pistonsPushingCrystals.get(pistonLoc) > System.currentTimeMillis()) {
                event.setCancelled(true);
            } else {
                pistonsPushingCrystals.put(pistonLoc, System.currentTimeMillis() + pistonExtendToCrystalDelay);
            }
        }
    }
}
