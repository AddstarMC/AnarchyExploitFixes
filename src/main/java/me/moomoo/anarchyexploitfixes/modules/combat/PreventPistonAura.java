package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.HashMap;
import java.util.UUID;

public class PreventPistonAura implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<UUID, Location> endcrystals = new HashMap<>();
    private final long keepPlacedEndcrystalInMemoryTime;

    public PreventPistonAura() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("combat.prevent-piston-aura.enable", "Prevents crystals from dealing damage for a short time if they have been moved.");
        this.keepPlacedEndcrystalInMemoryTime = config.getInt("combat.prevent-piston-aura.moved-crystals-cant-do-damage-for-x-ticks", 40);
    }

    @Override
    public String name() {
        return "prevent-piston-aura";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.prevent-piston-aura.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onEntitySpawn(EntitySpawnEvent event) {
        if (event.getEntity() instanceof EnderCrystal) {
            UUID endCrystal = event.getEntity().getUniqueId();
            endcrystals.put(endCrystal, event.getLocation());
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> endcrystals.remove(endCrystal), keepPlacedEndcrystalInMemoryTime);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCrystalExplode(EntityDamageByEntityEvent event) {
        UUID endCrystal = event.getEntity().getUniqueId();
        if (endcrystals.containsKey(endCrystal) && !endcrystals.get(endCrystal).equals(event.getDamager().getLocation())) {
            event.setCancelled(true);
        }
    }
}
