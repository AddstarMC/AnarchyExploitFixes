package me.moomoo.anarchyexploitfixes.protocollib;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class CraftingRecipeLagPatch extends PacketAdapter implements AEFProtocolLibModule, Listener {

    private final HashMap<UUID, Long> playersClickingCraftingRecipes = new HashMap<>();
    private final long craftingRecipeDelayInMillis;

    protected CraftingRecipeLagPatch(AnarchyExploitFixes plugin) {
        super(plugin, ListenerPriority.NORMAL, PacketType.Play.Client.AUTO_RECIPE);
        shouldEnable();

        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-crafting-recipe-lag-exploit.enable", "Prevent lagging the server by spamming the crafting recipe book.");
        this.craftingRecipeDelayInMillis = config.getInt("patches.prevent-crafting-recipe-lag-exploit.crafting-recipe-delay-in-ticks", 5, "How many ticks a player needs to wait to be able to use the crafting recipe book again") * 50L;
    }

    @Override
    public String name() {
        return "prevent-crafting-recipe-lag-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-crafting-recipe-lag-exploit.enable", true);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary() || event.getPlayer() == null) return;

        UUID playerUniqueID = event.getPlayer().getUniqueId();
        if (
                playersClickingCraftingRecipes.containsKey(playerUniqueID)
                && playersClickingCraftingRecipes.get(playerUniqueID) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
        } else {
            playersClickingCraftingRecipes.put(playerUniqueID, System.currentTimeMillis() + craftingRecipeDelayInMillis);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersClickingCraftingRecipes.remove(event.getPlayer().getUniqueId());
    }
}
