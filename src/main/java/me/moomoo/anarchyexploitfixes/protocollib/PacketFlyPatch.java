package me.moomoo.anarchyexploitfixes.protocollib;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class PacketFlyPatch extends PacketAdapter implements AEFProtocolLibModule {

    private final boolean logIsEnabled, shouldKickPlayer;
    private final int maxTeleportPacketsPer10s;
    private final BukkitScheduler bukkitScheduler;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    private final Material air = XMaterial.AIR.parseMaterial();

    protected PacketFlyPatch(AnarchyExploitFixes plugin) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.TELEPORT_ACCEPT);
        this.bukkitScheduler = plugin.getServer().getScheduler();
        shouldEnable();

        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.packetfly-patch.enable", "Patches Futureclient / Rusherhack packet fly exploit.");
        this.logIsEnabled = config.getBoolean("patches.packetfly-patch.log", true);
        this.maxTeleportPacketsPer10s = config.getInt("patches.packetfly-patch.max-teleport-packets-per-10s", 25);
        this.shouldKickPlayer = config.getBoolean("patches.packetfly-patch.kick-player-if-packetflying", false);
    }

    @Override
    public String name() {
        return "packetfly-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.packetfly-patch.enable", true);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary()) return;
        Player player = event.getPlayer();
        if (
                player == null
                || player.isGliding()
                || player.isInsideVehicle()
        ) return;

        if (
                player.getLocation().getBlock().getRelative(BlockFace.DOWN).getType().equals(air)
        ) {
            UUID playerUniqueID = player.getUniqueId();
            Integer playerTPPackets = levels.get(playerUniqueID);

            if (playerTPPackets != null) {
                if (playerTPPackets > maxTeleportPacketsPer10s) {
                    event.setCancelled(true);
                    if (shouldKickPlayer) player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).masked_KickMessage);
                    if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(),
                            "Prevented player '"+player.getName()+"' from packet flying"
                    );
                } else {
                    levels.merge(playerUniqueID, 1, Integer::sum);
                    bukkitScheduler.runTaskLaterAsynchronously(
                            plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                    );
                }
            } else {
                levels.put(playerUniqueID, 1);
                bukkitScheduler.runTaskLaterAsynchronously(
                        plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L
                );
            }
        }
    }
}
