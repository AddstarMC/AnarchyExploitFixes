package me.moomoo.anarchyexploitfixes.prevention;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Instant;
import java.util.HashMap;

public class Redstone implements Listener {
    private final Main plugin;
    private final FileConfiguration config;
    private static Redstone instance;

    long lastGathered;
    HashMap<Player, Integer> leverHashMap = new HashMap<>();
    int rateLimit;

    public Redstone(Main plugin) {
        this.plugin = plugin;
        this.config = plugin.getConfig();
        instance = this;
        rateLimit = config.getInt("LeverLimitAmount");
    }

    @EventHandler
    public void onRedstoneEvent(BlockRedstoneEvent evt) {
        long now = Instant.now().toEpochMilli();
        double tps = Bukkit.getServer().getTPS()[0];
        if (tps < config.getDouble("Redstone")) {
            int current = evt.getOldCurrent();
            evt.setNewCurrent(current);
            if ((now - lastGathered) >= 30000) {
                lastGathered = now;
                plugin.getLogger().info("Disabled all redstone because tps is " + tps);
            }
        } else {
            int newcurrent = evt.getNewCurrent();
            evt.setNewCurrent(newcurrent);
        }
    }

    @EventHandler
    public void onPull(PlayerInteractEvent event) {
        if(config.getBoolean("RateLimitLevers")){
            try {
                if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
                    if (event.getClickedBlock().getType() == Material.LEVER) {
                        Player player = event.getPlayer();
                        if (leverHashMap.containsKey(player)) {
                            leverHashMap.put(player, leverHashMap.get(player) + 1);
                        } else {
                            leverHashMap.put(player, 1);
                        }
                        if (leverHashMap.get(player) > rateLimit) {
                            event.setCancelled(true);
                            if(config.getBoolean("RateLimitKick")) player.kickPlayer(ChatColor.translateAlternateColorCodes('&', config.getString("RateLimitKickMsg")));
                            leverHashMap.remove(player);
                        }
                    }
                }
            } catch (Error | Exception throwable) {
                System.out.println(throwable);
            }
        }
    }


    @EventHandler
    private void onExplode(EntityExplodeEvent evt) {
        double tps = Bukkit.getServer().getTPS()[0];
        if (tps < config.getDouble("Explosions")) {
            evt.setCancelled(true);
        }
        if (config.getBoolean("DisableExplosions")) {
            evt.setCancelled(true);
        }
    }

    @EventHandler
    private void onExplodePrime(ExplosionPrimeEvent evt) {
        if (config.getBoolean("DisableExplosions")) {
            evt.setCancelled(true);
        }
    }

    public static void clearLeverHashmap(){
        instance.leverHashMap.clear();
    }
}
