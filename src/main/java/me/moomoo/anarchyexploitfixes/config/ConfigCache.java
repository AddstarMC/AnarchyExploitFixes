package me.moomoo.anarchyexploitfixes.config;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Logger;

public class ConfigCache {
    private FileConfiguration config;
    private final File configPath;
    public final Locale default_lang;
    private final Logger logger;

    // Config Cache
    public final boolean auto_lang, chat_ReplaceAt_IsEnabled, chat_PreventUnicodeDot, chat_BannedWords_IsEnabled, chat_bannedWords_LogEnabled,
            chat_CharLimit_IsEnabled, chat_CharLimit_LogEnabled, chat_PreventLinks_IsEnabled, chat_PreventLinks_AtSpawn_IsEnabled,
            chat_Links_MoreLenientCheck_IsEnabled, chat_PreventLinks_LogEnabled, chat_PreventChatSpam_IsEnabled, chat_PreventLinkSpam_IsEnabled, chat_PreventLinkSpam_LogEnabled,
            chat_PreventLinkSpam_AtSpawn_IsEnabled, commands_PreventCmdSpam_IsEnabled, commands_PreventCmdSpam_WhitelistIsEnabled, commands_CommandWhitelist_IsEnabled,
            commands_CommandWhitelist_UseAsBlacklist, distAwayToTP_IsEnabled, nickResetOnly, hurtCommands_IsEnabled, useSparkHealth, chat_FixChatCo_IsEnabled, misc_JoinLeaveMessages_IsEnabled,
            misc_JoinLeaveMessages_ShowByDefault, misc_FirstJoinMessage_IsEnabled, misc_MaskKickMessages_IsEnabled, misc_PreventSpamKick_IsEnabled;
    public final int chat_CharLimit, chat_PreventLinks_SpawnRadius, chat_PreventLinkSpam_SpawnRadius, distAwayToTP_Distance;
    public final double config_version;
    public final long chat_PreventChatSpam_Time, chat_PreventChatSpam_WordTime, chat_PreventChatSpam_CheckTime, chat_PreventChatSpam_MessagesPerTime, chat_PreventLinkSpam_CheckTime;
    public final List<String> chat_BannedWords, chat_Links_LinkRegex, chat_Links_Exemptions, commands_PreventCmdSpam_Whitelist, commands_CommandWhitelist_Whitelist,
            distAwayToTP_Commands, distAwayToTP_ExcludedWorlds, hurtCommands_Commands, misc_PreventSpamKick_KickMessages;

    public ConfigCache() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        logger = plugin.getLogger();
        config = plugin.getConfig();
        configPath = new File(plugin.getDataFolder(), "config.yml");

        // Config Version
        this.config_version = getDouble("config-version", 1.0);
        // Language Settings
        this.default_lang = Locale.forLanguageTag(getString("language.default-language", "en-us").replace("_", "-"));
        this.auto_lang = getBoolean("language.auto-language", true);

    }

    public void saveConfig() {
        try {
            config.save(configPath);
            config = AnarchyExploitFixes.getInstance().getConfig();
        } catch (IOException e) {
            logger.severe("Failed to save configuration file! - " + e.getLocalizedMessage());
        }
    }

    public boolean getBoolean(String path, boolean def) {
        if (config.isSet(path)) return config.getBoolean(path, def);
        config.set(path, def);
        return def;
    }

    public String getString(String path, String def) {
        if (config.isSet(path)) return config.getString(path, def);
        config.set(path, def);
        return def;
    }

    public double getDouble(String path, Double def) {
        if (config.isSet(path)) return config.getDouble(path, def);
        config.set(path, def);
        return def;
    }

    public int getInt(String path, int def) {
        if (config.isSet(path)) return config.getInt(path, def);
        config.set(path, def);
        return def;
    }

    public List<String> getList(String path, List<String> def) {
        if (config.isSet(path)) return config.getStringList(path);
        config.set(path, def);
        return def;
    }

    public ConfigurationSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
        if (config.isConfigurationSection(path)) return config.getConfigurationSection(path);
        return config.createSection(path, defaultKeyValue);
    }
}
