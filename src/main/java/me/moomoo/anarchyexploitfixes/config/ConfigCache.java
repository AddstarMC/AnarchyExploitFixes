package me.moomoo.anarchyexploitfixes.config;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Logger;

public class ConfigCache {
    private FileConfiguration config;
    private final File configPath;
    public final Locale default_lang;
    private final Logger logger;

    // Config Cache
    public final boolean auto_lang, chat_ReplaceAt_IsEnabled, chat_PreventUnicodeDot, chat_BannedWords_IsEnabled, chat_bannedWords_LogEnabled, chat_BannedRegex_IsEnabled,
            chat_BannedRegex_LogEnabled, chat_CharLimit_IsEnabled, chat_CharLimit_LogEnabled, chat_PreventLinks_IsEnabled, chat_PreventLinks_AtSpawn_IsEnabled,
            chat_Links_MoreLenientCheck_IsEnabled, chat_PreventLinks_LogEnabled, chat_PreventChatSpam_IsEnabled, chat_PreventLinkSpam_IsEnabled, chat_PreventLinkSpam_LogEnabled,
            chat_PreventLinkSpam_AtSpawn_IsEnabled, commands_PreventCmdSpam_IsEnabled, commands_PreventCmdSpam_WhitelistIsEnabled, commands_CommandWhitelist_IsEnabled,
            commands_CommandWhitelist_UseAsBlacklist, distAwayToTP_IsEnabled, nickResetOnly, hurtCommands_IsEnabled, useSparkHealth, chat_FixChatCo_IsEnabled, joinLeaveMessages_IsEnabled,
            joinLeaveMessages_ShowByDefault, firstJoinMessage_IsEnabled;
    public final int chat_CharLimit, chat_PreventLinks_SpawnRadius, chat_PreventLinkSpam_SpawnRadius, distAwayToTP_Distance;
    public final double config_version;
    public final long chat_PreventChatSpam_Time, chat_PreventChatSpam_WordTime, chat_PreventChatSpam_CheckTime, chat_PreventChatSpam_MessagesPerTime, chat_PreventLinkSpam_CheckTime;
    public final List<String> chat_BannedWords, chat_BannedRegex, chat_Links_LinkRegex, chat_Links_Exemptions, commands_PreventCmdSpam_Whitelist, commands_CommandWhitelist_Whitelist,
            distAwayToTP_Commands, distAwayToTP_ExcludedWorlds, hurtCommands_Commands;

    public ConfigCache() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        logger = plugin.getLogger();
        config = plugin.getConfig();
        configPath = new File(plugin.getDataFolder(), "config.yml");

        // Config Version
        this.config_version = getDouble("config-version", 1.0);
        // Language Settings
        this.default_lang = Locale.forLanguageTag(getString("language.default-language", "en-us").replace("_", "-"));
        this.auto_lang = getBoolean("language.auto-language", true);

        /*
                Chat
        */
        // Fix ChatCo Ignore Bug
        this.chat_FixChatCo_IsEnabled = getBoolean("chat.fix-ChatCo-ignore-bug", false);
        // Replace @
        this.chat_ReplaceAt_IsEnabled = getBoolean("chat.replace-@", true);
        // Prevent Unicode Dot
        this.chat_PreventUnicodeDot = getBoolean("chat.prevent-unicode-dot", true);
        // Character Limit
        this.chat_CharLimit_IsEnabled = getBoolean("chat.character-limit.enable", true);
        this.chat_CharLimit_LogEnabled = getBoolean("chat.character-limit.log", true);
        this.chat_CharLimit = getInt("chat.character-limit.char-limit", 128);
        // Prevent Sending Links
        this.chat_PreventLinks_IsEnabled = getBoolean("chat.links.prevent-sending.enable", false);
        this.chat_PreventLinks_LogEnabled = getBoolean("chat.links.prevent-sending.log", true);
        this.chat_PreventLinks_AtSpawn_IsEnabled = getBoolean("chat.links.prevent-sending.only-for-players-around-spawn", true);
        this.chat_PreventLinks_SpawnRadius = getInt("chat.links.prevent-sending.spawn-radius", 1000);
        // Prevent Spamming Links
        this.chat_PreventLinkSpam_IsEnabled = getBoolean("chat.links.prevent-spamming.enable", true);
        this.chat_PreventLinkSpam_LogEnabled = getBoolean("chat.links.prevent-spamming.log", true);
        this.chat_PreventLinkSpam_AtSpawn_IsEnabled = getBoolean("chat.links.prevent-spamming.only-for-players-around-spawn", true);
        this.chat_PreventLinkSpam_SpawnRadius = getInt("chat.links.prevent-spamming.spawn-radius", 1000);
        this.chat_PreventLinkSpam_CheckTime = getInt("chat.links.prevent-spamming.delay-until-next-link-in-seconds", 300) * 20L;
        // Links
        this.chat_Links_LinkRegex = getList("chat.links.link-regex",
                Arrays.asList("(https?://(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?://(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})",
                        "[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z()]{1,6}\\b([-a-zA-Z()@:%_+.~#?&/=]*)")
        );
        this.chat_Links_MoreLenientCheck_IsEnabled = getBoolean("chat.links.more-lenient-link-check.enable", true);
        this.chat_Links_Exemptions = getList("chat.prevent-links.more-lenient-link-check.exemptions", Arrays.asList("discord", "dc"));
        // Banned Words
        this.chat_BannedWords_IsEnabled = getBoolean("chat.banned-words.enable", false);
        this.chat_BannedWords = getList("chat.banned-words.banned-words", Collections.singletonList("what's 2+2"));
        this.chat_bannedWords_LogEnabled = getBoolean("chat.banned-words.log", true);
        // Banned Regex
        this.chat_BannedRegex_IsEnabled = getBoolean("chat.banned-regex.enable", false);
        this.chat_BannedRegex = getList("chat.banned-regex.banned-regex", Collections.singletonList("^This is a(.*)banned message"));
        this.chat_BannedRegex_LogEnabled = getBoolean("chat.banned-regex.log", true);
        // Prevent Chat Spam
        this.chat_PreventChatSpam_IsEnabled = getBoolean("chat.prevent-spam.enable", true);
        this.chat_PreventChatSpam_Time = getInt("chat.prevent-spam.anti-spam-time", 1) * 20L;
        this.chat_PreventChatSpam_CheckTime = getInt("chat.prevent-spam.anti-spam-check-time", 30) * 20L;
        this.chat_PreventChatSpam_WordTime = getInt("chat.prevent-spam.anti-spam-word-time", 60) * 20L;
        this.chat_PreventChatSpam_MessagesPerTime = getInt("chat.prevent-spam.anti-spam-messages-per-time", 10);
        /*
                Command Filtering
        */
        // Command Whitelist
        this.commands_CommandWhitelist_IsEnabled = getBoolean("command-whitelist.enable", true);
        this.commands_CommandWhitelist_UseAsBlacklist = getBoolean("command-whitelist.use-as-blacklist-instead", false);
        this.commands_CommandWhitelist_Whitelist = getList("command-whitelist.commands", Arrays.asList(
                "/help", "/msg", "/kill", "/discord", "/togglechat", "/toggletells", "/ignore", "/ignorelist",
                "/toggledeathmsg", "/stats", "/tps", "/w", "/m", "/t", "/pm", "/tell", "/whisper", "/r", "/reply"
        ));
        // Prevent Command Spam
        this.commands_PreventCmdSpam_IsEnabled = getBoolean("chat.prevent-spam.anti-spam-commands.enable", true);
        this.commands_PreventCmdSpam_WhitelistIsEnabled = getBoolean("chat.prevent-spam.anti-spam-commands.use-whitelist", true);
        this.commands_PreventCmdSpam_Whitelist = getList("chat.prevent-spam.anti-spam-commands.whitelist", Arrays.asList(
                "/msg", "/message", "/w", "/whisper", "/tell", "/r", "/reply"
        ));
        /*
                1b1t Options
        */
        this.distAwayToTP_IsEnabled = getBoolean("1b1t-options.distance-away-to-teleport.enable", false);
        this.distAwayToTP_Distance = getInt("1b1t-options.distance-away-to-teleport.distance-in-blocks", 5000);
        this.distAwayToTP_Commands = getList("1b1t-options.distance-away-to-teleport.teleport-commands", Arrays.asList(
                "/tpa", "/tpahere", "/call", "/ecall", "/etpa", "/tpask", "/etpask"
        ));
        this.distAwayToTP_ExcludedWorlds = getList("1b1t-options.distance-away-to-teleport.excluded-worlds", Arrays.asList(
                "world_the_end", "exampleworld2"
        ));
        this.nickResetOnly = getBoolean("1b1t-options.nick-reset-only", false);
        this.hurtCommands_IsEnabled = getBoolean("1b1t-options.make-specific-commands-hurt-you.enable", false);
        this.hurtCommands_Commands = getList("1b1t-options.make-specific-commands-hurt-you.hurt-commands", Collections.singletonList("/tpa"));
        this.useSparkHealth = getBoolean("1b1t-options.use-spark-health", false);
        /*
                Misc
        */
        // Join Leave Messages
        this.joinLeaveMessages_IsEnabled = getBoolean("join-leave-messages.enable", true);
        this.joinLeaveMessages_ShowByDefault = getBoolean("join-leave-messages.connection-messages-on-by-default", true);
        // First Join Message
        this.firstJoinMessage_IsEnabled = getBoolean("join-leave-messages.first-join-messages.enable", false);

    }

    public void saveConfig() {
        try {
            config.save(configPath);
            config = AnarchyExploitFixes.getInstance().getConfig();
        } catch (IOException e) {
            logger.severe("Failed to save configuration file! - " + e.getLocalizedMessage());
        }
    }

    public boolean getBoolean(String path, boolean def) {
        if (config.isSet(path)) return config.getBoolean(path, def);
        config.set(path, def);
        return def;
    }

    public String getString(String path, String def) {
        if (config.isSet(path)) return config.getString(path, def);
        config.set(path, def);
        return def;
    }

    public double getDouble(String path, Double def) {
        if (config.isSet(path)) return config.getDouble(path, def);
        config.set(path, def);
        return def;
    }

    public int getInt(String path, int def) {
        if (config.isSet(path)) return config.getInt(path, def);
        config.set(path, def);
        return def;
    }

    public List<String> getList(String path, List<String> def) {
        if (config.isSet(path)) return config.getStringList(path);
        config.set(path, def);
        return def;
    }

    public ConfigurationSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
        if (config.isConfigurationSection(path)) return config.getConfigurationSection(path);
        return config.createSection(path, defaultKeyValue);
    }
}
