package me.moomoo.anarchyexploitfixes.config;

import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Logger;

public class Config {

    private ConfigFile config;
    private final File configFile;
    public final Locale default_lang;
    private final Logger logger;
    public final boolean auto_lang, protocolLib_IsDisabled, connectionMsgsAreOnByDefault, kickPhraseCommandIsEnabled;
    public final double config_version;
    public final int nether_ceiling_max_y, nether_floor_min_y, overworld_floor_min_y;

    public Config() {
        configFile = new File(AnarchyExploitFixes.getInstance().getDataFolder(), "config.yml");
        logger = AnarchyExploitFixes.getLog();
        createFiles();
        loadConfig();

        // Config Version - This has no function yet but can be used to parse older configs to new versions in the future.
        this.config_version = getDouble("config-version", 1.0);

        // Language Settings
        config.addDefault("language", null, ""); // force order of language and add 2 empty lines above that option using empty comment.
        this.default_lang = Locale.forLanguageTag(getString("language.default-language", "en_us", "The default language that will be used if auto-language is false or no matching language file was found.").replace("_", "-"));
        this.auto_lang = getBoolean("language.auto-language", true, "If set to true, will display messages based on client language");

        // General Settings
        config.addDefault("general", null, ""); // force order of general and add 2 empty lines above that option using empty comment.
        this.protocolLib_IsDisabled = getBoolean("general.disable-all-ProtocolLib", false, "Use only if you are having problems with ProtocolLib when starting the plugin.");
        this.nether_ceiling_max_y = getInt("general.nether-ceiling-y", 127, "The Y-level at which the nether ceiling generates the last layer of bedrock on your server.");
        this.nether_floor_min_y = getInt("general.nether-floor-y", 0, "The Y-level at which the nether floor generates the last layer of bedrock on your server.");
        this.overworld_floor_min_y = getInt("general.overworld-floor-y", AnarchyExploitFixes.getMCVersion() > 17 ? -64 : 0, "The Y-level at which the overworld floor generates the last layer of bedrock on your server.");

        // Force the order of the rest of the configuration file. Setting comment to "" will create 2 empty lines above that config option.
        config.addDefault("patches", null, "");
        config.addDefault("preventions", null, "");
        config.addDefault("dupe-preventions", null, "");
        config.addDefault("illegals", null, "");
        config.addDefault("chunk-limits",null, "");
        config.addDefault("redstone", null, "");
        config.addDefault("bedrock", null, "");
        config.addDefault("elytra", null, "");
        config.addDefault("elytra.elytra-speed.display-actionbar", true);
        config.addDefault("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        config.addDefault("chat", null, "");
        config.addDefault("misc", null, "");
        config.addDefault("1b1t-options", null, "");

        // Join/Leave messages
        config.addDefault("misc.join-leave-messages.enable", true); // add default here so enable option shows up first.
        this.connectionMsgsAreOnByDefault = getBoolean("misc.join-leave-messages.connection-messages-on-by-default", true, "default mode of /toggleconnectionmsgs");
        this.kickPhraseCommandIsEnabled = getBoolean("misc.enable-kickphrase-command", false, "Enable the /aef kickphrase <phrase> command.");
    }

    private void createFiles() {
        try {
            File parent = new File(configFile.getParent());
            if (!parent.exists()) {
                if (!parent.mkdir()) logger.severe("Unable to create plugin config directory.");
            }
            if (!configFile.exists()) {
                configFile.createNewFile(); // Result can be ignored because this method only returns false if the file already exists,
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadConfig() {
        try {
            config = ConfigFile.loadConfig(configFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void saveConfig() {
        try {
            config.save();
        } catch (IOException e) {
            logger.severe("Failed to save config file! - " + e.getLocalizedMessage());
        }
    }

    public boolean getBoolean(String path, boolean def, String comment) {
        config.addDefault(path, def, comment);
        return config.getBoolean(path, def);
    }

    public boolean getBoolean(String path, boolean def) {
        config.addDefault(path, def);
        return config.getBoolean(path, def);
    }

    public String getString(String path, String def, String comment) {
        config.addDefault(path, def, comment);
        return config.getString(path, def);
    }

    public String getString(String path, String def) {
        config.addDefault(path, def);
        return config.getString(path, def);
    }

    public double getDouble(String path, Double def, String comment) {
        config.addDefault(path, def, comment);
        return config.getDouble(path, def);
    }

    public double getDouble(String path, Double def) {
        config.addDefault(path, def);
        return config.getDouble(path, def);
    }

    public int getInt(String path, int def, String comment) {
        config.addDefault(path, def, comment);
        return config.getInteger(path, def);
    }

    public int getInt(String path, int def) {
        config.addDefault(path, def);
        return config.getInteger(path, def);
    }

    public List<String> getList(String path, List<String> def, String comment) {
        config.addDefault(path, def, comment);
        return config.getStringList(path);
    }

    public List<String> getList(String path, List<String> def) {
        config.addDefault(path, def);
        return config.getStringList(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
        config.makeSectionLenient(path);
        config.addDefault(path, defaultKeyValue);
        return config.getConfigSection(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue, String comment) {
        config.makeSectionLenient(path);
        config.addDefault(path, defaultKeyValue, comment);
        return config.getConfigSection(path);
    }

    public void addComment(String path, String comment) {
        config.addComment(path, comment);
    }
}
