package me.moomoo.anarchyexploitfixes;

import io.netty.channel.*;
import net.minecraft.server.v1_12_R1.PacketPlayInFlying;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class GodMode implements Listener {
    FileConfiguration config = Main.getPlugin(Main.class).getConfig();
    @EventHandler
    public void onJoin(PlayerJoinEvent event) {
        if (config.getBoolean("PreventGodMode")) {
            injectPlayer(event.getPlayer());
            Main.getPlugin(Main.class).a.put(event.getPlayer(), 0);
            Main.getPlugin(Main.class).b.put(event.getPlayer(), 0);
        }
    }
    @EventHandler
    public void onLeave(PlayerQuitEvent event) {
        if (config.getBoolean("PreventGodMode")) {
            removePlayer(event.getPlayer());
            Main.getPlugin(Main.class).a.put(event.getPlayer(), 0);
            Main.getPlugin(Main.class).b.put(event.getPlayer(), 0);
        }
    }
    @EventHandler
    public void onMove(PlayerMoveEvent event) {
        if (config.getBoolean("PreventGodMode")) {
            if (event.getPlayer().getVehicle() != null) {
                Main.getPlugin(Main.class).a.put(event.getPlayer(), 1);
                if (Main.getPlugin(Main.class).b.get(event.getPlayer()) != null) {
                    if (Main.getPlugin(Main.class).b.get(event.getPlayer()) > 3) {
                        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.RED + "" + event.getPlayer() + " tried getting into godmode");
                        event.getPlayer().leaveVehicle();
                        Main.getPlugin(Main.class).a.put(event.getPlayer(), 0);
                        Main.getPlugin(Main.class).b.put(event.getPlayer(), 0);
                    }
                }
            }
        }
    }
    static void removePlayer(Player player) {
        Channel channel = ((CraftPlayer) player).getHandle().playerConnection.networkManager.channel;
        channel.eventLoop().submit(() -> {
            channel.pipeline().remove(player.getName());
            return null;
        });
    }
    static void injectPlayer(Player player) {
        ChannelDuplexHandler channelDuplexHandler = new ChannelDuplexHandler() {

            @Override
            public void channelRead(ChannelHandlerContext channelHandlerContext, Object packet) throws Exception {
                if ((packet instanceof PacketPlayInFlying.PacketPlayInPosition || packet instanceof PacketPlayInFlying.PacketPlayInPositionLook) && Main.getPlugin(Main.class).a.get(player) > 0) {
                    int count = Main.getPlugin(Main.class).b.getOrDefault(player, 0);
                    Main.getPlugin(Main.class).b.put(player, count + 1);
                    Main.getPlugin(Main.class).a.put(player, 0);
                }
                super.channelRead(channelHandlerContext, packet);
            }

            @Override
            public void write(ChannelHandlerContext channelHandlerContext, Object packet, ChannelPromise channelPromise) throws Exception {
                super.write(channelHandlerContext, packet, channelPromise);
            }

        };

        ChannelPipeline pipeline = ((CraftPlayer) player).getHandle().playerConnection.networkManager.channel.pipeline();
        pipeline.addBefore("packet_handler", player.getName(), channelDuplexHandler);
    }
}
