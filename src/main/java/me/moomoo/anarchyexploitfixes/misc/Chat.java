package me.moomoo.anarchyexploitfixes.misc;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;

import java.util.HashMap;
import java.util.HashSet;

public class Chat implements Listener {
    private final static String HTTP_REGEX_CHECK = "(https?://(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?://(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})";
    private final static String REGEX_CHECK = "[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z()]{1,6}\\b([-a-zA-Z()@:%_+.~#?&/=]*)";
    private final Main plugin;
    public HashMap<Player, Integer> messagesPerTime = new HashMap<>();
    HashSet<String> antispam = new HashSet<>();
    HashSet<String> linkspam = new HashSet<>();
    HashSet<String> words = new HashSet<>();

    public Chat(Main plugin) {
        this.plugin = plugin;
    }

    // shit skidded from john200410, just added another packet to check. msg me if you want removed
    @EventHandler
    private void onChat(AsyncPlayerChatEvent event) {
        Player p = event.getPlayer();
        if (event.getMessage().contains("ï¼Ž")) {
            if (plugin.config.getBoolean("PreventUnicodeDot")) {
                event.setCancelled(true);
            }
        }
        for (String s : plugin.config.getStringList("BannedWords")) {
            if (event.getMessage().toLowerCase().contains(s.toLowerCase())) {
                event.setCancelled(true);
                plugin.getLogger().info(p + " prevented from saying " + event.getMessage() + " because words banned in config.yml");
            }
        }
        if (plugin.config.getBoolean("PreventSpam")) {
            if (antispam.contains(p.getName())) {
                event.setCancelled(true);
                plugin.getLogger().info(p.getName() + " FAILED to send message due to slowmode: " + event.getMessage());
            } else {
                antispam.add(p.getName());
                if (words.contains(event.getMessage())) {
                    event.setCancelled(true);
                    plugin.getLogger().info(p.getName() + " FAILED to send message due to duplicate message: " + event.getMessage());

                } else {
                    if (event.getMessage().length() > 10) {
                        words.add(event.getMessage());
                        Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> words.remove(event.getMessage()), plugin.config.getInt("AntiSpamWordTime") * 20L);
                    } else {
                        if (messagesPerTime.get(p) != null) {
                            if (messagesPerTime.get(p) > plugin.config.getInt("AntiSpamMessagesPerTime")) {
                                event.setCancelled(true);
                                plugin.getLogger().info(p.getName() + " FAILED to send message due to too many messages in time period: " + event.getMessage());
                            } else {
                                messagesPerTime.merge(p, 1, Integer::sum);
                                Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> messagesPerTime.put(p, messagesPerTime.get(p) - 1), plugin.config.getInt("AntiSpamCheckTime") * 20L);
                            }
                        } else {
                            messagesPerTime.put(p, 1);
                        }
                    }
                }
                Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> antispam.remove(p.getName()), plugin.config.getInt("AntiSpamTime") * 20L);
            }
            if (event.getMessage().length() > plugin.config.getInt("CharacterLimit")) {
                event.setCancelled(true);
                plugin.getLogger().info(p.getName() + " FAILED to send message due to character limit: " + event.getMessage());
            }
            for (String string : event.getMessage().replace(">", "").split(" ")) {
                //check if it is a link
                if (string.matches(REGEX_CHECK) || string.matches(HTTP_REGEX_CHECK) || string.toLowerCase().contains("discord") || string.toLowerCase().contains("dc/") || string.toLowerCase().contains("dc\\")) {
                    if (linkspam.contains(p.getName())) {
                        event.setCancelled(true);
                        plugin.getLogger().info("Prevented " + p.getName() + " from sending " + event.getMessage() + " because temp banned from sending links");
                    } else {
                        linkspam.add(p.getName());
                        Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> linkspam.remove(event.getMessage()), plugin.config.getInt("AntiSpamLinkTime") * 20L);
                    }
                }
            }
        }
        if (plugin.config.getBoolean("Replace@")) {
            if (event.getMessage().contains("@")) {
                event.setMessage(event.getMessage().replaceAll("@", ""));
                p.sendMessage("stop trying to ping me faggot");
            }
        }

        if (plugin.config.getBoolean("Preventlinks")) {
            /*
             code from John200410
            */
            //loop through each word

            final World playerWorld = p.getWorld();

            //check if player is in overworld
            if (!playerWorld.getEnvironment().equals(World.Environment.NORMAL)) {
                return;
            }
            final Location location = p.getLocation();

            //check distance from the world spawn
            if (location.distance(playerWorld.getSpawnLocation()) > 1000) {
                return;
            }

            //check if message contains a link
            final String msg = event.getMessage();

            //loop through each word
            for (String string : msg.split(" ")) {
                //check if it is a link
                if (string.matches(REGEX_CHECK) || string.matches(HTTP_REGEX_CHECK)) {
                    if (!(p.isOp())) {
                        plugin.getLogger().info(p.getName());
                        plugin.getLogger().info("Prevented " + p.getName() + " from sending " + event.getMessage() + " because link");
                        event.setCancelled(true);
                    }
                }
            }
        }
    }
}
