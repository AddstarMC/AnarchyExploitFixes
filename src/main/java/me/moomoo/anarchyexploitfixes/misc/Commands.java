package me.moomoo.anarchyexploitfixes.misc;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;

import java.util.Arrays;
import java.util.HashMap;

public class Commands implements CommandExecutor, Listener {
    private final Main plugin;
    HashMap<Player, String> messages = new HashMap<>();

    public Commands(Main plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (args[0].toLowerCase().startsWith("ver")) {
            sender.sendMessage(ChatColor.GOLD + "This server is running AnarchyExploitFixes v" + plugin.getDescription().getVersion());
            return true;
        }
        if (!(sender instanceof Player) || sender.isOp()) {
            if (args[0].contains("reload")) {
                plugin.reloadConfig();
                sender.sendMessage(ChatColor.GOLD + "AnarchyExploitFixes config reloaded.");
                return true;
            }
            if (args[0].equals("kickphrase")) {
                String phrase = Arrays.toString(args).replace("kickphrase ", "");
                for (Player p : Bukkit.getOnlinePlayers()) {
                    if (messages.containsKey(p)) {
                        if (messages.get(p).contains(phrase)) {
                            p.kickPlayer(ChatColor.GRAY + "You have lost connection to the server");
                        }
                    }
                }
                return true;
            }
            if (args[0].equals("geared")) {
                StringBuilder geared = new StringBuilder();
                StringBuilder newplayer = new StringBuilder();
                Integer geared_int = 0;
                Integer newplayer_int = 0;
                for (Player c : Bukkit.getServer().getOnlinePlayers()) {
                    if (c.getInventory().getChestplate() != null || c.getInventory().getBoots() != null || c.getInventory().getHelmet() != null || c.getInventory().getLeggings() != null) {
                        geared.append(c.getName()).append(", ");
                        geared_int++;
                    } else {
                        newplayer.append(c.getName()).append(", ");
                        newplayer_int++;
                    }
                }
                sender.sendMessage("Geared players: " + ChatColor.GOLD + geared + ChatColor.WHITE + " (" + geared_int + ")");
                sender.sendMessage("Naked players: " + ChatColor.GOLD + newplayer + ChatColor.WHITE + " (" + newplayer_int + ")");
                sender.sendMessage("Total players: " + ChatColor.GOLD + (newplayer_int + geared_int));
                return true;
            }
            if (args[0].equals("elytra")) {
                StringBuilder flying = new StringBuilder();
                StringBuilder notflying = new StringBuilder();
                Integer flyint = 0;
                Integer noflyint = 0;

                for (Player c : Bukkit.getServer().getOnlinePlayers()) {
                    if (c.isGliding()) {
                        flying.append(c.getName()).append(", ");
                        flyint++;
                    } else {
                        notflying.append(c.getName()).append(", ");
                        noflyint++;
                    }
                }

                sender.sendMessage("Flying on elytra: " + ChatColor.GOLD + flying + ChatColor.WHITE + " (" + flyint + ")");
                sender.sendMessage("Not flying on elytra: " + ChatColor.GOLD + notflying + ChatColor.WHITE + " (" + noflyint + ")");
                sender.sendMessage("Total players: " + ChatColor.GOLD + (flyint + noflyint));
                return true;
            }
            if (args[0].equals("lag")) {
                try {
                    Thread.sleep(1000);
                    return true;
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        return false;
    }

    @EventHandler
    private void onChat(AsyncPlayerChatEvent evt) {
        messages.put(evt.getPlayer(), evt.getMessage());
    }
}
