package me.moomoo.anarchyexploitfixes;

import me.moomoo.anarchyexploitfixes.commands.AEFCmd;
import me.moomoo.anarchyexploitfixes.commands.ConnectionMsgsCmd;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bstats.bukkit.Metrics;
import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.*;
import org.bukkit.plugin.java.JavaPlugin;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.bukkit.Bukkit.getPluginManager;

public class AnarchyExploitFixes extends JavaPlugin {

    private static AnarchyExploitFixes instance;
    private static Config config;
    private static HashMap<String, LanguageCache> languageCacheMap;
    private static int minorMCVersion = Integer.MIN_VALUE;
    public final SortedMap<String, Boolean> enabledModules = new TreeMap<>();
    public final HashSet<UUID> connectionMsgs = new HashSet<>();
    public final HashSet<UUID> playersInNewChunks = new HashSet<>();

    public double tps;

    @Override
    public void onEnable() {
        instance = this;

        // Detect Minecraft version.
        // Returns 12, if minecraft version is 1.12.x, 19 if version is 1.19.x, and so on.
        Pattern MINECRAFT_VERSION_MATCHER = Pattern.compile("\\(MC: \\d\\.(\\d+)(?:\\.\\d+)?\\)");
        Matcher regexMatcher = MINECRAFT_VERSION_MATCHER.matcher(Bukkit.getVersion());
        if (regexMatcher.find()) {
            String version = regexMatcher.group(1);
            minorMCVersion = Integer.parseInt(version);
        } else {
            getLogger().severe("Error detecting Minecraft Version. This can lead to unexpected behaviour.");
            getLogger().severe("The following features could be affected by this problem:" +
                    "\nPrevent Going Below Bedrock Floor\nPrevent Dispenser Crash\nNoCom Patch\nExp Dupe Patch 2\nDisable Fish");
        }

        // Load lang and config
        reloadLang();
        reloadAEFConfig();

        // Register commands
        getCommand("aef").setExecutor(new AEFCmd());
        getCommand("toggleconnectionmsgs").setExecutor(new ConnectionMsgsCmd());

        // Check for ProtocolLib
        if (config.protocolLib_IsDisabled) {
            getLogger().warning("You specified to disable all ProtocolLib patches.");
        } else {
            if (!getPluginManager().isPluginEnabled("ProtocolLib")) {
                getLogger().severe("Could not find ProtocolLib. Many gamebreaking exploits will not be patched.\nDownload at https://www.spigotmc.org/resources/protocollib.1997/");
            }
        }

        // Resource-friendly TPS checker
        ScheduledExecutorService schedulerTPS = Executors.newScheduledThreadPool(1);
        schedulerTPS.scheduleAtFixedRate(() -> {
            Thread thread = new Thread(() -> tps = getServer().getTPS()[0]);
            thread.start();
        }, 2, 1, TimeUnit.SECONDS);

        // Fancy enable
        getLogger().info(
                " █████  ███████ ███████ \n" +
                        "██   ██ ██      ██      \n" +
                        "███████ █████   █████    AnarchyExploitFixes\n" +
                        "██   ██ ██      ██         Made by moomoo\n" +
                        "██   ██ ███████ ██      ");

        // Metrics
        new Metrics(this, 8700);
    }

    public static LanguageCache getLang(String lang) {
        lang = lang.replace("-", "_");
        if (config.auto_lang) {
            return languageCacheMap.getOrDefault(lang, languageCacheMap.get(config.default_lang.toString().toLowerCase()));
        } else {
            return languageCacheMap.get(config.default_lang.toString().toLowerCase());
        }
    }

    public static LanguageCache getLang(Locale locale) {
        return getLang(locale.toString().toLowerCase());
    }

    public static LanguageCache getLang(CommandSender commandSender) {
        if (commandSender instanceof Player) {
            Player player = (Player) commandSender;
            return getLang(player.getLocale());
        } else {
            return getLang(config.default_lang);
        }
    }

    public void reloadAEFConfig() {
        config = new Config();
        AnarchyExploitFixesModule.reloadModules();
        config.saveConfig();
    }

    public void reloadLang() {
        languageCacheMap = new HashMap<>();
        try {
            File langDirectory = new File(instance.getDataFolder() + File.separator + "lang");
            Files.createDirectories(langDirectory.toPath());
            for (String fileName : getDefaultLanguageFiles()) {
                String localeString = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.'));
                getLogger().info(String.format("Found language file for %s", localeString));
                LanguageCache langCache = new LanguageCache(localeString);
                languageCacheMap.put(localeString, langCache);
            }
            Pattern langPattern = Pattern.compile("([a-z]{1,3}_[a-z]{1,3})(\\.yml)", Pattern.CASE_INSENSITIVE);
            for (File langFile : langDirectory.listFiles()) {
                Matcher langMatcher = langPattern.matcher(langFile.getName());
                if (langMatcher.find()) {
                    String localeString = langMatcher.group(1).toLowerCase();
                    if(!languageCacheMap.containsKey(localeString)) { // make sure it wasn't a default file that we already loaded
                        getLogger().info(String.format("Found language file for %s", localeString));
                        LanguageCache langCache = new LanguageCache(localeString);
                        languageCacheMap.put(localeString, langCache);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            getLogger().severe("Error loading language files! Language files will not reload to avoid errors, make sure to correct this before restarting the server!");
        }
    }

    private Set<String> getDefaultLanguageFiles(){
        Reflections reflections = new Reflections("lang", Scanners.Resources);
        return reflections.getResources(Pattern.compile("([a-z]{1,3}_[a-z]{1,3})(\\.yml)"));
    }

    public static AnarchyExploitFixes getInstance()  {
        return instance;
    }

    public static Config getConfiguration() {
        return config;
    }

    public static int getMCVersion() {
        return minorMCVersion;
    }
}
