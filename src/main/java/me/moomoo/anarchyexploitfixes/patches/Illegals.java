package me.moomoo.anarchyexploitfixes.patches;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.block.Skull;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.Map;

public class Illegals implements Listener {
    private final Main plugin;

    public Illegals(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onPlayerInteractEvent(PlayerInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            if (evt.getClickedBlock() != null) {
                if (evt.getClickedBlock().getState() instanceof Container) {
                    if (config.getBoolean("DEBUG")) {
                        plugin.getLogger().info("PlayerInteractEvent " + evt.getClickedBlock().getType().toString());
                    }
                    ((Container) evt.getClickedBlock().getState()).getInventory().forEach(this::revert);

                    config.getList("BANNED_BLOCKS").forEach(b -> ((Container) evt.getClickedBlock().getState()).getInventory().remove(Material.getMaterial((String) b)));
                }
            }
        }
    }

    @EventHandler
    private void onPlayerJoinEvent(PlayerJoinEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnJoin")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (config.getBoolean("DEBUG")) {
                    plugin.getLogger().info("PlayerJoinEvent");
                }
                evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
            });
        }
        evt.getPlayer().getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onInventoryOpenEvent(InventoryOpenEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnInventoryOpen")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (config.getBoolean("DEBUG")) {
                    plugin.getLogger().info("InventoryOpenEvent");
                }
                evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
            });
        }

        evt.getPlayer().getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onBlockDropItemEvent(PlayerDropItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnDrop")) {
            revert(evt.getItemDrop().getItemStack());
        }

        evt.getPlayer().getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onChunkLoadEvent(ChunkLoadEvent evt) {
        if (plugin.config.getBoolean("RemoveALLIllegalBlocksOnCHUNKLOAD")) {
            new Thread(() -> {
                Chunk c = evt.getChunk();
                if (!evt.isNewChunk()) {
                    int cx = c.getX() << 4;
                    int cz = c.getZ() << 4;
                    for (int x = cx; x < cx + 16; x++) {
                        for (int z = cz; z < cz + 16; z++) {
                            for (int y = 0; y < 255; y++) {
                                if (!c.getWorld().getEnvironment().equals(World.Environment.THE_END)) {
                                    if ((plugin.config.getList("BANNED_BLOCKS").contains(c.getBlock(x, y, z).getType().toString()))) {
                                        if (y > 5) {
                                            if (evt.getChunk().getWorld().getEnvironment().equals(World.Environment.NETHER)) {
                                                if (y < 123) {
                                                    setType(c.getBlock(x, y, z), Material.AIR);
                                                }
                                            }
                                            if (evt.getChunk().getWorld().getEnvironment().equals(World.Environment.NORMAL)) {
                                                setType(c.getBlock(x, y, z), Material.AIR);
                                            }
                                        }
                                    }
                                }
                                if (plugin.config.getBoolean("RemoveIllegalHeads")) {
                                    if (c.getBlock(x, y, z).getType().equals(Material.SKULL)) {
                                        if (((Skull) c.getBlock(x, y, z).getState()).hasOwner() || ((Skull) c.getBlock(x, y, z).getState()).getSkullType().name().equals("PLAYER")) {
                                            setType(c.getBlock(x, y, z), Material.AIR);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }).start();
        }
    }

    @EventHandler
    private void onInventoryInteractEvent(InventoryInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("DEBUG")) {
            plugin.getLogger().info("InventoryInteractEvent ");
        }
        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (evt.getInventory().contains(Material.getMaterial((String) b))) {
                    evt.getInventory().remove(Material.getMaterial((String) b));
                    evt.setCancelled(true);
                }
            });
        }
        evt.getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onInventoryClick(InventoryClickEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnClick")) {
            revert(evt.getCurrentItem());
        }
        evt.getWhoClicked().getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onInventoryPickup(InventoryPickupItemEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnPickup")) {
            String item = evt.getItem().getType().toString();
            if (config.getBoolean("DEBUG")) {
                plugin.getLogger().info("InventoryPickupItemEvent " + item);
            }
            if (config.getList("BANNED_BLOCKS").contains(item)) {
                evt.setCancelled(true);
            }
        }
        evt.getInventory().forEach(this::revert);
    }

    @EventHandler
    private void onInventoryMove(InventoryMoveItemEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("RemoveIllegalBlocksOnMove")) {
            revert(evt.getItem());
            evt.getSource().forEach(this::revert);
            evt.getDestination().forEach(this::revert);
            evt.getInitiator().forEach(this::revert);
        }
    }

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("PreventPlacingIllegalBlocks")) {
            String block = evt.getBlockPlaced().getType().toString();
            if (config.getList("BANNED_BLOCKS").contains(block)) {
                if (config.getBoolean("RemoveIllegalBlockOnPlace")) {
                    config.getList("BANNED_BLOCKS").forEach(b -> {
                        if (evt.getPlayer().getInventory().contains(Material.getMaterial((String) b))) {
                            evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
                            evt.setCancelled(true);
                        }
                    });
                }
                evt.setCancelled(true);
            }
            evt.getPlayer().getInventory().forEach(this::revert);
        }
    }

    public void setType(final Block b, final Material m) {
        new BukkitRunnable() {
            public void run() {
                if (!b.getType().equals(m)) {
                    b.setType(m);
                }
            }
        }.runTask(plugin);
    }

    public void revert(ItemStack c) {
        if (c != null) {
            if (plugin.config.getBoolean("RevertStackedItems")) {
                if (plugin.config.getBoolean("OnlyRevertStacksForCertainItems")) {
                    for (String s : plugin.config.getStringList("RevertStackedItemsList")) {
                        if (c.getType().name().equals(s)) {
                            if (c.getAmount() > c.getMaxStackSize()) {
                                c.setAmount(c.getMaxStackSize());
                            }
                        }
                    }
                } else {
                    if (c.getAmount() > c.getMaxStackSize()) {
                        c.setAmount(c.getMaxStackSize());
                    }
                }
            }
            if (plugin.config.getBoolean("RevertEnchantments")) {
                for (Map.Entry<Enchantment, Integer> e : c.getEnchantments().entrySet()) {
                    if (e.getValue() != null && e.getKey() != null) {
                        if (e.getValue() > e.getKey().getMaxLevel()) {
                            c.subtract(c.getAmount());
                        }
                    }
                }
            }
            if (plugin.config.getBoolean("RemoveIllegalHeads")) {
                if (c.getType().equals(Material.SKULL_ITEM)) {
                    SkullMeta sm = (SkullMeta) c.getItemMeta();
                    if (sm.hasOwner() || c.getData().toString().equals("SKULL_ITEM(3)")) {
                        c.subtract(c.getAmount());
                    }
                }
            }
            if (plugin.config.getList("BANNED_BLOCKS").contains(c.getType().name())) {
                c.subtract(c.getAmount());
            }
        }
    }
}
