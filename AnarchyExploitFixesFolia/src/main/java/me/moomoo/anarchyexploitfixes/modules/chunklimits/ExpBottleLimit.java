package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ExpBottleEvent;
import org.slf4j.event.Level;

import java.util.concurrent.atomic.AtomicInteger;

public class ExpBottleLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxExpBottlePerChunk;
    private final boolean logIsEnabled;

    public ExpBottleLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.exp-bottle-limit.enable",
                "Prevent having a shitton of exp bottles in one chunk then loading it to kill the server.");
        this.logIsEnabled = config.getBoolean("chunk-limits.exp-bottle-limit.log", false);
        this.maxExpBottlePerChunk = config.getInt("chunk-limits.exp-bottle-limit.max-exp-bottle-per-chunk", 25,
                "Max in a chunk, doesn't limit the actual xp orbs.");
        this.checkPeriod = config.getInt("chunk-limits.exp-bottle-limit.check-period-in-ticks", 800,
                "20 ticks = 1 second");
    }

    @Override
    public String name() {
        return "exp-bottle-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.exp-bottle-limit.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onExpBottle(ExpBottleEvent event) {
        int expBottleCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType() != EntityType.THROWN_EXP_BOTTLE) continue;

            expBottleCount++;

            if (expBottleCount > maxExpBottlePerChunk) {
                entity.getScheduler().run(plugin, kill -> {
                    entity.remove();
                    if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed XP-Bottle at "
                            + LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxExpBottlePerChunk);
                }, null);
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), chunkCheck -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger droppedItemCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().run(plugin, checkEntity -> {
                            if (entity.getType() != EntityType.THROWN_EXP_BOTTLE) return;
                            if (droppedItemCount.incrementAndGet() <= maxExpBottlePerChunk) return;

                            entity.remove();
                            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed XP-Bottle at " +
                                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxExpBottlePerChunk);
                        }, null);
                    }
                });
            }
        }
    }
}