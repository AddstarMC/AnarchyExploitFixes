package me.moomoo.anarchyexploitfixes.modules.chat;

import io.papermc.paper.event.player.AsyncChatEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.regex.Pattern;

public class PreventLinkSpam implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> linkCooldowns = new HashMap<>();
    private final HashSet<Pattern> linkRegexes = new HashSet<>();
    private final boolean logIsEnabled, preventOnlyAtSpawn;
    private final int radius;
    private final long delay_in_millis;

    public PreventLinkSpam() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("chat.links.prevent-spamming.log", true);
        this.preventOnlyAtSpawn = config.getBoolean("chat.links.prevent-spamming.only-for-players-around-spawn", true);
        this.radius = config.getInt("chat.links.prevent-spamming.spawn-radius", 1000);
        this.delay_in_millis = config.getInt("chat.links.prevent-spamming.delay-until-next-link-in-seconds", 300) * 50L;
        config.getList("chat.links.prevent-spamming.link-regex", List.of(
                "(https?://(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?://(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})",
                "[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z()]{1,6}\\b([-a-zA-Z()@:%_+.~#?&/=]*)"
        )).forEach(regexString -> linkRegexes.add(Pattern.compile(regexString)));
    }

    @Override
    public String name() {
        return "links.prevent-spamming";
    }

    @Override
    public String category() {
        return "chat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chat.links.prevent-spamming.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerChat(AsyncChatEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.chatbypass")) return;
        if (preventOnlyAtSpawn && player.getLocation().distance(player.getWorld().getSpawnLocation()) > radius) return;

        final String message = PlainTextComponentSerializer.plainText().serialize(event.originalMessage());

        for (String word : message.split(" ")) {
            for (Pattern regex : linkRegexes) {
                if (regex.matcher(word).find()) {
                    final UUID playerUniqueId = player.getUniqueId();
                    if (
                            linkCooldowns.containsKey(playerUniqueId)
                            && linkCooldowns.get(playerUniqueId) > System.currentTimeMillis()
                    ) {
                        event.setCancelled(true);
                        if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Prevented "+player.getName()+" from spamming message containing link: '"+message+"'");
                    } else {
                        linkCooldowns.put(playerUniqueId, System.currentTimeMillis() + delay_in_millis);
                    }

                    // if one regex matched, no need try matching further patterns
                    return;
                }
            }
        }
    }
}
