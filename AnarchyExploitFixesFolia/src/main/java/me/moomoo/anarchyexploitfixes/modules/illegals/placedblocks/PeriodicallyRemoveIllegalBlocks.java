package me.moomoo.anarchyexploitfixes.modules.illegals.placedblocks;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class PeriodicallyRemoveIllegalBlocks implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final Set<Material> blocksToRemove;
    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final int netherCeilY;
    private final boolean checkShouldPauseOnLowTPS;

    public PeriodicallyRemoveIllegalBlocks() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.blocksToRemove = config.getList("illegals.remove-placed-blocks.periodically.blocks-to-remove",
                        List.of("PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART",
                                "REPEATING_COMMAND_BLOCK", "BEDROCK", "BARRIER"),
                        "Enter PLAYER_HEAD here if you want to remove placed playerheads.")
                .stream()
                .map(configuredBlock -> {
                    try {
                        return Material.valueOf(configuredBlock);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARN, name(), configuredBlock);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.exemptedWorlds = new HashSet<>(config.getList("illegals.remove-placed-blocks.periodically.exempted-worlds", List.of("exampleworld1", "exampleworld2")));
        this.checkPeriod = config.getInt("illegals.remove-placed-blocks.periodically.check-period-in-seconds", 10) * 20L;
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-placed-blocks.periodically.pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble("illegals.remove-placed-blocks.periodically.pause-TPS", 14.0);
        this.netherCeilY = config.nether_ceiling_max_y;
    }

    @Override
    public String name() {
        return "remove-placed-blocks.periodically";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-placed-blocks.periodically.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            if (exemptedWorlds.contains(world.getName())) continue;

            final int minY = world.getMinHeight();
            final int maxY = world.getMaxHeight();
            final boolean inNether = world.getEnvironment() == World.Environment.NETHER;

            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), checkChunk -> {
                    if (checkShouldPauseOnLowTPS && (AnarchyExploitFixes.getTickData().getTPS() <= pauseTPS)) return;
                    if (!chunk.isEntitiesLoaded()) return;

                    for (int x = 0; x < 16; x++) {
                        for (int z = 0; z < 16; z++) {
                            for (int y = minY; y < maxY; y++) {
                                Block block = chunk.getBlock(x, y, z);
                                if (!blocksToRemove.contains(block.getType())) continue;

                                // If is bedrock, make sure not to delete naturally generated
                                if (block.getType() == Material.BEDROCK) {
                                    if (y > minY + 4) { // offset to not delete natural bedrock floor
                                        if (inNether) {
                                            // offset to not delete bedrock ceiling
                                            if (y < netherCeilY - 5) block.setType(Material.AIR, false);
                                        } else {
                                            block.setType(Material.AIR, false);
                                        }
                                    }
                                    continue;
                                }

                                block.setType(Material.AIR, false);
                            }
                        }
                    }
                });
            }
        }
    }
}
