package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import com.destroystokyo.paper.event.entity.EntityPathfindEvent;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.util.NumberConversions;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class PathfindingLimits implements AnarchyExploitFixesModule, Listener {

    private final Map<EntityType, Double> limitedTypes = new HashMap<>();
    private final boolean logIsEnabled, globalDistanceEnabled, perTypeDistanceEnabled;
    private final double globalMaxDistanceSquared;

    public PathfindingLimits() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("lag-preventions.pathfinding-limits.log", false,
                "Only meant for debug.");
        this.globalDistanceEnabled = config.getBoolean("lag-preventions.pathfinding-limits.global-limit.enable", false);
        this.globalMaxDistanceSquared = NumberConversions.square(config.getDouble("lag-preventions.pathfinding-limits.global-limit.max-target-distance", 20.0,
                "The max distance no mob pathfinding should exceed.\nYou want this to be higher than your highest max distance for a specific mob."));
        this.perTypeDistanceEnabled = config.getBoolean("lag-preventions.pathfinding-limits.custom-limits.enable", true);
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("ZOMBIE", 6.0);
        defaults.put("SKELETON", 6.0);
        defaults.put("WITHER_SKELETON", 8.0);
        defaults.put("ZOMBIE_VILLAGER", 10.0);
        defaults.put("ZOMBIFIED_PIGLIN", 8.0);
        defaults.put("WITHER", 8.0);
        ConfigSection section = config.getConfigSection("lag-preventions.pathfinding-limits.custom-limits.entities", defaults);
        for (String configuredEntity : section.getKeys(false)) {
            try {
                Double maxDistanceSquared = NumberConversions.square(Double.valueOf(section.getString(configuredEntity)));
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                this.limitedTypes.put(limitedEntity, maxDistanceSquared);
            } catch (NumberFormatException e) {
                LogUtil.doubleNotRecognized(Level.WARNING, name(), configuredEntity);
            } catch (IllegalArgumentException e) {
                LogUtil.entityTypeNotRecognized(Level.WARNING, name(), configuredEntity);
            }
        }
    }

    @Override
    public String name() {
        return "pathfinding-limits";
    }

    @Override
    public String category() {
        return "lag-prevention";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.pathfinding-limits.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPathfind(EntityPathfindEvent event) {
        final double targetDistanceSquared = event.getEntity().getLocation().distanceSquared(event.getLoc());

        if (globalDistanceEnabled) {
            if (targetDistanceSquared > globalMaxDistanceSquared) {
                event.setCancelled(true);
                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(),
                        "Cancelled pathfinding for entity " + event.getEntityType() + " at " +
                                LocationUtil.toString(event.getEntity().getLocation()) +
                                " because the target is further than the global limit. Distance: " + Math.sqrt(targetDistanceSquared));
                return;
            }
        }

        if (perTypeDistanceEnabled) {
            if (limitedTypes.containsKey(event.getEntityType()) && targetDistanceSquared > limitedTypes.get(event.getEntityType())) {
                event.setCancelled(true);
                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(),
                        "Cancelled pathfinding for entity " + event.getEntityType() + " at " +
                                LocationUtil.toString(event.getEntity().getLocation()) +
                                " because the target is further than its configured limit. Distance: " + Math.sqrt(targetDistanceSquared));
            }
        }
    }
}