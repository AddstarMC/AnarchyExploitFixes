package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.entity.EntityPortalEvent;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class PreventSpecificEntitiesInPortals implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Set<EntityType> forbiddenTypes;

    public PreventSpecificEntitiesInPortals() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.portals.prevent-specific-types.entities",
                "CAUTION: Will kill the entity on folia due to broken portal event. There is sadly no other efficient way.");
        this.forbiddenTypes = config.getList("preventions.portals.prevent-specific-types.entities",
                List.of("DROPPED_ITEM", "FIREWORK", "PRIMED_TNT", "THROWN_EXP_BOTTLE", "EXPERIENCE_ORB", "ARMOR_STAND"),
                "Defaults prevent common lag methods.")
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.entityTypeNotRecognized(Level.WARN, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "prevent-specific-types-in-portals";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-specific-types.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(EntityPortalEvent event) { // Does not fire on folia due to broken API
        if (forbiddenTypes.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!AnarchyExploitFixes.isServerFolia()) return; // Avoid fallback logic on non-folia

        if (forbiddenTypes.contains(event.getEntityType()) && event.getEntityType() != EntityType.PLAYER) {
            event.getEntity().getScheduler().run(plugin, kill -> event.getEntity().remove(), null);
        }
    }
}
