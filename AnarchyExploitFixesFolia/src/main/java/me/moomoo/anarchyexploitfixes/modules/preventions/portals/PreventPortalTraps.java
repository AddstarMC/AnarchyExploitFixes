package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.player.PlayerPortalEvent;

import java.time.Duration;
import java.util.UUID;

public class PreventPortalTraps implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Cache<UUID, Location> portalEnterLocations;
    private final long tpBackDelayTicks;

    public PreventPortalTraps() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.portals.prevent-portal-traps.enable",
                "Teleports a player back to the original location if they stand in a portal for too long.");
        final int tpBackDelaySeconds = config.getInt("preventions.portals.prevent-portal-traps.wait-time-until-tp-back-in-seconds", 10);
        this.tpBackDelayTicks = tpBackDelaySeconds * 20L;
        this.portalEnterLocations = AnarchyExploitFixes.isServerFolia() ? Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(tpBackDelaySeconds + 2)).build() : null;
    }

    @Override
    public String name() {
        return "prevent-portal-traps";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-portal-traps.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(PlayerPortalEvent event) { // Does not fire on folia due to broken API
        Player player = event.getPlayer();
        player.getScheduler().runDelayed(plugin, tpBack -> {
            if (player.getLocation().getBlock().getType() == Material.NETHER_PORTAL) {
                player.teleportAsync(event.getFrom())
                        .thenAccept(tpHappened -> player.playSound(player.getLocation(), Sound.BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F));
            }
        }, null, tpBackDelayTicks);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!AnarchyExploitFixes.isServerFolia()) return; // Avoid fallback logic on non-folia
        if (event.getEntityType() != EntityType.PLAYER) return;

        Player player = (Player) event.getEntity();
        Location firstEnterLoc = portalEnterLocations.getIfPresent(player.getUniqueId());
        if (firstEnterLoc != null) return; // If the first enter loc has already been cached, a delayed check has already been scheduled.

        final Location from = player.getLocation();
        portalEnterLocations.put(player.getUniqueId(), from);

        player.getScheduler().runDelayed(plugin, tpBack -> {
            if (player.getLocation().getBlock().getType() == Material.NETHER_PORTAL) {
                player.teleportAsync(from)
                        .thenAccept(tpHappened -> player.playSound(player.getLocation(), Sound.BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F));
            }
        }, null, tpBackDelayTicks);
    }
}
