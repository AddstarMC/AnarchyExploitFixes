package me.moomoo.anarchyexploitfixes.modules;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.util.HashSet;
import java.util.Set;

public interface AEFModule {

    String name();
    String category();
    void enable();
    boolean shouldEnable();
    void disable();

    Set<AEFModule> enabledModules = new HashSet<>();
    Reflections reflections = new Reflections(AEFModule.class.getPackage().getName());

    static void reloadModules() {
        enabledModules.forEach(AEFModule::disable);
        enabledModules.clear();

        for (Class<?> clazz : reflections.get(Scanners.SubTypes.of(AEFModule.class).asClass())) {
            if (clazz.isInterface()) continue;

            try {
                AEFModule module = (AEFModule) clazz.getDeclaredConstructor().newInstance();
                if (module.shouldEnable()) {
                    module.enable();
                    enabledModules.add(module);
                }
            } catch (Exception e) {
                AnarchyExploitFixes.getPrefixedLogger().warn("Failed to load module " + clazz.getSimpleName());
            }
        }
    }
}
