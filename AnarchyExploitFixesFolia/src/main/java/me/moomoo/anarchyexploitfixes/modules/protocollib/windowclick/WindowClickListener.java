package me.moomoo.anarchyexploitfixes.modules.protocollib.windowclick;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.slf4j.event.Level;

public class WindowClickListener extends PacketAdapter {

    public WindowClickListener() {
        super(AnarchyExploitFixes.getInstance(), ListenerPriority.HIGHEST, PacketType.Play.Client.WINDOW_CLICK);
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        final PacketContainer packet = event.getPacket();
        try {
            final int button = this.getButton(packet);

            if (button < 0 || button > 9 && button != 40 && button != 99) {
                event.setCancelled(true);
                return;
            }

            final int slot = this.getSlot(packet);

            if (slot != -999 && slot != -1) {
                if (slot < 0) event.setCancelled(true);
                return;
            }

            if (button == 40) {
                event.setCancelled(true);
                return;
            }

            switch (this.getClickType(packet)) {
                case SWAP, PICKUP_ALL -> {
                    event.setCancelled(true);
                }
                case THROW -> {
                    if (slot == -1) event.setCancelled(true);
                }
                case QUICK_MOVE -> {
                    if (slot == -999) event.setCancelled(true);
                }
            }
        } catch (Exception e) {
            LogUtil.moduleLog(Level.WARN, "window-click-crash-patch",
                    "Error reading ClickSlotC2SPacket - " + e.getLocalizedMessage() + "\n" +
                            "This might be due to version incompatibilities.\n" +
                            "Packet in question: " + packet.toString());
        }
    }

    private int getSlot(PacketContainer packet) {
        return packet.getIntegers().read(2);
    }

    private int getButton(PacketContainer packet) {
        return packet.getIntegers().read(3);
    }

    private enum InventoryClickType {
        PICKUP, QUICK_MOVE, SWAP, CLONE, THROW, QUICK_CRAFT, PICKUP_ALL
    }

    private InventoryClickType getClickType(PacketContainer packet) {
        return packet.getEnumModifier(InventoryClickType.class, 4).read(0);
    }
}