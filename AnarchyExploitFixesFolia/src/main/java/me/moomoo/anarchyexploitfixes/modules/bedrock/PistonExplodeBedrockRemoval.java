package me.moomoo.anarchyexploitfixes.modules.bedrock;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.Collections;
import java.util.HashSet;

public class PistonExplodeBedrockRemoval implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<String> whitelistedWorlds = new HashSet<>();
    private static final BlockFace[] cardinalDirections = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };

    public PistonExplodeBedrockRemoval() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.whitelistedWorlds.addAll(
                AnarchyExploitFixes.getConfiguration().getList("bedrock.prevent-removing-bedrock-by-exploding-pistons.whitelisted-worlds", Collections.singletonList("example_world_name"))
        );
    }

    @Override
    public String name() {
        return "prevent-removing-bedrock-by-exploding-pistons";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.prevent-removing-bedrock-by-exploding-pistons.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        HashSet<Block> pistons_that_could_remove_bedrock = new HashSet<>();

        for (Block potentialPistonPart : event.blockList()) {
            if (!isGlitchPiston(potentialPistonPart.getType())) continue;

            for (BlockFace blockFace : BlockFace.values()) {
                if (!potentialPistonPart.getRelative(blockFace).getType().equals(Material.BEDROCK)) continue;

                pistons_that_could_remove_bedrock.add(potentialPistonPart);
                plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), task -> potentialPistonPart.setType(Material.AIR));

                for (BlockFace cardinalDirection : cardinalDirections) {
                    Block potentialExtendedPistonPart = potentialPistonPart.getRelative(cardinalDirection);
                    if (isGlitchPiston(potentialExtendedPistonPart.getType())) {
                        plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), task -> potentialExtendedPistonPart.setType(Material.AIR));
                    }
                }
            }
        }

        if (!pistons_that_could_remove_bedrock.isEmpty()) {
            event.blockList().removeAll(pistons_that_could_remove_bedrock);
            for (Block block : pistons_that_could_remove_bedrock) {
                plugin.getServer().getRegionScheduler().runDelayed(plugin, block.getLocation(), task -> block.setType(Material.AIR), 5);
            }
        }
    }

    private static boolean isGlitchPiston(Material material) {
        return switch (material) {
            case PISTON, PISTON_HEAD, MOVING_PISTON, STICKY_PISTON -> true;
            default -> false;
        };
    }
}
