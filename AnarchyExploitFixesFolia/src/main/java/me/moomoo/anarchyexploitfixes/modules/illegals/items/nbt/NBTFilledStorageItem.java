package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.models.HumanPermHelper;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import static me.moomoo.anarchyexploitfixes.utils.LogUtil.materialNotRecognized;

public class NBTFilledStorageItem implements IllegalItemModule {

    private final Set<Material> storageTypes;
    private final String stored_items_tag;
    private final boolean delete, checkStored;

    public NBTFilledStorageItem() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.nbt.revert-impossibly-stored-items.enable",
                "Prevents usage of prefilled storage items using NBT tags.\n" +
                        "Commonly used to create dispensers / chests containing kit shulkers.\n" +
                        "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS.get());
        this.stored_items_tag = config.getString("illegals.nbt.revert-impossibly-stored-items.tag", "BlockEntityTag",
                "The exact name of the nbt tag that signals items are stored inside.");
        this.delete = config.getBoolean("illegals.nbt.revert-impossibly-stored-items.delete-item", false,
                "Whether to delete the item as well.");
        this.checkStored = config.getBoolean("illegals.nbt.revert-impossibly-stored-items.delete-shulker-if-contains-storage-items", false);
        this.storageTypes = config.getList("illegals.nbt.revert-impossibly-stored-items.materials-to-check",
                        List.of("CHEST", "TRAPPED_CHEST", "DISPENSER", "DROPPER"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        materialNotRecognized(Level.WARN, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "nbt.revert-impossibly-stored-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.nbt.revert-impossibly-stored-items.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public ItemCheckResult checkItem(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemCheckResult.FINE;
        }

        if (storageTypes.contains(itemStack.getType()) && new NBTItem(itemStack).getKeys().contains(stored_items_tag)) {
            return ItemCheckResult.IS_ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (checkItem(stored) != ItemCheckResult.FINE) {
                        return ItemCheckResult.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemCheckResult.FINE;
    }

    @Override
    public void takeAction(ItemStack itemStack, ItemCheckResult result) {
        if (result != ItemCheckResult.FINE) {
            if (delete) itemStack.setType(Material.AIR);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onDispense(BlockDispenseEvent event) {
        if (checkItem(event.getItem()) != ItemCheckResult.FINE) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (HumanPermHelper.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS, event.getWhoClicked())) return;

        takeAction(event.getCurrentItem(), checkItem(event.getCurrentItem()));
        takeAction(event.getCursor(), checkItem(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            takeAction(itemStack, checkItem(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAttack(PrePlayerAttackEntityEvent event) {
        if (!event.willAttack()) return;
        ItemStack attackItem = event.getPlayer().getActiveItem();
        final ItemCheckResult result = checkItem(attackItem);
        if (result != ItemCheckResult.FINE) {
            if (HumanPermHelper.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(attackItem, result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemCheckResult result = checkItem(droppedItem);
        if (result != ItemCheckResult.FINE) {
            if (HumanPermHelper.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS, event.getPlayer())) return;

            takeAction(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemCheckResult result = checkItem(event.getItem());
        if (result != ItemCheckResult.FINE) {
            if (HumanPermHelper.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemCheckResult result = checkItem(handItem);
        if (result != ItemCheckResult.FINE) {
            if (HumanPermHelper.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(handItem, result);
        }
    }
}
