package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.*;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private ScheduledTask periodicInvCheck;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck;

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.incompatible-enchants.enable",  "Reverts items like Armor with all Protection enchantments.");
        this.useWhitelist = config.getBoolean("illegals.enchantments.incompatible-enchants.item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean("illegals.enchantments.incompatible-enchants.use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList("illegals.enchantments.incompatible-enchants.whitelisted-items", List.of("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARN, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.doPeriodicCheck = config.getBoolean("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (doPeriodicCheck) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(item -> handleItem(item, getLegality(item))), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.incompatible-enchants.enable", true);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        HandlerList.unregisterAll(this);
    }

    @Override
    public ItemLegality getLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult == ItemLegality.LEGAL) {
            return;
        }

        if (MaterialTags.ARMOR.isTagged(itemStack)) {
            filterProtectionEnchants(itemStack);
            filterCurses(itemStack);
            if (MaterialTags.BOOTS.isTagged(itemStack)) {
                filterBoots(itemStack);
            }
            return;
        }

        if (MaterialUtil.isElytra(itemStack)) {
            filterCurses(itemStack);
            return;
        }

        if (MaterialUtil.isTool(itemStack)) {
            filterTools(itemStack);
            if (MaterialTags.AXES.isTagged(itemStack)) {
                filterSharpnessEnchants(itemStack);
            }
            return;
        }

        if (MaterialTags.SWORDS.isTagged(itemStack)) {
            filterSharpnessEnchants(itemStack);
            return;
        }

        if (MaterialUtil.isBow(itemStack)) {
            filterBow(itemStack);
            return;
        }

        if (MaterialUtil.isTrident(itemStack)) {
            filterTrident(itemStack);
            return;
        }

        if (MaterialUtil.isCrossbow(itemStack)) {
            filterCrossbow(itemStack);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), getLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), getLegality(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            handleItem(itemStack, getLegality(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAttack(PrePlayerAttackEntityEvent event) {
        if (!event.willAttack()) return;
        ItemStack attackItem = event.getPlayer().getActiveItem();
        final ItemLegality result = getLegality(attackItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;
            handleItem(attackItem, result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality result = getLegality(droppedItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemLegality result = getLegality(event.getItem());
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality result = getLegality(handItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(handItem, result);
        }
    }

    private void filterCurses(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(Enchantment.BINDING_CURSE) && enchantments.containsKey(Enchantment.VANISHING_CURSE)) {
            item.removeEnchantment(Enchantment.BINDING_CURSE);
        }
    }

    private void filterCrossbow(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(Enchantment.MULTISHOT) && enchantments.containsKey(Enchantment.PIERCING)) {
            item.removeEnchantment(Enchantment.MULTISHOT);
        }
    }

    private void filterTrident(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(Enchantment.RIPTIDE)) {
            if (enchantments.containsKey(Enchantment.LOYALTY) || enchantments.containsKey(Enchantment.CHANNELING)) {
                item.removeEnchantment(Enchantment.RIPTIDE);
            }
        }
    }

    private void filterBow(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(Enchantment.MENDING) && enchantments.containsKey(Enchantment.ARROW_INFINITE)) {
            item.removeEnchantment(Enchantment.ARROW_INFINITE);
        }
    }

    private void filterTools(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;
        if (enchantments.containsKey(Enchantment.SILK_TOUCH) && enchantments.containsKey(Enchantment.LOOT_BONUS_BLOCKS)) {
            item.removeEnchantment(Enchantment.LOOT_BONUS_BLOCKS);
        }
    }

    private void filterBoots(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(Enchantment.DEPTH_STRIDER) && enchantments.containsKey(Enchantment.FROST_WALKER)) {
            item.removeEnchantment(Enchantment.FROST_WALKER);
        }
    }

    private void filterSharpnessEnchants(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;

        // Prefer keeping Sharpness enchantment if it is present
        if (enchantments.containsKey(Enchantment.DAMAGE_ALL)) {
            if (enchantments.containsKey(Enchantment.DAMAGE_ARTHROPODS))
                item.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
            if (enchantments.containsKey(Enchantment.DAMAGE_UNDEAD))
                item.removeEnchantment(Enchantment.DAMAGE_UNDEAD);
        } else if (
                enchantments.containsKey(Enchantment.DAMAGE_ARTHROPODS)
                && enchantments.containsKey(Enchantment.DAMAGE_UNDEAD)
        ) {
            item.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
        }
    }

    private void filterProtectionEnchants(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;

        // Prefer keeping Protection enchantment if it is present
        if (enchantments.containsKey(Enchantment.PROTECTION_ENVIRONMENTAL)) {
            if (enchantments.containsKey(Enchantment.PROTECTION_EXPLOSIONS))
                item.removeEnchantment(Enchantment.PROTECTION_EXPLOSIONS);
            if (enchantments.containsKey(Enchantment.PROTECTION_FIRE))
                item.removeEnchantment(Enchantment.PROTECTION_FIRE);
            if (enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE))
                item.removeEnchantment(Enchantment.PROTECTION_PROJECTILE);
        // If protection is not present, prefer blast protection
        } else if (enchantments.containsKey(Enchantment.PROTECTION_EXPLOSIONS)) {
            if (enchantments.containsKey(Enchantment.PROTECTION_FIRE))
                item.removeEnchantment(Enchantment.PROTECTION_FIRE);
            if (enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE))
                item.removeEnchantment(Enchantment.PROTECTION_PROJECTILE);
        // If protection and blast protection is not present, prefer projectile protection
        } else if (
                enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE)
                && enchantments.containsKey(Enchantment.PROTECTION_FIRE)
        ) {
            item.removeEnchantment(Enchantment.PROTECTION_FIRE);
        }
    }
}
