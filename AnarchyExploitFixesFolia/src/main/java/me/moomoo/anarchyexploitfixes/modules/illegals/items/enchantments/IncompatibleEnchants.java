package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, preventHopperBypass, checkStored, doSomething;

    private static final Set<Enchantment> DAMAGE_ENCHANTS = Set.of(
            Enchantment.DAMAGE_ALL,
            Enchantment.DAMAGE_UNDEAD,
            Enchantment.DAMAGE_ARTHROPODS);
    private static final Set<Enchantment> PROTECT_ENCHANTS = Set.of(
            Enchantment.PROTECTION_ENVIRONMENTAL,
            Enchantment.PROTECTION_EXPLOSIONS,
            Enchantment.PROTECTION_FIRE,
            Enchantment.PROTECTION_PROJECTILE);

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.incompatible-enchants.enable",
                "Reverts items like Armor with all Protection enchantments. Bypass permission: " + bypassPermission().get());
        this.checkStored = config.getBoolean("illegals.enchantments.incompatible-enchants.check-stored-items", false);
        this.doSomething = config.getBoolean("illegals.enchantments.incompatible-enchants.delete-or-revert-item", true,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.useWhitelist = config.getBoolean("illegals.enchantments.incompatible-enchants.item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean("illegals.enchantments.incompatible-enchants.use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList("illegals.enchantments.incompatible-enchants.whitelisted-items", List.of("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARN, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.preventHopperBypass = config.getBoolean("illegals.enchantments.incompatible-enchants.prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.doPeriodicCheck = config.getBoolean("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = new Listener() {
                @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (determineLegality(event.getItem()) != ItemLegality.LEGAL) {
                        event.setCancelled(true);
                    }
                }
            };
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (doPeriodicCheck) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(item -> handleItem(item, determineLegality(item))), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.incompatible-enchants.enable", true);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();
            if (!enchantments.isEmpty()) {
                if (enchantments.contains(Enchantment.BINDING_CURSE) && enchantments.contains(Enchantment.VANISHING_CURSE))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.MULTISHOT) && enchantments.contains(Enchantment.PIERCING))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.RIPTIDE) && (enchantments.contains(Enchantment.LOYALTY) || enchantments.contains(Enchantment.CHANNELING)))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.ARROW_INFINITE) && enchantments.contains(Enchantment.MENDING))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.SILK_TOUCH) && enchantments.contains(Enchantment.LOOT_BONUS_BLOCKS))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.DEPTH_STRIDER) && enchantments.contains(Enchantment.FROST_WALKER))
                    return ItemLegality.ILLEGAL;
                if (DAMAGE_ENCHANTS.stream().filter(enchantments::contains).count() > 1L)
                    return ItemLegality.ILLEGAL;
                if (PROTECT_ENCHANTS.stream().filter(enchantments::contains).count() > 1L)
                    return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        switch (checkResult) {
            case CONTAINS_ILLEGAL -> itemStack.setType(Material.AIR);
            case ILLEGAL -> {
                final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();

                if (enchantments.contains(Enchantment.BINDING_CURSE) && enchantments.contains(Enchantment.VANISHING_CURSE))
                    itemStack.removeEnchantment(Enchantment.BINDING_CURSE);
                if (enchantments.contains(Enchantment.MULTISHOT) && enchantments.contains(Enchantment.PIERCING))
                    itemStack.removeEnchantment(Enchantment.MULTISHOT);
                if (enchantments.contains(Enchantment.RIPTIDE) && (enchantments.contains(Enchantment.LOYALTY) || enchantments.contains(Enchantment.CHANNELING)))
                    itemStack.removeEnchantment(Enchantment.RIPTIDE);
                if (enchantments.contains(Enchantment.MENDING) && enchantments.contains(Enchantment.ARROW_INFINITE))
                    itemStack.removeEnchantment(Enchantment.ARROW_INFINITE);
                if (enchantments.contains(Enchantment.SILK_TOUCH) && enchantments.contains(Enchantment.LOOT_BONUS_BLOCKS))
                    itemStack.removeEnchantment(Enchantment.LOOT_BONUS_BLOCKS);
                if (enchantments.contains(Enchantment.DEPTH_STRIDER) && enchantments.contains(Enchantment.FROST_WALKER))
                    itemStack.removeEnchantment(Enchantment.FROST_WALKER);

                if (enchantments.contains(Enchantment.DAMAGE_ALL)) { // Prefer keeping Sharpness enchantment if present
                    DAMAGE_ENCHANTS.stream().filter(enchant -> enchant != Enchantment.DAMAGE_ALL).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(Enchantment.DAMAGE_ARTHROPODS) && enchantments.contains(Enchantment.DAMAGE_UNDEAD)) {
                    itemStack.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
                }

                if (enchantments.contains(Enchantment.PROTECTION_ENVIRONMENTAL)) { // Prefer keeping Protection enchantment if present
                    PROTECT_ENCHANTS.stream().filter(enchant -> enchant != Enchantment.PROTECTION_ENVIRONMENTAL).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(Enchantment.PROTECTION_EXPLOSIONS)) { // If protection is present, prefer blast protection
                    PROTECT_ENCHANTS.stream().filter(enchant -> enchant != Enchantment.PROTECTION_EXPLOSIONS).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(Enchantment.PROTECTION_PROJECTILE) && enchantments.contains(Enchantment.PROTECTION_FIRE)) {
                    itemStack.removeEnchantment(Enchantment.PROTECTION_FIRE); // If protection and blast protection is not present, prefer projectile protection
                }
            }
        }
    }
}
