package me.moomoo.anarchyexploitfixes.modules.patches;

import de.tr7zw.changeme.nbtapi.NBTCompound;
import de.tr7zw.changeme.nbtapi.NBTCompoundList;
import de.tr7zw.changeme.nbtapi.NBTItem;
import de.tr7zw.changeme.nbtapi.iface.ReadWriteNBT;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.*;
import java.util.stream.Collectors;

import static me.moomoo.anarchyexploitfixes.utils.LogUtil.materialNotRecognized;

public class BeehiveCoordinates implements AEFModule, Listener {

    private final Set<String> entityDataTags;
    private final Set<Material> beehiveTypes;

    public BeehiveCoordinates() {
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.remove-beehive-coordinates.enable", """
                Patches an exploit that allows players to obtain another player's coordinates\s
                by trading them for beehives or beenests.\s
                If the traded item contains any bees, the stored bee's NBT data could then be read from the item.\s
                This data includes, but is not limited to:\s
                 - UID of the world the bee was first spawned into existence\s
                 - XYZ coordinates of where the bee was first spawned into existence\s
                 - XYZ coordinates of where the bee last visited a flower\s
                 - XYZ coordinates of where the bee has its hive\s
                 - XYZ of the bee's last coordinates before entering it's hive.""");
        this.entityDataTags = new HashSet<>(config.getList("patches.remove-beehive-coordinates.tags", Arrays.asList(
                "Pos", "HivePos", "FlowerPos", "Paper.Origin", "Paper.OriginWorld", "WorldUUIDMost", "WorldUUIDLeast"),
                "The NBT tags to filter from the item. These are the Keys that hold the position data.\n" +
                "You may add more tags you want removed here."));
        this.beehiveTypes = config.getList("patches.remove-beehive-coordinates.beehive-types-to-check",
                        List.of("BEEHIVE", "BEE_NEST"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        materialNotRecognized(Level.WARN, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
    }

    @Override
    public String name() {
        return "remove-beehive-coordinates";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.remove-beehive-coordinates.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void handleBeehiveIfPresent(ItemStack item) {
        if (item == null || !beehiveTypes.contains(item.getType())) return;

        NBTItem nbtBeehive = new NBTItem(item);
        if (!nbtBeehive.hasTag("BlockEntityTag")) return;

        NBTCompound blockEntityCompound = nbtBeehive.getCompound("BlockEntityTag");
        if (blockEntityCompound == null) return;

        NBTCompoundList beeList = blockEntityCompound.getCompoundList("Bees");
        if (beeList == null) return;

        for (ReadWriteNBT nbtBee : beeList) {
            ReadWriteNBT beeEntityData = nbtBee.getCompound("EntityData");
            if (beeEntityData != null) {
                entityDataTags.forEach(beeEntityData::removeKey);
            }
        }

        nbtBeehive.applyNBT(item);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        player.getInventory().forEach(this::handleBeehiveIfPresent);
        player.getEnderChest().forEach(this::handleBeehiveIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBeehiveIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBeehiveIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleBeehiveIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        event.getInventory().forEach(this::handleBeehiveIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        handleBeehiveIfPresent(event.getCursor());
        handleBeehiveIfPresent(event.getCurrentItem());
        event.getInventory().forEach(this::handleBeehiveIfPresent);
        event.getWhoClicked().getInventory().forEach(this::handleBeehiveIfPresent);
    }
}
