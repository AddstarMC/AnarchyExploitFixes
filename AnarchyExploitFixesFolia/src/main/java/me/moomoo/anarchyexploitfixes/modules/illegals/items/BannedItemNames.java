package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedItemNames implements IllegalItemModule {

    private final Set<Component> coloredNames;
    private final Set<String> plainTextNames;

    public BannedItemNames() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Resets an item's name if configured in the config. Bypass permission: " + bypassPermission().get());
        this.plainTextNames = new HashSet<>(config.getList(configPath() + ".plain-names",
                List.of("Super Insane Mega Sussy Item")));
        this.coloredNames = config.getList(configPath() + ".color-sensitive-names",
                        List.of("<bold><aqua>PvP KIT V2"))
                .stream()
                .map(MiniMessage.miniMessage()::deserialize)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String configPath() {
        return "illegals.banned-item-names";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_BANNEDNAME;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir() || !itemStack.hasItemMeta()) {
            return ItemLegality.LEGAL;
        }

        final Component displayName = itemStack.displayName();
        if (coloredNames.contains(displayName) || plainTextNames.contains(PlainTextComponentSerializer.plainText().serialize(displayName))) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult != ItemLegality.LEGAL) {
            itemStack.editMeta(meta -> meta.displayName(null));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPrepareResult(PrepareResultEvent event) {
        if (CachingPermTool.hasPermission(bypassPermission(), event.getView().getPlayer())) return;

        ItemStack resultItem = event.getResult();
        if (determineLegality(resultItem) == ItemLegality.ILLEGAL) {
            handleItem(resultItem, ItemLegality.ILLEGAL);
            event.setResult(resultItem);
        }
    }
}
