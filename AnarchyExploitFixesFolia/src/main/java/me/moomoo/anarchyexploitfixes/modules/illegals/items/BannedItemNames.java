package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.models.FastPermTool;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedItemNames implements IllegalItemModule {

    private final Set<Component> coloredNames;
    private final Set<String> plainTextNames;

    public BannedItemNames() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.banned-item-names.enable", "Resets an item's name if configured in the config.");
        this.plainTextNames = new HashSet<>(config.getList("illegals.banned-item-names.plain-names",
                List.of("Super Insane Mega Sussy Item")));
        this.coloredNames = config.getList("illegals.banned-item-names.color-sensitive-names",
                        List.of("<bold><aqua>PvP KIT V2"))
                .stream()
                .map(serialized -> MiniMessage.miniMessage().deserialize(serialized))
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "banned-item-names";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.banned-item-names.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public ItemCheckResult itemCheckResult(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir() || !itemStack.hasItemMeta()) {
            return ItemCheckResult.FINE;
        }

        final Component displayName = itemStack.displayName();
        if (coloredNames.contains(displayName) || plainTextNames.contains(PlainTextComponentSerializer.plainText().serialize(displayName))) {
            return ItemCheckResult.IS_ILLEGAL;
        }

        return ItemCheckResult.FINE;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemCheckResult checkResult) {
        if (checkResult != ItemCheckResult.FINE) {
            itemStack.editMeta(meta -> meta.displayName(null));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPrepareResult(PrepareResultEvent event) {
        if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getView().getPlayer())) return;

        ItemStack resultItem = event.getResult();
        if (itemCheckResult(resultItem) == ItemCheckResult.IS_ILLEGAL) {
            handleItem(resultItem, ItemCheckResult.IS_ILLEGAL);
            event.setResult(resultItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getWhoClicked())) return;
        
        handleItem(event.getCurrentItem(), itemCheckResult(event.getCurrentItem()));
        handleItem(event.getCursor(), itemCheckResult(event.getCursor()));
        for (ItemStack itemStack : event.getInventory()) {
            handleItem(itemStack, itemCheckResult(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAttack(PrePlayerAttackEntityEvent event) {
        if (!event.willAttack()) return;
        ItemStack attackItem = event.getPlayer().getActiveItem();
        final ItemCheckResult result = itemCheckResult(attackItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            event.setCancelled(true);
            handleItem(attackItem, result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemCheckResult result = itemCheckResult(droppedItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemCheckResult result = itemCheckResult(event.getItem());
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            event.setCancelled(true);
            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemCheckResult result = itemCheckResult(handItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            event.setCancelled(true);
            handleItem(handItem, result);
        }
    }
}
