package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.models.FastPermTool;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedMaterials implements IllegalItemModule {

    private final Set<Material> bannedMaterials;
    private final boolean shouldDelete, checkStored;

    public BannedMaterials() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.ban-specific-materials.enable",
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL.get());
        this.shouldDelete = config.getBoolean("illegals.ban-specific-materials.delete-illegals", false);
        this.checkStored = config.getBoolean("illegals.ban-specific-materials.check-stored-items", false);
        this.bannedMaterials = config.getList("illegals.ban-specific-materials.banned-materials", List.of(
                        "CHAIN_COMMAND_BLOCK",
                        "COMMAND_BLOCK",
                        "COMMAND_BLOCK_MINECART",
                        "REPEATING_COMMAND_BLOCK",
                        "BEDROCK",
                        "BARRIER",
                        "STRUCTURE_BLOCK",
                        "STRUCTURE_VOID",
                        "END_PORTAL_FRAME",
                        "END_PORTAL",
                        "NETHER_PORTAL",
                        "LIGHT"))
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARN, name(), confMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "ban-specific-materials";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-materials.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public ItemCheckResult checkItem(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemCheckResult.FINE;
        }

        if (bannedMaterials.contains(itemStack.getType())) {
            return ItemCheckResult.IS_ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (checkItem(stored) != ItemCheckResult.FINE) {
                        return ItemCheckResult.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemCheckResult.FINE;
    }

    @Override
    public void takeAction(ItemStack itemStack, ItemCheckResult result) {
        if (result != ItemCheckResult.FINE) {
            if (shouldDelete) itemStack.setType(Material.AIR);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getWhoClicked())) return;

        takeAction(event.getCurrentItem(), checkItem(event.getCurrentItem()));
        takeAction(event.getCursor(), checkItem(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            takeAction(itemStack, checkItem(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAttack(PrePlayerAttackEntityEvent event) {
        if (!event.willAttack()) return;
        ItemStack attackItem = event.getPlayer().getActiveItem();
        final ItemCheckResult result = checkItem(attackItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(attackItem, result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemCheckResult result = checkItem(droppedItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            takeAction(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemCheckResult result = checkItem(event.getItem());
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemCheckResult result = checkItem(handItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            event.setCancelled(true);
            takeAction(handItem, result);
        }
    }
}
