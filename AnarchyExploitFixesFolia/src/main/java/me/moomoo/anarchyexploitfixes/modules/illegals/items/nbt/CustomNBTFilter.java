package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.models.FastPermTool;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.slf4j.event.Level;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class CustomNBTFilter implements IllegalItemModule {

    private final Set<String> illegalTags;
    private final Set<Material> whitelistedTypes;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, checkStored, preventHopperBypass, delete;

    public CustomNBTFilter() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.nbt.ban-custom-tags.enable",
                "Deletes items that have one or more of the configured tags.\n" +
                        "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM.get());
        this.delete = config.getBoolean("illegals.nbt.ban-custom-tags.delete-item", true);
        this.checkStored = config.getBoolean("illegals.nbt.ban-custom-tags.check-stored-items", false);
        this.illegalTags = new HashSet<>(config.getList("illegals.nbt.ban-custom-tags.tags", List.of("dmg"),
                "The exact, case sensitive value of the nbt tag."));
        this.useWhitelist = config.getBoolean("illegals.nbt.ban-custom-tags.item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean("illegals.nbt.ban-custom-tags.use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList("illegals.nbt.ban-custom-tags.whitelisted-items", List.of("GOLDEN_APPLE"))
                .stream()
                .map(configuredItem -> {
                    try {
                        return Material.valueOf(configuredItem);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARN, name(), configuredItem);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.preventHopperBypass = config.getBoolean("illegals.nbt.ban-custom-tags.prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.doPeriodicCheck = config.getBoolean("illegals.nbt.ban-custom-tags.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.nbt.ban-custom-tags.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "nbt.ban-custom-tags";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = new Listener() {
                @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (itemCheckResult(event.getItem()) != ItemCheckResult.FINE) {
                        event.setCancelled(true);
                    }
                }
            };
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (doPeriodicCheck) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(item -> handleItem(item, itemCheckResult(item))), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.nbt.ban-custom-tags.enable", false);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public ItemCheckResult itemCheckResult(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemCheckResult.FINE;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            for (String key : new NBTItem(itemStack).getKeys()) {
                if (illegalTags.contains(key)) {
                    return ItemCheckResult.IS_ILLEGAL;
                }
            }
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (itemCheckResult(stored) != ItemCheckResult.FINE) {
                        return ItemCheckResult.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemCheckResult.FINE;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemCheckResult checkResult) {
        if (checkResult != ItemCheckResult.FINE) {
            if (delete) itemStack.setType(Material.AIR);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM, event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), itemCheckResult(event.getCurrentItem()));
        handleItem(event.getCursor(), itemCheckResult(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            handleItem(itemStack, itemCheckResult(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAttack(PrePlayerAttackEntityEvent event) {
        if (!event.willAttack()) return;
        ItemStack attackItem = event.getPlayer().getActiveItem();
        final ItemCheckResult result = itemCheckResult(attackItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(attackItem, result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemCheckResult result = itemCheckResult(droppedItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM, event.getPlayer())) return;

            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemCheckResult result = itemCheckResult(event.getItem());
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemCheckResult result = itemCheckResult(handItem);
        if (result != ItemCheckResult.FINE) {
            if (FastPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(handItem, result);
        }
    }
}
