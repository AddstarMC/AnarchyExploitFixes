package me.moomoo.anarchyexploitfixes.modules.preventions.withers;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.slf4j.event.Level;

import java.util.HashMap;
import java.util.Map;

public class WitherSpawningAtSpawn implements AEFModule, Listener {

    private final Map<String, Integer> worldsAndTheirRadiuses = new HashMap<>();
    private final boolean playersShouldBeInformed;

    public WitherSpawningAtSpawn() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.withers.disable-wither-spawning-at-spawn.enable","Only enable if you must.");
        this.playersShouldBeInformed = config.getBoolean("preventions.withers.disable-wither-spawning-at-spawn.inform-players", true);
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", 5000);
        defaults.put("world_nether", 5000);
        defaults.put("world_the_end", 5000);
        ConfigSection section = config.getConfigSection("preventions.withers.disable-wither-spawning-at-spawn.worlds", defaults);
        for (String world : section.getKeys(false)) {
            try {
                Integer radius = Integer.valueOf(section.getString(world));
                this.worldsAndTheirRadiuses.put(world, radius);
            } catch (NumberFormatException e) {
                LogUtil.moduleLog(Level.WARN, name(), "Radius for world '" + world + "' is not a valid integer.");
            }
        }
    }

    @Override
    public String name() {
        return "disable-wither-spawning-at-spawn";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.withers.disable-wither-spawning-at-spawn.enable", false)
                && !worldsAndTheirRadiuses.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreatureSpawn(CreatureSpawnEvent event) {
        if (event.getEntityType() != EntityType.WITHER) return;
        if (event.getSpawnReason() != CreatureSpawnEvent.SpawnReason.BUILD_WITHER) return;

        final Entity wither = event.getEntity();
        final String world = wither.getWorld().getName();
        if (!worldsAndTheirRadiuses.containsKey(world)) return;

        final Integer disabledRadius = worldsAndTheirRadiuses.get(world);
        final Location witherLocation = wither.getLocation();
        if (LocationUtil.getDistance2DTo00(witherLocation) > disabledRadius) return;

        event.setCancelled(true);

        if (playersShouldBeInformed) {
            for (Player nearbyPlayer : witherLocation.getNearbyPlayers(8, 8, 8)) {
                nearbyPlayer.sendMessage(AnarchyExploitFixes.getLang(nearbyPlayer.locale()).preventions_witherSpawningDisabledInRadius
                        .replaceText(TextReplacementConfig.builder().matchLiteral("%radius%").replacement(disabledRadius.toString()).build()));
            }
        }
    }
}
