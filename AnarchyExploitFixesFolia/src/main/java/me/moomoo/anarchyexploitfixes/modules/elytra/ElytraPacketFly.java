package me.moomoo.anarchyexploitfixes.modules.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.UUID;

public class ElytraPacketFly implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<UUID, Integer> elytraOpenCounts = new HashMap<>();
    private final int maxElytraOpensPer10s;
    private final boolean shouldCheckPermission, playerShouldBeNotified, playerShouldBeKickedInstead;

    public ElytraPacketFly() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("elytra.packet-elytra-fly.patch-packet-elytra-fly","Patches the future/rusherhack/kamiblue 2b2t elytra fly exploit");
        this.shouldCheckPermission = config.getBoolean("elytra.packet-elytra-fly.use-bypass-permission", false);
        this.maxElytraOpensPer10s = config.getInt("elytra.packet-elytra-fly.max-elytra-opens-per-10-seconds", 25, "Will only allow players to go about 85km/h on kami blue, and won't even work on rusherhack. Recommended to not go lower as there could be false positives.");
        this.playerShouldBeNotified = config.getBoolean("elytra.packet-elytra-fly.notify-player-to-disable-packetfly", true, "Configure message in lang folder.");
        this.playerShouldBeKickedInstead = config.getBoolean("elytra.packet-elytra-fly.kick-instead-of-remove-elytra", false, "If enabled, the plugin will not remove elytra from the player, but simply disconnect from the server.");
    }

    @Override
    public String name() {
        return "packet-elytra-fly";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.packet-elytra-fly.patch-packet-elytra-fly", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler
    private void onElytraOpen(EntityToggleGlideEvent event) {
        if (!(event.getEntity() instanceof Player player)) return;
        if (shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;
        final UUID playerUniqueID = player.getUniqueId();

        final Integer elytraOpens = elytraOpenCounts.get(playerUniqueID);
        if (elytraOpens != null) {
            if (elytraOpens > maxElytraOpensPer10s) {
                if (playerShouldBeKickedInstead) {
                    plugin.getServer().getRegionScheduler().run(
                            plugin, player.getLocation(), task -> player.kick(AnarchyExploitFixes.getLang(player.locale()).disablePacketElytraFly)
                    );
                } else {
                    plugin.getServer().getRegionScheduler().run(plugin, player.getLocation(), task -> {
                        final ItemStack chestplate = player.getInventory().getChestplate();
                        if (chestplate != null && chestplate.getType().equals(Material.ELYTRA)) {
                            // remove elytra from chestplate
                            player.getInventory().setChestplate(null);
                            // drop elytra at player position
                            player.getWorld().dropItemNaturally(player.getLocation(), chestplate);
                            if (playerShouldBeNotified) {
                                player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
                                player.sendMessage(AnarchyExploitFixes.getLang(player.locale()).disablePacketElytraFly);
                            }
                        }
                    });
                }
            } else {
                elytraOpenCounts.merge(playerUniqueID, 1, Integer::sum);
                plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, task -> elytraOpenCounts.put(playerUniqueID, elytraOpenCounts.get(playerUniqueID) - 1), 200L);
            }
        } else {
            elytraOpenCounts.put(playerUniqueID, 1);
            plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, task -> elytraOpenCounts.put(playerUniqueID, elytraOpenCounts.get(playerUniqueID) - 1), 200L);
        }
    }
}
