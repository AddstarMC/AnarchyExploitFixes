package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.time.Duration;
import java.util.UUID;

public class ElytraPacketFly implements AnarchyExploitFixesModule, Listener {

    private final Cache<UUID, Integer> elytraOpenCounts;
    private final int maxElytraOpensPerTime;
    private final boolean shouldCheckPermission, notify, kickPlayer;

    public ElytraPacketFly() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("elytra.packet-elytra-fly.patch-packet-elytra-fly",
                "Patches the future/rusherhack/kamiblue 2b2t elytra fly exploit");
        this.shouldCheckPermission = config.getBoolean("elytra.packet-elytra-fly.use-bypass-permission", false);
        this.maxElytraOpensPerTime = config.getInt("elytra.packet-elytra-fly.max-elytra-opens-per-time", 25, """
                The fly exploit causes the player to constantly toggle gliding.\s
                If too many glide toggles occur within a timeframe, they are most likely using PacketFly.\s
                Still triggers false positives when players are jump sprinting with elytras, so play around with the values.""");
        this.elytraOpenCounts = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(
                config.getInt("elytra.packet-elytra-fly.time-in-seconds", 8,
                        "Will only allow players to go about 85km/h.")
        )).build();
        this.notify = config.getBoolean("elytra.packet-elytra-fly.notify-player-to-disable-packetfly", true,
                "Configure message in lang folder.");
        this.kickPlayer = config.getBoolean("elytra.packet-elytra-fly.kick-instead-of-remove-elytra", false,
                "If enabled, player will be kicked instead of dropping their elytra.");
    }

    @Override
    public String name() {
        return "packet-elytra-fly";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.packet-elytra-fly.patch-packet-elytra-fly", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onElytraOpen(EntityToggleGlideEvent event) {
        if (event.getEntityType() != EntityType.PLAYER) return;
        if (shouldCheckPermission && event.getEntity().hasPermission(AEFPermission.BYPASS_ELYTRA.get())) return;

        Integer elytraOpens = elytraOpenCounts.getIfPresent(event.getEntity().getUniqueId());
        if (elytraOpens == null) elytraOpens = 0;
        elytraOpens++;
        elytraOpenCounts.put(event.getEntity().getUniqueId(), elytraOpens);

        if (elytraOpens > maxElytraOpensPerTime) {
            Player player = (Player) event.getEntity();
            elytraOpenCounts.invalidate(player.getUniqueId());

            if (kickPlayer) {
                player.getScheduler().run(AnarchyExploitFixes.getInstance(),
                        kick -> player.kick(AnarchyExploitFixes.getLang(player.locale()).elytra_disablePacketElytraFly), null);
                return;
            }

            PlayerInventory playerInv = player.getInventory();
            if (MaterialUtil.isElytra(playerInv.getChestplate())) {
                ItemStack elytra = playerInv.getChestplate();
                playerInv.setChestplate(null);
                player.getWorld().dropItemNaturally(player.getLocation(), elytra);
            }

            if (notify) {
                player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_disablePacketElytraFly);
            }
        }
    }
}
