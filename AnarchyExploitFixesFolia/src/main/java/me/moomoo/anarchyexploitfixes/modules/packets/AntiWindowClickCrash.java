package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.slf4j.event.Level;

public class AntiWindowClickCrash extends PacketListenerAbstract implements AEFModule {

    public AntiWindowClickCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("patches.window-click-crash-patch.enable",
                "Patches Container click / Window click crash exploit.");
    }

    @Override
    public String name() {
        return "window-click-crash-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getConfiguration().getBoolean("patches.window-click-crash-patch.enable", true)) {
            if (AnarchyExploitFixes.getConfiguration().packet_events_disabled) {
                LogUtil.moduleLog(Level.WARN, name(), "Not patching exploit because you disabled packet events in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        final WrapperPlayClientClickWindow packet = new WrapperPlayClientClickWindow(event);

        final int button = packet.getButton();

        if (button < 0 || button > 9 && button != 40 && button != 99) {
            event.setCancelled(true);
            return;
        }

        final int slot = packet.getSlot();

        if (slot != -999 && slot != -1) {
            if (slot < 0) event.setCancelled(true);
            return;
        }

        if (button == 40) {
            event.setCancelled(true);
            return;
        }

        switch (packet.getWindowClickType()) {
            case SWAP, PICKUP_ALL -> event.setCancelled(true);
            case THROW -> {
                if (slot == -1) event.setCancelled(true);
            }
            case QUICK_MOVE -> {
                if (slot == -999) event.setCancelled(true);
            }
        }
    }
}
