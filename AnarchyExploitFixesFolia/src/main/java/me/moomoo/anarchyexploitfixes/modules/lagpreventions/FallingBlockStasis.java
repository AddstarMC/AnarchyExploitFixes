package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.World;
import org.bukkit.entity.FallingBlock;

import java.util.logging.Level;

public class FallingBlockStasis implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long check_period_in_ticks;
    private final int max_alive_time;
    private final boolean logIsEnabled;
    
    public FallingBlockStasis() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("lag-preventions.prevent-falling-block-stasis-exploit.enable",
                "Patches a lag exploit using falling blocks and glitched piston heads: https://www.youtube.com/watch?v=y2CjPlvtj58");
        this.logIsEnabled = config.getBoolean("lag-preventions.prevent-falling-block-stasis-exploit.log", false);
        this.max_alive_time = config.getInt("lag-preventions.prevent-falling-block-stasis-exploit.falling-blocks-max-alive-time-in-ticks", 300,
                "(20 ticks = 1 second)");
        this.check_period_in_ticks = config.getInt("lag-preventions.prevent-falling-block-stasis-exploit.check-period-in-seconds", 120,
                "How frequently we should check for all projectile's alive time") * 20L;
    }

    @Override
    public String name() {
        return "falling-block-stasis";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), check_period_in_ticks, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-falling-block-stasis-exploit.enable", true);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (FallingBlock fallingBlock : world.getEntitiesByClass(FallingBlock.class)) {
                if (fallingBlock.getTicksLived() > max_alive_time) {
                    fallingBlock.getScheduler().run(plugin, kill -> {
                        fallingBlock.remove();
                        if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed falling block at x:"
                                + fallingBlock.getLocation().getX() + " y:" + fallingBlock.getLocation().getY() + " z:" + fallingBlock.getLocation().getZ()
                                + " in "+fallingBlock.getWorld().getName()+" because it was alive for more than " + max_alive_time + " ticks.");
                    }, null);
                }
            }
        }
    }
}
