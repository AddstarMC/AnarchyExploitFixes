package me.moomoo.anarchyexploitfixes.modules.misc;

import com.ibm.icu.text.RuleBasedNumberFormat;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.NamespacedKeys;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;

import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicInteger;

public class FirstJoinMessages implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Config config;
    private final HashMap<Locale, RuleBasedNumberFormat> formats = new HashMap<>();
    private final AtomicInteger uniquePlayerCount = new AtomicInteger(0);
    private final boolean logFirstJoin;

    public FirstJoinMessages() {
        shouldEnable();
        this.config = AnarchyExploitFixes.getConfiguration();
        config.addComment("misc.join-leave-messages.first-join-messages.enable",
                "Configure messages in lang folder.");
        this.plugin = AnarchyExploitFixes.getInstance();
        // prevent lag by getting total player number once and then counting up manually, as always getting all players is resource intense
        plugin.getServer().getGlobalRegionScheduler().run(plugin,
                getCount -> uniquePlayerCount.set(plugin.getServer().getOfflinePlayers().length));
        this.logFirstJoin = config.getBoolean("misc.join-leave-messages.first-join-messages.show-in-console", true);
        AnarchyExploitFixes.getLanguageCacheMap().keySet().stream()
                .map(availableLang -> Locale.forLanguageTag(availableLang.replace("_", "-")))
                .forEach(locale -> formats.put(locale, new RuleBasedNumberFormat(locale, RuleBasedNumberFormat.ORDINAL)));
    }

    @Override
    public String name() {
        return "first-join-messages";
    }

    @Override
    public String category() {
        return "misc";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("misc.join-leave-messages.first-join-messages.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoin(PlayerJoinEvent event) {
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPlayedBefore()) return;
        if (joiningPlayer.hasPermission("anarchyexploitfixes.silentJoin")) return;

        final int joiningPlayersNumber = uniquePlayerCount.incrementAndGet();

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            onlinePlayer.getScheduler().execute(plugin, () -> {
                final PersistentDataContainer dataContainer = onlinePlayer.getPersistentDataContainer();
                if (
                        !dataContainer.has(NamespacedKeys.CONNECT_MSG_TOGGLE.key()) ? config.connectionMsgsAreOnByDefault :
                        dataContainer.get(NamespacedKeys.CONNECT_MSG_TOGGLE.key(), PersistentDataType.BOOLEAN)
                ) {
                    for (Component line : AnarchyExploitFixes.getLang(onlinePlayer.locale()).misc_firstJoinMessage) {
                        onlinePlayer.sendMessage(line
                                .replaceText(TextReplacementConfig.builder()
                                        .matchLiteral("%player%")
                                        .replacement(joiningPlayer.name())
                                        .build())
                                .replaceText(TextReplacementConfig.builder()
                                        .matchLiteral("%players_num%")
                                        .replacement(formatToOrdinal(onlinePlayer.locale(), joiningPlayersNumber))
                                        .build()));
                    }
                }
            }, null, 1L);
        }

        if (logFirstJoin) {
            for (Component line : AnarchyExploitFixes.getLang(joiningPlayer.locale()).misc_firstJoinMessage) {
                AnarchyExploitFixes.getUnprefixedLogger().info(line
                        .replaceText(TextReplacementConfig.builder()
                                .matchLiteral("%player%")
                                .replacement(joiningPlayer.name())
                                .build())
                        .replaceText(TextReplacementConfig.builder()
                                .matchLiteral("%players_num%")
                                .replacement(formatToOrdinal(joiningPlayer.locale(), joiningPlayersNumber))
                                .build())
                        .append(Component.text(" (" + joiningPlayer.locale() + ")")));
            }
        }
    }

    private String formatToOrdinal(Locale playerLocale, int number) {
        if (config.auto_lang && formats.containsKey(playerLocale)) {
            return formats.get(playerLocale).format(number, "%digits-ordinal");
        } else {
            return formats.get(config.default_lang).format(number, "%digits-ordinal");
        }
    }
}
