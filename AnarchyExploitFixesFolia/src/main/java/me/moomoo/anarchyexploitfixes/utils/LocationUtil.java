package me.moomoo.anarchyexploitfixes.utils;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.apache.commons.math3.util.FastMath;
import org.bukkit.Location;
import org.bukkit.World;

public class LocationUtil {

    private static final int X_MASK = 0x3FFFFFF;
    private static final long X_SHIFT = 38;
    private static final int Y_MASK = 0xFFF;
    private static final long Y_SHIFT = 26;
    private static final int Y_SHIFT_UNPACK = 20;
    private static final long Z_MASK = 0x3FFFFFF;
    private static final int Z_SHIFT_UNPACK = 6;

    public static long getLongFromCoordinates(int x, int y, int z) {
        return ((long) (x & X_MASK) << X_SHIFT) | ((long) (y & Y_MASK) << Y_SHIFT) | (z & Z_MASK);
    }

    public static int[] getCoordinatesFromLong(long combined) {
        int x = (int) (combined >> X_SHIFT);
        int y = (int) ((combined >> Y_SHIFT) & Y_MASK) << Y_SHIFT_UNPACK >> Y_SHIFT_UNPACK;
        int z = (int) (combined & Z_MASK) << Z_SHIFT_UNPACK >> Z_SHIFT_UNPACK;
        y = (y << Y_SHIFT_UNPACK) >> Y_SHIFT_UNPACK;
        z = (z << Z_SHIFT_UNPACK) >> Z_SHIFT_UNPACK;
        return new int[]{x, y, z};
    }

    public static double getDistanceTo00(Location location) {
        return FastMath.hypot(location.x(), location.z());
    }

    public static double getXZDistance(Location from, Location to) {
        double toX = to.x();
        double toZ = to.z();
        double fromX = from.x();
        double fromZ = from.z();

        final World.Environment toEnv = to.getWorld().getEnvironment();
        final World.Environment fromEnv = from.getWorld().getEnvironment();
        if (!toEnv.equals(fromEnv)) {
            if (fromEnv.equals(World.Environment.NETHER)) {
                fromX *= 8;
                fromZ *= 8;
            }
            if (toEnv.equals(World.Environment.NETHER)) {
                toX *= 8;
                toZ *= 8;
            }
        }

        return FastMath.hypot(toX - fromX, toZ - fromZ);
    }

    public static double getXYDistance(Location from, Location to) {
        double toX = to.x();
        double fromX = from.x();

        final World.Environment toEnv = to.getWorld().getEnvironment();
        final World.Environment fromEnv = from.getWorld().getEnvironment();
        if (!toEnv.equals(fromEnv)) {
            if (fromEnv.equals(World.Environment.NETHER))
                fromX *= 8;
            if (toEnv.equals(World.Environment.NETHER))
                toX *= 8;
        }

        return FastMath.hypot(toX - fromX, to.y() - from.y());
    }

    public static boolean isNetherCeiling(Location location) {
        return location.getWorld().getEnvironment().equals(World.Environment.NETHER)
                && location.y() > AnarchyExploitFixes.getConfiguration().nether_ceiling_max_y;
    }
}
