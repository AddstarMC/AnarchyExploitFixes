package me.moomoo.anarchyexploitfixes.utils;

import com.destroystokyo.paper.MaterialTags;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

public class MaterialUtil {

    public static boolean isLiquidBucket(ItemStack item) {
        if (item == null) return false;
        return isLiquidBucket(item.getType());
    }

    public static boolean isLiquidBucket(Material material) {
        if (material == null) return false;
        return switch (material) {
            case    WATER_BUCKET,
                    LAVA_BUCKET,
                    COD_BUCKET,
                    SALMON_BUCKET,
                    PUFFERFISH_BUCKET,
                    TROPICAL_FISH_BUCKET,
                    AXOLOTL_BUCKET,
                    TADPOLE_BUCKET,
                    POWDER_SNOW_BUCKET
                    -> true;
            default -> false;
        };
    }

    public static boolean isIndestructible(Material material) {
        return switch (material) {
            case    BEDROCK,
                    END_PORTAL_FRAME,
                    END_PORTAL,
                    REINFORCED_DEEPSLATE,
                    TRAPPED_CHEST,
                    STRUCTURE_BLOCK,
                    BARRIER,
                    COMMAND_BLOCK
                    -> true;
            default -> false;
        };
    }

    public static boolean isBook(ItemStack item) {
        if (item == null) return false;
        return isBook(item.getType());
    }

    public static boolean isBook(Material material) {
        if (material == null) return false;
        return switch (material) {
            case WRITABLE_BOOK, WRITTEN_BOOK -> true;
            default -> false;
        };
    }

    public static boolean isShulkerBox(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SHULKER_BOXES.isTagged(item);
    }

    public static boolean isHelmet(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.HELMETS.isTagged(item);
    }

    public static boolean isHelmet(Material material) {
        if (material == null) return false;
        return MaterialTags.HELMETS.isTagged(material);
    }

    public static boolean isChestplate(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.CHESTPLATES.isTagged(item);
    }

    public static boolean isChestplate(Material material) {
        if (material == null) return false;
        return MaterialTags.CHESTPLATES.isTagged(material);
    }

    public static boolean isLeggings(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.LEGGINGS.isTagged(item);
    }

    public static boolean isLeggings(Material material) {
        if (material == null) return false;
        return MaterialTags.LEGGINGS.isTagged(material);
    }

    public static boolean isBoots(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.BOOTS.isTagged(item);
    }

    public static boolean isBoots(Material material) {
        if (material == null) return false;
        return MaterialTags.BOOTS.isTagged(material);
    }

    public static boolean isAxe(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.AXES.isTagged(item);
    }

    public static boolean isAxe(Material material) {
        if (material == null) return false;
        return MaterialTags.AXES.isTagged(material);
    }

    public static boolean isHoe(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.HOES.isTagged(item);
    }

    public static boolean isHoe(Material material) {
        if (material == null) return false;
        return MaterialTags.HOES.isTagged(material);
    }

    public static boolean isPickaxe(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.PICKAXES.isTagged(item);
    }

    public static boolean isPickaxe(Material material) {
        if (material == null) return false;
        return MaterialTags.PICKAXES.isTagged(material);
    }

    public static boolean isShovel(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SHOVELS.isTagged(item);
    }

    public static boolean isShovel(Material material) {
        if (material == null) return false;
        return MaterialTags.SHOVELS.isTagged(material);
    }

    public static boolean isSword(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SWORDS.isTagged(item);
    }

    public static boolean isSword(Material material) {
        if (material == null) return false;
        return MaterialTags.SWORDS.isTagged(material);
    }

    public static boolean isSpawnEgg(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SPAWN_EGGS.isTagged(item);
    }

    public static boolean isSpawnEgg(Material material) {
        if (material == null) return false;
        return MaterialTags.SPAWN_EGGS.isTagged(material);
    }

    public static boolean isArmor(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.ARMOR.isTagged(item);
    }

    public static boolean isArmor(Material material) {
        if (material == null) return false;
        return MaterialTags.ARMOR.isTagged(material);
    }

    public static boolean isTool(ItemStack item) {
        if (item == null) return false;
        return isAxe(item) || isHoe(item) || isPickaxe(item) || isShovel(item);
    }

    public static boolean isTool(Material material) {
        if (material == null) return false;
        return isAxe(material) || isHoe(material) || isPickaxe(material) || isShovel(material);
    }

    public static boolean isElytra(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.ELYTRA);
    }

    public static boolean isTrident(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.TRIDENT);
    }

    public static boolean isCrossbow(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.CROSSBOW);
    }

    public static boolean isBow(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.BOW);
    }
}