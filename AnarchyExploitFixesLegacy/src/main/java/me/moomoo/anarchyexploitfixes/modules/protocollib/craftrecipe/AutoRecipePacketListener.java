package me.moomoo.anarchyexploitfixes.modules.protocollib.craftrecipe;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;

import java.time.Duration;
import java.util.UUID;

public class AutoRecipePacketListener extends PacketAdapter {

    private final Cache<UUID, Boolean> recipeCooldowns;

    protected AutoRecipePacketListener(AnarchyExploitFixes plugin, long craftingRecipeDelayInMillis) {
        super(plugin, ListenerPriority.NORMAL, PacketType.Play.Client.AUTO_RECIPE);
        this.recipeCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(craftingRecipeDelayInMillis)).build();
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary() || event.getPlayer() == null) return;

        final UUID playerUniqueID = event.getPlayer().getUniqueId();

        if (recipeCooldowns.getIfPresent(playerUniqueID) != null) {
            event.setCancelled(true);
        } else {
            recipeCooldowns.put(playerUniqueID, true);
        }
    }
}