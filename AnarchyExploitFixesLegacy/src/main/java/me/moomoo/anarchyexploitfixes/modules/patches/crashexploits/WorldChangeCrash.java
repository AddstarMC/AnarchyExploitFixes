package me.moomoo.anarchyexploitfixes.modules.patches.crashexploits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.models.ExpiringSet;
import org.apache.commons.math3.util.FastMath;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityTeleportEvent;

import java.time.Duration;
import java.util.UUID;
import java.util.logging.Level;

public class WorldChangeCrash implements AnarchyExploitFixesModule, Listener {

    private final ExpiringSet<UUID> recentWorldChangers;
    private final boolean logIsEnabled;

    public WorldChangeCrash() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.recentWorldChangers = new ExpiringSet<>(Duration.ofMillis(
                FastMath.max(config.getInt("patches.crash-exploits.prevent-fast-world-teleport-crash.teleport-delay-millis", 1000,
                        "Time in milliseconds until an entity can teleport to another world again."), 1)));
        config.addComment("patches.crash-exploits.prevent-fast-world-teleport-crash.enable",
                "Prevents crash methods that involve very fast teleporting between different worlds in a short time.");
        this.logIsEnabled = config.getBoolean("patches.crash-exploits.prevent-fast-world-teleport-crash.log", false);
    }

    @Override
    public String name() {
        return "prevent-fast-world-teleport-crash";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.crash-exploits.prevent-fast-world-teleport-crash.enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(EntityTeleportEvent event) {
        if (event.getTo() == null) return;
        if (event.getFrom().getWorld().getUID().equals(event.getTo().getWorld().getUID())) return;

        if (recentWorldChangers.contains(event.getEntity().getUniqueId())) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Cancelled too fast world teleport of entity: " +
                    event.getEntityType().name() + " at \n" +
                    "x: "+event.getEntity().getLocation().getX() + ", " +
                    "y: "+event.getEntity().getLocation().getY() + ", " +
                    "z: "+event.getEntity().getLocation().getZ() + ", " +
                    "world: "+event.getEntity().getLocation().getWorld().getName());
        } else {
            recentWorldChangers.add(event.getEntity().getUniqueId());
        }
    }
}
