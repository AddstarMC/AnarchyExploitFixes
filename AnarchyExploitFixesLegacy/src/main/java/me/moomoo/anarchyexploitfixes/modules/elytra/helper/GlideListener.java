package me.moomoo.anarchyexploitfixes.modules.elytra.helper;

import org.bukkit.Bukkit;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

public class GlideListener extends ElytraHelper implements Listener {

    public final Set<UUID> PLAYERS_GLIDING;

    public GlideListener() {
        this.PLAYERS_GLIDING = Bukkit.getOnlinePlayers().stream()
                .filter(LivingEntity::isGliding)
                .map(Player::getUniqueId)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onGlideToggle(EntityToggleGlideEvent event) {
        if (event.getEntityType() == EntityType.PLAYER) {
            if (event.isGliding()) {
                this.PLAYERS_GLIDING.add(event.getEntity().getUniqueId());
            } else {
                this.PLAYERS_GLIDING.remove(event.getEntity().getUniqueId());
            }
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onQuit(PlayerQuitEvent event) {
        this.PLAYERS_GLIDING.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        if (event.getPlayer().isGliding()) {
            this.PLAYERS_GLIDING.add(event.getPlayer().getUniqueId());
        } else {
            this.PLAYERS_GLIDING.remove(event.getPlayer().getUniqueId());
        }
    }
}
