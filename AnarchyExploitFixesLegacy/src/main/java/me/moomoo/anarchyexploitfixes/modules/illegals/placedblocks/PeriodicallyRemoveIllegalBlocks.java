package me.moomoo.anarchyexploitfixes.modules.illegals.placedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Skull;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;

public class PeriodicallyRemoveIllegalBlocks implements AnarchyExploitFixesModule, Runnable {

    private final AnarchyExploitFixes plugin;
    private final Set<Material> blocksToRemove = new HashSet<>();
    private final Set<String> exemptedWorlds;
    private final Material AIR, BEDROCK;
    private final long checkPeriod;
    private final double pauseTPS;
    private final int netherCeilY;
    private final boolean checkShouldPauseOnLowTPS;

    public PeriodicallyRemoveIllegalBlocks() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();

        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER"
            );
        } else {
            defaults = Arrays.asList("PLAYER_HEAD", "BEDROCK", "BARRIER", "COMMAND");
        }

        Config config = AnarchyExploitFixes.getConfiguration();
        List<String> configuredBlocksToRemove = config.getList("illegals.remove-placed-blocks.periodically.blocks-to-remove", defaults);
        config.addComment("illegals.remove-placed-blocks.periodically.blocks-to-remove",
                "Enter PLAYER_HEAD here if you want to remove placed playerheads.\nNOTE: ONLY applies to PLAYER_HEAD.\n" +
                        "For everything else you have to use correct Material enums for your Minecraft version.");
        for (String configuredBlock : configuredBlocksToRemove) {
            if (configuredBlock.equalsIgnoreCase("PLAYER_HEAD")) {
                blocksToRemove.addAll(MaterialUtil.PLAYER_HEADS);
            } else {
                try {
                    Material blockToRemove = Material.valueOf(configuredBlock);
                    blocksToRemove.add(blockToRemove);
                } catch (IllegalArgumentException e) {
                    LogUtil.materialNotRecognized(Level.WARNING, name(), configuredBlock);
                }
            }
        }
        this.exemptedWorlds = new HashSet<>(config.getList("illegals.remove-placed-blocks.periodically.exempted-worlds", Arrays.asList("exampleworld1", "exampleworld2")));
        this.checkPeriod = config.getInt("illegals.remove-placed-blocks.periodically.check-period-in-seconds", 10) * 20L;
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-placed-blocks.periodically.pause-on-low-TPS", true);
        this.pauseTPS = config.getDouble("illegals.remove-placed-blocks.periodically.pause-TPS", 14.0);
        this.netherCeilY = config.nether_ceiling_max_y;

        this.AIR = XMaterial.AIR.parseMaterial();
        this.BEDROCK = XMaterial.BEDROCK.parseMaterial();
    }

    @Override
    public String name() {
        return "remove-placed-blocks.periodically";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-placed-blocks.periodically.enable", false);
    }

    @Override
    public void run() {
        if (checkShouldPauseOnLowTPS && (plugin.tpsCache.getTPS() <= pauseTPS)) return;

        for (World world : plugin.getServer().getWorlds()) {
            if (exemptedWorlds.contains(world.getName())) continue;

            final int minY = ChunkUtil.guessMinWorldHeight(world);
            final int maxY = world.getMaxHeight();
            final boolean inNether = world.getEnvironment() == World.Environment.NETHER;

            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                for (int x = 0; x < 16; x++) {
                    for (int z = 0; z < 16; z++) {
                        for (int y = minY; y < maxY; y++) {
                            Block block = chunk.getBlock(x, y, z);
                            if (!blocksToRemove.contains(block.getType())) continue;

                            // If is skull, check if it is player head
                            if (MaterialUtil.PLAYER_HEADS.contains(block.getType())) {
                                Skull skull = (Skull) block.getState();
                                if (skull.getSkullType() == SkullType.PLAYER || skull.hasOwner()) {
                                    block.setType(AIR, false);
                                }
                                continue;
                            }

                            // If is bedrock, make sure not to delete naturally generated
                            if (block.getType() == BEDROCK) {
                                if (y > minY + 4) { // offset to not delete natural bedrock floor
                                    if (inNether) {
                                        // offset to not delete bedrock ceiling
                                        if (y < netherCeilY - 5) block.setType(AIR, false);
                                    } else {
                                        block.setType(AIR, false);
                                    }
                                }
                                continue;
                            }

                            // Everything else may be removed
                            block.setType(AIR, false);
                        }
                    }
                }

            }
        }
    }
}
