package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.EntityUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;

public class AntiBoatFly extends PacketListenerAbstract implements AEFModule {

    private final AnarchyExploitFixes plugin;
    private final Map<UUID, Integer> boatLevels = new HashMap<>();
    private final int maxEntityPacketsPer10s;
    private final boolean logIsEnabled, shouldKickPlayer;

    public AntiBoatFly() {
        super(PacketListenerPriority.LOW);
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.boatfly-patch.enable", "Patches Futureclient / Rusherhack boat fly exploit.");
        this.logIsEnabled = config.getBoolean("patches.boatfly-patch.log", true);
        this.maxEntityPacketsPer10s = config.getInt("patches.boatfly-patch.max-entity-packets-per-10s", 15);
        this.shouldKickPlayer = config.getBoolean("patches.boatfly-patch.kick-player-if-boatflying", false);
    }

    @Override
    public String name() {
        return "boatfly-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getConfiguration().getBoolean("patches.boatfly-patch.enable", false)) {
            if (AnarchyExploitFixes.getConfiguration().packet_events_disabled) {
                LogUtil.moduleLog(Level.WARNING, name(), "Not patching exploit because you disabled packet events in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.VEHICLE_MOVE) return;
        final Player player = (Player) event.getPlayer();
        if (player == null) return;
        final Entity vehicle = player.getVehicle();
        if (vehicle == null || !EntityUtil.BOATS.contains(vehicle.getType())) return;

        final UUID uuid = player.getUniqueId();

        if (boatLevels.computeIfAbsent(uuid, k -> 0) <= maxEntityPacketsPer10s) {
            boatLevels.merge(uuid, 1, Integer::sum);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,
                    () -> boatLevels.put(uuid, boatLevels.get(uuid) - 1), 200L);
            return;
        }

        plugin.getServer().getScheduler().runTask(plugin, vehicle::remove);

        if (logIsEnabled)
            LogUtil.moduleLog(Level.INFO, name(), "Prevented player '"+player.getName()+"' from boat flying");
        if (shouldKickPlayer)
            plugin.getServer().getScheduler().runTask(plugin, () -> player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).misc_MaskedKickMessage));
    }
}
