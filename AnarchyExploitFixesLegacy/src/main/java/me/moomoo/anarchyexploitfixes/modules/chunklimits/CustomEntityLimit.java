package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class CustomEntityLimit implements AnarchyExploitFixesModule, Runnable, Listener {

    private final AnarchyExploitFixes plugin;
    private final Map<EntityType, Integer> entityLimits = new HashMap<>();
    private final long checkPeriod;
    private final boolean logIsEnabled;

    public CustomEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.custom-limit.enable",
                "Limit specific entity types per chunk.");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.custom-limit.log-removals", true);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.custom-limit.check-period-in-ticks", 1200,
                "Check all chunks every x ticks.");

        Map<String, Integer> universal = new HashMap<>();
        universal.put("WITHER", 16);
        universal.put("WITHER_SKULL", 10);
        universal.put("BLAZE", 10);
        universal.put("CREEPER", 10);
        universal.put("ENDERMAN", 10);
        universal.put("MAGMA_CUBE", 10);
        universal.put("PHANTOM", 10);
        universal.put("SLIME", 10);
        universal.put("SKELETON", 10);
        universal.put("STRAY", 10);
        universal.put("WITHER_SKELETON", 10);
        universal.put("SPIDER", 10);
        universal.put("CAVE_SPIDER", 10);
        universal.put("ZOMBIE", 10);
        universal.put("DROWNED", 10);
        universal.put("HUSK", 10);
        universal.put("PIGLIN_BRUTE", 10);
        universal.put("ZOMBIFIED_PIGLIN", 20);
        universal.put("HOGLIN", 10);
        universal.put("ZOGLIN", 10);
        universal.put("CHICKEN", 10);
        universal.put("PIG", 10);
        universal.put("SHEEP", 10);
        universal.put("COW", 10);
        universal.put("MUSHROOM_COW", 10);
        universal.put("WOLF", 10);
        universal.put("DONKEY", 10);
        universal.put("HORSE", 10);
        universal.put("MULE", 10);
        universal.put("SKELETON_HORSE", 10);
        universal.put("ZOMBIE_HORSE", 10);
        universal.put("GOAT", 10);
        universal.put("LLAMA", 10);
        universal.put("TRADER_LLAMA", 10);
        universal.put("BAT", 3);
        universal.put("CAT", 10);
        universal.put("OCELOT", 3);
        universal.put("DOLPHIN", 4);
        universal.put("ENDERMITE", 3);
        universal.put("FOX", 10);
        universal.put("PANDA", 5);
        universal.put("PARROT", 10);
        universal.put("POLAR_BEAR", 5);
        universal.put("RABBIT", 5);
        universal.put("SILVERFISH", 3);
        universal.put("STRIDER", 3);
        universal.put("EVOKER", 15);
        universal.put("VEX", 15);
        universal.put("PILLAGER", 15);
        universal.put("VINDICATOR", 15);
        universal.put("WITCH", 15);
        universal.put("RAVAGER", 15);
        universal.put("AXOLOTL", 10);
        universal.put("COD", 6);
        universal.put("SALMON", 6);
        universal.put("TROPICAL_FISH", 6);
        universal.put("PUFFERFISH", 3);
        universal.put("SQUID", 20);
        universal.put("GLOW_SQUID", 20);
        universal.put("FROG", 20);
        universal.put("TADPOLE", 20);
        universal.put("ALLAY", 20);
        universal.put("BEE", 15);
        universal.put("TURTLE", 20);
        universal.put("GUARDIAN", 20);
        universal.put("PIGLIN", 25);
        universal.put("IRON_GOLEM", 15);
        universal.put("ZOMBIE_VILLAGER", 25);
        universal.put("WANDERING_TRADER", 10);

        Map<String, Object> compatible = new HashMap<>();
        for (Map.Entry<String, Integer> entry : universal.entrySet()) {
            try {
                EntityType entityType = EntityType.valueOf(entry.getKey());
                compatible.put(entityType.name(), entry.getValue());
            } catch (IllegalArgumentException ignored) {}
        }

        ConfigSection section = config.getConfigSection("chunk-limits.entity-limits.custom-limit.limited-types", compatible,
                "Google EntityType Spigot for the correct names. They have to match your minecraft version.");
        for (String configuredEntity : section.getKeys(false)) {
            try {
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredEntity));
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } catch (NumberFormatException e) {
                LogUtil.integerNotRecognized(Level.WARNING, name(), configuredEntity);
            } catch (IllegalArgumentException e) {
                LogUtil.entityTypeNotRecognized(Level.WARNING, name(), configuredEntity);
            }
        }
    }

    @Override
    public String name() {
        return "entity-limits.custom-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.custom-limit.enable", false)
                && !entityLimits.isEmpty();
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        EntityType spawnedType = event.getEntityType();
        if (!entityLimits.containsKey(spawnedType)) return;

        final int maxAllowedPerChunk = entityLimits.get(spawnedType);
        int entityCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType() != spawnedType) continue;

            entityCount++;
            if (entityCount <= maxAllowedPerChunk) continue;

            entity.remove();
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed entity " +
                    entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                    " because reached limit of " + maxAllowedPerChunk);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                Entity[] chunkEntities = chunk.getEntities();

                for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
                    final int maxAllowedPerChunk = limit.getValue();
                    int entityCount = 0;

                    for (Entity entity : chunkEntities) {
                        if (entity.getType() != limit.getKey()) continue;

                        entityCount++;
                        if (entityCount <= maxAllowedPerChunk) continue;

                        entity.remove();
                        if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed entity " +
                                entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                                " because reached limit of " + maxAllowedPerChunk);
                    }
                }
            }
        }
    }
}
