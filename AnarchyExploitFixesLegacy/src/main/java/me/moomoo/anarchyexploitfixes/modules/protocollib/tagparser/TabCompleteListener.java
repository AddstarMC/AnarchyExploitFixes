package me.moomoo.anarchyexploitfixes.modules.protocollib.tagparser;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;

import java.util.logging.Level;

public class TabCompleteListener extends PacketAdapter {

    public TabCompleteListener() {
        super(AnarchyExploitFixes.getInstance(), ListenerPriority.HIGHEST, PacketType.Play.Client.TAB_COMPLETE);
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary()) return;

        final PacketContainer packet = event.getPacket();

        try {
            final String command = packet.getStrings().read(0);

            if (command.contains("@") || command.contains("nbt")) {
                if (!event.getPlayer().isOp()) {
                    event.setCancelled(true);
                    return;
                }
            }

            if (command.length() > 64) {
                final int index = command.indexOf(' ');
                if (index == -1 || index >= 64) {
                    event.setCancelled(true);
                }
            }
        } catch (Exception e) {
            LogUtil.moduleLog(Level.WARNING, "tag-parser-crash",
                    "Error reading TabComplete Request Packet - " + e.getLocalizedMessage() + "\n" +
                            "This might be due to version incompatibilities.\n" +
                            "Packet in question: " + packet.toString());
        }
    }
}