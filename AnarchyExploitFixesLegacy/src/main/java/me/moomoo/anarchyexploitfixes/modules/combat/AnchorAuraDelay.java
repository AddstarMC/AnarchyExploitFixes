package me.moomoo.anarchyexploitfixes.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.UUID;

public class AnchorAuraDelay implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> playersPlacingAnchors = new HashMap<>();
    private final boolean shouldUpdateInventory, shouldCancelBreak;
    private final Material respawnAnchor, glowstone;
    private final long anchorDelayInMillis;

    public AnchorAuraDelay() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.anchorDelayInMillis = config.getInt("combat.anchor-aura-delay.delay-in-ticks", 8) * 50L;
        this.shouldUpdateInventory = config.getBoolean("combat.anchor-aura-delay.update-inventory-on-cancel", false, "Can help with desync in some cases but recommended to leave off unless needed.");
        this.shouldCancelBreak = config.getBoolean("combat.anchor-aura-delay.also-cancel-glowstone-interaction", false);
        this.respawnAnchor = XMaterial.RESPAWN_ANCHOR.parseMaterial();
        this.glowstone = XMaterial.GLOWSTONE.parseMaterial();
    }

    @Override
    public String name() {
        return "anchor-aura-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.anchor-aura-delay.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (!event.getBlock().getType().equals(respawnAnchor)) return;

        UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (
                playersPlacingAnchors.containsKey(playerUniqueId)
                && playersPlacingAnchors.get(playerUniqueId) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
            if (shouldUpdateInventory) event.getPlayer().updateInventory();
        } else {
            playersPlacingAnchors.put(playerUniqueId, System.currentTimeMillis() + anchorDelayInMillis);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (!shouldCancelBreak) return;
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        ItemStack endCrystal = event.getItem();
        if (endCrystal == null || !endCrystal.getType().equals(glowstone)) return;

        UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (
                playersPlacingAnchors.containsKey(playerUniqueId)
                && playersPlacingAnchors.get(playerUniqueId) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
            if (shouldUpdateInventory) event.getPlayer().updateInventory();
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersPlacingAnchors.remove(event.getPlayer().getUniqueId());
    }
}
