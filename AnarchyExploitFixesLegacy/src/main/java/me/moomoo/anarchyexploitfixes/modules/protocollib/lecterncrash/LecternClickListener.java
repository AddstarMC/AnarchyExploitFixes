package me.moomoo.anarchyexploitfixes.modules.protocollib.lecterncrash;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.*;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;

public class LecternClickListener extends PacketAdapter implements Listener {

    private final InventoryType LECTERN;
    private final Map<UUID, InventoryType> openInventoryTypes;
    private final int index_clickType;

    public LecternClickListener(InventoryType LECTERN) {
        super(AnarchyExploitFixes.getInstance(), ListenerPriority.HIGHEST, Collections.singletonList(PacketType.Play.Client.WINDOW_CLICK), ListenerOptions.SYNC);
        this.openInventoryTypes = new HashMap<>();
        this.index_clickType = AnarchyExploitFixes.getMCVersion() > 12 ? 4 : 5;
        this.LECTERN = LECTERN;
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
        getPlugin().getServer().getPluginManager().registerEvents(this, getPlugin());
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        final PacketContainer packet = event.getPacket();
        try {
            if (this.getClickType(packet) != InventoryClickType.QUICK_MOVE) return;

            Player player = event.getPlayer();
            if (player == null) return;

            if (
                    this.openInventoryTypes.containsKey(player.getUniqueId())
                    && this.openInventoryTypes.get(player.getUniqueId()) == LECTERN
            ) {
                event.setCancelled(true);
            }
        } catch (Exception e) {
            LogUtil.moduleLog(Level.WARNING, "lectern-crash-patch",
                    "Error reading ClickSlotC2SPacket - " + e.getLocalizedMessage() + "\n" +
                            "This might be due to version incompatibilities.\n" +
                            "Packet in question: " + packet.toString());
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryOpen(InventoryOpenEvent event) {
        this.openInventoryTypes.put(event.getPlayer().getUniqueId(), event.getView().getType());
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryClose(InventoryCloseEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }

    private enum InventoryClickType {
        PICKUP, QUICK_MOVE, SWAP, CLONE, THROW, QUICK_CRAFT, PICKUP_ALL
    }

    private InventoryClickType getClickType(PacketContainer packet) {
        return packet.getEnumModifier(InventoryClickType.class, index_clickType).read(0);
    }
}