package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.logging.Level;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class BannedMaterials implements IllegalItemModule {

    private final Set<Material> bannedMaterials;
    private final boolean shouldDelete, checkStored;

    public BannedMaterials() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.ban-specific-materials.enable",
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL.get());
        this.shouldDelete = config.getBoolean("illegals.ban-specific-materials.delete-illegals", false);
        this.checkStored = config.getBoolean("illegals.ban-specific-materials.check-stored-items", false);
        List<String> defaults = Stream.of(
                XMaterial.CHAIN_COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK_MINECART,
                XMaterial.REPEATING_COMMAND_BLOCK,
                XMaterial.BEDROCK,
                XMaterial.BARRIER,
                XMaterial.STRUCTURE_BLOCK,
                XMaterial.STRUCTURE_VOID,
                XMaterial.END_PORTAL_FRAME,
                XMaterial.END_PORTAL,
                XMaterial.NETHER_PORTAL,
                XMaterial.LIGHT)
                .map(xMaterial -> xMaterial.isSupported() ? xMaterial.parseMaterial().name() : null)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
        this.bannedMaterials = config.getList("illegals.ban-specific-materials.banned-materials", defaults)
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), confMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "ban-specific-materials";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-materials.enable", false);
    }

    @Override
    public ItemLegality getLegality(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (bannedMaterials.contains(itemStack.getType())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (getLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult != ItemLegality.LEGAL) {
            if (shouldDelete) itemStack.setType(Material.AIR);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), getLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), getLegality(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            handleItem(itemStack, getLegality(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality result = getLegality(droppedItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemLegality result = getLegality(event.getItem());
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality result = getLegality(handItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(handItem, result);
        }
    }
}
