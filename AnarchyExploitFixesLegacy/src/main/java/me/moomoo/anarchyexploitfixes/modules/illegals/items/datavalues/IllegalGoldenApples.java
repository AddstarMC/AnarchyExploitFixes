package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import java.util.EnumMap;
import java.util.Map;

public class IllegalGoldenApples implements IllegalItemModule {

    private final Map<Material, MaterialData> allowedAppleData = new EnumMap<>(Material.class);
    private final boolean doSomething, checkStored;

    public IllegalGoldenApples() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.data-values.illegal-golden-apples.enable", "1.12 only.");
        this.doSomething = config.getBoolean("illegals.data-values.illegal-golden-apples.fix-or-delete-items", false,
                "Will delete shulkers if they contain illegal apples and revert apples themselves to default");
        this.checkStored = config.getBoolean("illegals.data-values.illegal-golden-apples.check-stored-items", false);
        if (XMaterial.GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.GOLDEN_APPLE.parseMaterial()));
        }
        if (XMaterial.ENCHANTED_GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial()));
        }
    }

    @Override
    public String name() {
        return "remove-illegal-golden-apples";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.data-values.revert-illegal-golden-apples", false)
                && AnarchyExploitFixes.getMCVersion() <= 12;
    }

    @Override
    public ItemLegality getLegality(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (allowedAppleData.containsKey(itemStack.getType()) && !allowedAppleData.containsValue(itemStack.getData())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (getLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        switch (checkResult) {
            case ILLEGAL:
                itemStack.setData(allowedAppleData.get(itemStack.getType()));
            case CONTAINS_ILLEGAL:
                itemStack.setType(Material.AIR);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_DATA_APPLE, event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), getLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), getLegality(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            handleItem(itemStack, getLegality(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality result = getLegality(droppedItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_DATA_APPLE, event.getPlayer())) return;

            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemLegality result = getLegality(event.getItem());
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_DATA_APPLE, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality result = getLegality(handItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_DATA_APPLE, event.getPlayer())) return;

            event.setCancelled(true);
            handleItem(handItem, result);
        }
    }
}
