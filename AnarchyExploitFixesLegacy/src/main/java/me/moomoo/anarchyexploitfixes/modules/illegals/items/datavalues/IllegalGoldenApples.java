package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import java.util.HashMap;
import java.util.Map;

public class IllegalGoldenApples implements AnarchyExploitFixesModule, Listener {

    private final Map<Material, MaterialData> allowedAppleData = new HashMap<>();

    public IllegalGoldenApples() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("illegals.data-values.revert-illegal-golden-apples",
                "1.12 only.");
        if (XMaterial.GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.GOLDEN_APPLE.parseMaterial()));
        }
        if (XMaterial.ENCHANTED_GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial()));
        }
    }

    @Override
    public String name() {
        return "remove-illegal-golden-apples";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return (
                AnarchyExploitFixes.getConfiguration().getBoolean("illegals.data-values.revert-illegal-golden-apples", false)
                && AnarchyExploitFixes.getMCVersion() <= 12
        );
    }

    private void handleIllegalEGapsIfPresent(ItemStack item) {
        if (
                item != null
                && allowedAppleData.containsKey(item.getType())
                && !allowedAppleData.containsValue(item.getData())
        ) {
            // Revert to regular apple data instead of deleting item
            item.setData(allowedAppleData.get(item.getType()));
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            handleIllegalEGapsIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            handleIllegalEGapsIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleIllegalEGapsIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleIllegalEGapsIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleIllegalEGapsIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            handleIllegalEGapsIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        handleIllegalEGapsIfPresent(event.getCursor());
        handleIllegalEGapsIfPresent(event.getCurrentItem());
        for (ItemStack item : event.getInventory())
            handleIllegalEGapsIfPresent(item);
        for (ItemStack item : event.getWhoClicked().getInventory())
            handleIllegalEGapsIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            handleIllegalEGapsIfPresent(item);
    }
}
