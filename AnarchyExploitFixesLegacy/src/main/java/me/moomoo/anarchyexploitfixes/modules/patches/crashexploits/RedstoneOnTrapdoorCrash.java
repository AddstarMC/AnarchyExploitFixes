package me.moomoo.anarchyexploitfixes.modules.patches.crashexploits;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XTag;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.time.Duration;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class RedstoneOnTrapdoorCrash implements AnarchyExploitFixesModule, Listener {

    private final Cache<Location, Integer> trapdoorActivationCache;
    private final HashSet<Material> TRAPDOORS;
    private final Material AIR;
    private final int trapdoorActivationLimit;
    private final boolean logIsEnabled;

    public RedstoneOnTrapdoorCrash() {
        shouldEnable();
        this.AIR = XMaterial.AIR.parseMaterial();
        this.TRAPDOORS = XTag.TRAPDOORS.getValues().stream()
                .filter(XMaterial::isSupported)
                .map(XMaterial::parseMaterial)
                .collect(Collectors.toCollection(HashSet::new));
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.enable",
                "prevents a powerful crash exploit present in 1.13 - 1.19.3");
        this.logIsEnabled = config.getBoolean("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.log", true);
        this.trapdoorActivationLimit = config.getInt("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.max-trapdoor-activations-by-redstone-per-time", 10);
        this.trapdoorActivationCache = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(
                config.getInt("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.time-in-ticks", 30, "1 sec = 20 ticks") * 50L
        )).build();
    }

    @Override
    public String name() {
        return "prevent-redstone-on-trapdoors";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onRedstonePowerTrapdoor(BlockRedstoneEvent event) {
        Block block = event.getBlock();
        if (!TRAPDOORS.contains(block.getType())) return;

        final Location trapdoorLoc = block.getLocation();
        Integer activationCount = trapdoorActivationCache.getIfPresent(trapdoorLoc);

        if (activationCount == null) {
            // Trapdoor has not been cached yet
            trapdoorActivationCache.put(trapdoorLoc, 1);
        } else {
            activationCount++;
            trapdoorActivationCache.put(trapdoorLoc, activationCount);
            if (activationCount > trapdoorActivationLimit) {
                block.setType(AIR);
                if (logIsEnabled) LogUtils.moduleLog(Level.WARNING, name(), "Prevented trapdoor crash at: " + trapdoorLoc);
            }
        }
    }
}