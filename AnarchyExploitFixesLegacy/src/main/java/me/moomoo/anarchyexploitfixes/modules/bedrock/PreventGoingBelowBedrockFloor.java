package me.moomoo.anarchyexploitfixes.modules.bedrock;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;

public class PreventGoingBelowBedrockFloor implements AEFModule, Listener {

    private final Set<String> exemptedWorlds;
    private final Material fillMaterial;
    private final boolean teleport_enabled, filling_enabled, eject_enabled, stop_elytra_enabled;

    public PreventGoingBelowBedrockFloor() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("bedrock.prevent-going-below-bedrock-floor.enable",
                "Prevents players from going below the bedrock floor.");
        this.teleport_enabled = config.getBoolean("bedrock.prevent-going-below-bedrock-floor.teleport", true,
                "Teleports the player above the bedrock");
        this.eject_enabled = config.getBoolean("bedrock.prevent-going-below-bedrock-floor.eject-player", true,
                "Eject player from the vehicle");
        this.stop_elytra_enabled = config.getBoolean("bedrock.prevent-going-below-bedrock-floor.stop-elytra", true,
                "Disables a player's elytra flight");
        this.filling_enabled = config.getBoolean("bedrock.prevent-going-below-bedrock-floor.fill-bedrock-hole", true,
                "Whether the bedrock hole should be filled or not");
        this.exemptedWorlds = new HashSet<>(config.getList("bedrock.prevent-going-below-bedrock-floor.exempted-worlds", Arrays.asList("world_the_end", "skyblock_world")));
        String configuredFillMaterial = config.getString("bedrock.prevent-going-below-bedrock-floor.filler-material", "BEDROCK");
        Material filler_material = Material.BEDROCK;
        try {
            filler_material = Material.valueOf(configuredFillMaterial);
        } catch (IllegalArgumentException e) {
            LogUtil.materialNotRecognized(Level.WARNING, name(), configuredFillMaterial);
        }
        this.fillMaterial = filler_material;
    }

    @Override
    public String name() {
        return "prevent-going-below-bedrock-floor";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.prevent-going-below-bedrock-floor.enable", true);
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        final Player player = event.getPlayer();
        final World world = player.getWorld();
        if (exemptedWorlds.contains(world.getName())) return;

        final Location playerLoc = player.getLocation();

        if (playerLoc.getY() < ChunkUtil.guessMinWorldHeight(world)) {
            // place bedrock at the min world height
            if (filling_enabled) world.getBlockAt(playerLoc.getBlockX(), ChunkUtil.guessMinWorldHeight(world), playerLoc.getBlockZ()).setType(fillMaterial);
            // teleport player on top of that bedrock
            if (teleport_enabled) event.setTo(event.getFrom().clone().add(0, 2, 0));
            if (eject_enabled && player.isInsideVehicle()) player.leaveVehicle();
            if (stop_elytra_enabled && player.isGliding()) player.setGliding(false);
        }
    }
}
