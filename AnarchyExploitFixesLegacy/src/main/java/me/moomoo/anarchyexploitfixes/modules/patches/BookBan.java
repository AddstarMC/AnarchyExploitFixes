package me.moomoo.anarchyexploitfixes.modules.patches;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.block.ShulkerBox;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.*;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.nio.charset.StandardCharsets;
import java.util.List;

public class BookBan implements AnarchyExploitFixesModule, Listener {

    private final int maxBookSize, maxItemSize, maxInventorySize;

    public BookBan() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxBookSize = config.getInt("patches.anti-book-ban.max-book-size", 8000);
        this.maxItemSize = config.getInt("patches.anti-book-ban.max-item-size", 8260);
        this.maxInventorySize = config.getInt("patches.anti-book-ban.max-inventory-size", 50674);
    }

    @Override
    public String name() {
        return "anti-book-ban";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.anti-book-ban.enable", true);
    }

    private long getItemSize(ItemStack stack) {
        long byteSize = 0L;
        if (stack == null || !stack.hasItemMeta()) return byteSize;

        final ItemMeta meta = stack.getItemMeta();

        if (meta instanceof BlockStateMeta) {
            final BlockStateMeta blockStateMeta = (BlockStateMeta) meta;
            if (blockStateMeta.getBlockState() instanceof ShulkerBox) {
                byteSize += getInventorySize(((ShulkerBox) blockStateMeta.getBlockState()).getInventory());
                return byteSize;
            }
        }

        byteSize += meta.toString().getBytes(StandardCharsets.UTF_8).length;
        return byteSize;
    }

    private long getInventorySize(final Inventory inventory) {
        long collectiveSize = 0L;
        for (ItemStack stack : inventory) {
            collectiveSize += getItemSize(stack);
        }
        return collectiveSize;
    }

    // Prevent players from creating big books
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBookEdit(PlayerEditBookEvent event) {
        final String serializedPages = String.join("", event.getNewBookMeta().getPages());
        if (
                serializedPages.getBytes(StandardCharsets.UTF_8).length > maxBookSize
                || serializedPages.getBytes(StandardCharsets.UTF_16).length > maxBookSize
        ) {
            event.setCancelled(true);
        }
    }

    // Attempt to stop players from picking up large items
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerAttemptPickupItem(PlayerAttemptPickupItemEvent event) {
        final long itemSize = getItemSize(event.getItem().getItemStack());
        if (itemSize > maxItemSize) {
            event.setCancelled(true);
            return;
        }

        // Check if the total inventory size would be larger than the maximum inventory size
        if (itemSize + getInventorySize(event.getPlayer().getInventory()) > maxInventorySize) {
            event.setCancelled(true);
        }
    }

    private void sanitizeInventory(PlayerInventory inventory) {
        for (ItemStack item : inventory) {
            if (getItemSize(item) > maxItemSize) {
                item.subtract(item.getAmount());
            }
        }
    }

    // Attempt to clear off big items from affected players
    @EventHandler(priority = EventPriority.LOW)
    private void onJoin(PlayerJoinEvent event) {
        sanitizeInventory(event.getPlayer().getInventory());
    }

    @EventHandler(priority = EventPriority.LOW)
    private void onLeave(PlayerQuitEvent event) {
        sanitizeInventory(event.getPlayer().getInventory());
    }

    @EventHandler(priority = EventPriority.LOW)
    private void onKick(PlayerKickEvent event) {
        sanitizeInventory(event.getPlayer().getInventory());
    }
}