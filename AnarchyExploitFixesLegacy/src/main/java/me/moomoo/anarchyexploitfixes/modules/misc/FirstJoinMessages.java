package me.moomoo.anarchyexploitfixes.modules.misc;

import com.ibm.icu.text.RuleBasedNumberFormat;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;

import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicInteger;

public class FirstJoinMessages implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Config config;
    private final HashMap<String, RuleBasedNumberFormat> formats = new HashMap<>();
    private final AtomicInteger totalPlayers;
    private final boolean logFirstJoin;

    public FirstJoinMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.config = AnarchyExploitFixes.getConfiguration();
        config.addComment("misc.join-leave-messages.first-join-messages.enable", "Configure message in lang folder.");
        // prevent lag by getting total player number once and then counting up manually, as always getting all players is resource intense
        this.totalPlayers = new AtomicInteger(plugin.getServer().getOfflinePlayers().length);
        this.logFirstJoin = config.getBoolean("misc.join-leave-messages.first-join-messages.show-in-console", true);
        for (String availableLang : AnarchyExploitFixes.getLanguageCacheMap().keySet()) {
            formats.put(availableLang, new RuleBasedNumberFormat(Locale.forLanguageTag(availableLang.replace("_", "-")), RuleBasedNumberFormat.ORDINAL));
        }
    }

    @Override
    public String name() {
        return "first-join-messages";
    }

    @Override
    public String category() {
        return "misc";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("misc.join-leave-messages.first-join-messages.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPlayedBefore()) return;
        if (joiningPlayer.hasPermission("anarchyexploitfixes.silentJoin")) return;

        final int joiningPlayersNumber = totalPlayers.incrementAndGet();

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (config.connectionMsgsAreOnByDefault != AnarchyExploitFixes.CONNECT_MSG_TOGGLE.contains(onlinePlayer.getUniqueId())) {
                for (String line : AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_firstJoinMessage) {
                    onlinePlayer.sendMessage(line
                            .replace("%player%", joiningPlayer.getName())
                            .replace("%players_num%", formatToOrdinal(onlinePlayer.getLocale(), joiningPlayersNumber)));
                }
            }
        }

        // Use Bukkit.getLogger() here so we can log without prefix
        if (logFirstJoin) {
            for (String line : AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).misc_firstJoinMessage) {
                Bukkit.getLogger().info(line
                        .replace("%player%", joiningPlayer.getName())
                        .replace("%players_num%", formatToOrdinal(joiningPlayer.getLocale(), joiningPlayersNumber)));
            }
        }
    }

    private String formatToOrdinal(String playerLocale, int number) {
        if (config.auto_lang && formats.containsKey(playerLocale)) {
            return formats.get(playerLocale).format(number, "%digits-ordinal");
        } else {
            return formats.get(config.default_lang.toString().toLowerCase()).format(number, "%digits-ordinal");
        }
    }
}
