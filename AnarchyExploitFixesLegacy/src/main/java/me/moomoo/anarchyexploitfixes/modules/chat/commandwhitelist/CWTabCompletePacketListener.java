package me.moomoo.anarchyexploitfixes.modules.chat.commandwhitelist;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.event.PacketSendEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import com.github.retrooper.packetevents.wrapper.play.server.WrapperPlayServerTabComplete;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.CommandUtil;
import org.bukkit.entity.Player;

import java.time.Duration;
import java.util.List;
import java.util.Set;
import java.util.UUID;

public class CWTabCompletePacketListener extends PacketListenerAbstract {

    /*
     *     Credits go to japflap (https://www.spigotmc.org/resources/commandwhitelist.2452/)
     *     Code was mainly only implemented into AEF by xGinko.
     */

    private final Cache<UUID, String> requests;
    private final Set<String> allowedCommands, bannedSubCommands;

    protected CWTabCompletePacketListener(Set<String> allowedCommands, Set<String> bannedSubCommands) {
        super(PacketListenerPriority.HIGHEST);
        this.requests = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(1)).build();
        this.allowedCommands = allowedCommands;
        this.bannedSubCommands = bannedSubCommands;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (!event.isCancelled() && event.getPacketType() == PacketType.Play.Client.TAB_COMPLETE) {
            requests.put(event.getUser().getUUID(), new WrapperPlayClientTabComplete(event).getText());
        }
    }

    @Override
    public void onPacketSend(PacketSendEvent event) {
        if (event.getPacketType() != PacketType.Play.Server.TAB_COMPLETE) return;
        if (bannedSubCommands.isEmpty() || event.isCancelled()) return;
        final Player player = (Player) event.getPlayer();
        if (player == null || CachingPermTool.hasPermission(AEFPermission.BYPASS_CMD_WHITELIST, player)) return;

        WrapperPlayServerTabComplete response = new WrapperPlayServerTabComplete(event);

        final List<WrapperPlayServerTabComplete.CommandMatch> matches = response.getCommandMatches();
        if (matches.isEmpty()) return;

        matches.removeIf(match -> !allowedCommands.contains(match.getText()));

        String buffer = requests.getIfPresent(event.getUser().getUUID());
        if (buffer != null) {
            if (buffer.startsWith("/"))
                buffer = buffer.substring(1);
            for (String bannedSubCommand : bannedSubCommands) {
                String scommand = CommandUtil.cutLastArgument(bannedSubCommand);
                if (buffer.startsWith(scommand)) {
                    String slast = CommandUtil.getLastArgument(bannedSubCommand);
                    matches.removeIf(match -> match.getText().equalsIgnoreCase(slast));
                }
            }
        }

        response.setCommandMatches(matches);
        response.write();
    }
}
