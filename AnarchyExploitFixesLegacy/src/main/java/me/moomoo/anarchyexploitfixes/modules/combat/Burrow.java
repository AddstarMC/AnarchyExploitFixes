package me.moomoo.anarchyexploitfixes.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtils;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.stream.Collectors;

public class Burrow implements AnarchyExploitFixesModule, Listener {

    private final double damageWhenMovingInBurrow;
    private final boolean shouldTeleportUp, preventIfBlockAboveBurrow, breakAnvilInsteadOfTP, allowSlabs;
    private final HashSet<Material> SINK_IN_BLOCKS, ANVILS, SLAB_LIKE;
    private final Material AIR, SAND, GRAVEL, DIRT, ENCHANTING_TABLE, ENDER_CHEST, BEDROCK, BEACON;

    public Burrow() {
        shouldEnable();
        // Blocks that the player gets lowered into slightly when walking on them
        this.SINK_IN_BLOCKS = new HashSet<>(3);
        this.SINK_IN_BLOCKS.add(XMaterial.SOUL_SAND.parseMaterial());
        this.SINK_IN_BLOCKS.add(XMaterial.FARMLAND.parseMaterial());
        this.SINK_IN_BLOCKS.add(XMaterial.MUD.parseMaterial());
        // Anvils
        this.ANVILS = new HashSet<>(3);
        this.ANVILS.add(XMaterial.ANVIL.parseMaterial());
        this.ANVILS.add(XMaterial.CHIPPED_ANVIL.parseMaterial());
        this.ANVILS.add(XMaterial.DAMAGED_ANVIL.parseMaterial());
        // All slabs and slab-like blocks
        this.SLAB_LIKE = new HashSet<>();
        this.SLAB_LIKE.addAll(Arrays.stream(XMaterial.values())
                .filter(xMaterial -> xMaterial.isSupported() && xMaterial.name().endsWith("_SLAB"))
                .map(XMaterial::parseMaterial)
                .collect(Collectors.toSet()));
        this.SLAB_LIKE.add(XMaterial.SCULK_SENSOR.parseMaterial());
        this.SLAB_LIKE.add(XMaterial.SCULK_SHRIEKER.parseMaterial());
        this.SLAB_LIKE.add(XMaterial.CALIBRATED_SCULK_SENSOR.parseMaterial());
        // Other cached parsed material
        this.AIR = XMaterial.AIR.parseMaterial();
        this.SAND = XMaterial.SAND.parseMaterial();
        this.GRAVEL = XMaterial.GRAVEL.parseMaterial();
        this.ENCHANTING_TABLE = XMaterial.ENCHANTING_TABLE.parseMaterial();
        this.ENDER_CHEST = XMaterial.ENDER_CHEST.parseMaterial();
        this.BEDROCK = XMaterial.BEDROCK.parseMaterial();
        this.BEACON = XMaterial.BEACON.parseMaterial();
        this.DIRT = XMaterial.DIRT.parseMaterial();

        Config config = AnarchyExploitFixes.getConfiguration();
        this.damageWhenMovingInBurrow = config.getDouble("combat.prevent-burrow.damage-when-moving",1.0, "1.0 = Half a heart of damage every time you move.");
        this.shouldTeleportUp = config.getBoolean("combat.prevent-burrow.teleport-above-block", true);
        this.preventIfBlockAboveBurrow = config.getBoolean("combat.prevent-burrow.prevent-if-block-above-burrow", false, "Prevent burrow even if there is a block above the block they are burrowing in, please note this may allow creating an \"elevator\", players will keep teleporting up until they hit air");
        this.breakAnvilInsteadOfTP = config.getBoolean("combat.prevent-burrow.break-anvil-instead-of-teleport", true);
        boolean slabsAreAllowed = config.getBoolean("combat.prevent-burrow.allow-slabs-in-burrow", true, "Disabled by default in 1.12, needs to be enabled to prevent a bug where players are teleported above a slab when the slab is underwater, only happens in newer versions.");
        this.allowSlabs = AnarchyExploitFixes.getMCVersion() > 12 && slabsAreAllowed;
    }

    @Override
    public String name() {
        return "prevent-burrow";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.prevent-burrow.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getGameMode().equals(GameMode.SURVIVAL)) return;
        if (player.isInsideVehicle() || player.isGliding()) return;
        
        final Location playerLocation = player.getLocation();
        final Block burrowBlock = playerLocation.getBlock();
        final Material burrowMaterial = burrowBlock.getType();

        if (
                burrowMaterial.equals(AIR)
                || burrowMaterial.equals(DIRT) // Fixes false positives when trampling farmland
                || burrowMaterial.equals(SAND)
                || burrowMaterial.equals(GRAVEL)
                || ItemUtils.isShulkerBox(burrowMaterial)
        ) return;

        if (preventIfBlockAboveBurrow || burrowBlock.getRelative(BlockFace.UP).getType().equals(AIR)) {

            // Occluding Blocks
            if (burrowMaterial.isOccluding() && !SINK_IN_BLOCKS.contains(burrowMaterial)) {
                if (!allowSlabs || !SLAB_LIKE.contains(burrowMaterial)) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleport(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
                return;
            }

            // Ender chests and blocks that are slightly lower in height
            if (burrowMaterial.equals(ENDER_CHEST) || SINK_IN_BLOCKS.contains(burrowMaterial)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.875) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleport(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
                return;
            }

            // Enchantment Tables
            if (burrowMaterial.equals(ENCHANTING_TABLE)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.75) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleport(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
                return;
            }

            // Anvils
            if (ANVILS.contains(burrowMaterial)) {
                player.damage(damageWhenMovingInBurrow);
                if (breakAnvilInsteadOfTP) {
                    burrowBlock.breakNaturally();
                } else {
                    if (shouldTeleportUp) player.teleport(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
                return;
            }

            // Bedrock & Beacons
            if (burrowMaterial.equals(BEDROCK) || burrowMaterial.equals(BEACON)) {
                player.damage(damageWhenMovingInBurrow);
                if (shouldTeleportUp) player.teleport(burrowBlock.getLocation().add(0.5, 1, 0.5));
            }
        }
    }
}
