package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.EntityUtil;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.logging.Level;

public class NonLivingEntityLimit implements AEFModule, Listener, Runnable {

    private final AnarchyExploitFixes plugin;
    private final long checkPeriod;
    private final int maxNonLivingEntities;
    private final boolean logIsEnabled;

    public NonLivingEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.non-living-limit.enable",
                "Limit the amount of non living entities in a chunk to prevent lag (does not affect items).");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.non-living-limit.log-removals", true);
        this.maxNonLivingEntities = config.getInt("chunk-limits.entity-limits.non-living-limit.max-non-living-per-chunk", 100);
        this.checkPeriod = Math.max(1, config.getInt("chunk-limits.entity-limits.non-living-limit.check-period-in-ticks", 20,
                "20 ticks = 1 second"));
    }

    @Override
    public String name() {
        return "entity-limits.non-living-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.non-living-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (event.getEntityType().equals(EntityType.DROPPED_ITEM) || EntityUtil.isLivingEntity(event.getEntity())) return;

        int nonLivingCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType().equals(EntityType.DROPPED_ITEM)) continue;
            if (EntityUtil.isLivingEntity(entity)) continue;

            nonLivingCount++;
            if (nonLivingCount <= maxNonLivingEntities) continue;

            event.setCancelled(true);
            entity.remove();
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity "
                    + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                    " because reached limit of " + maxNonLivingEntities);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                int nonLivingCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (entity.getType().equals(EntityType.DROPPED_ITEM)) continue;
                    if (EntityUtil.isLivingEntity(entity)) continue;

                    nonLivingCount++;
                    if (nonLivingCount <= maxNonLivingEntities) continue;

                    entity.remove();
                    if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity "
                            + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                            " because reached limit of " + maxNonLivingEntities);
                }
            }
        }
    }
}
