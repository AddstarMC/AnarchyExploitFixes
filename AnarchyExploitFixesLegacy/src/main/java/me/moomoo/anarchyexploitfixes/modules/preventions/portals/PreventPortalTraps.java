package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerPortalEvent;

public class PreventPortalTraps implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Material NETHER_PORTAL;
    private final Sound BLOCK_PORTAL_TRAVEL;
    private final long tpBackDelay;

    public PreventPortalTraps() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.portals.prevent-portal-traps.enable",
                "Teleports a player back to the original location if they stand in a portal for too long.");
        this.tpBackDelay = config.getInt("preventions.portals.prevent-portal-traps.wait-time-until-tp-back-in-seconds", 10) * 20L;
        this.NETHER_PORTAL = XMaterial.NETHER_PORTAL.parseMaterial();
        this.BLOCK_PORTAL_TRAVEL = XSound.BLOCK_PORTAL_TRAVEL.parseSound();
    }

    @Override
    public String name() {
        return "prevent-portal-traps";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-portal-traps.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPortal(PlayerPortalEvent event) {
        final Player player = event.getPlayer();
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            if (player.getLocation().getBlock().getType() == NETHER_PORTAL) {
                player.teleport(event.getFrom());
                player.playSound(player.getLocation(), BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F);
            }
        }, tpBackDelay);
    }
}
