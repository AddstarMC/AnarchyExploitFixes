package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XEnchantment;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck;

    private final Enchantment binding_curse, vanishing_curse, crossbow_multishot, crossbow_piercing,
            trident_riptide, trident_loyalty, trident_channeling, mending, bow_arrow_infinite, tools_silk_touch,
            tools_loot_bonus_blocks, boots_depth_strider, boots_frost_walker, sword_damage_all, sword_damage_arthropods,
            sword_damage_undead, armor_protection_environmental, armor_protection_explosions, armor_protection_fire,
            armor_protection_projectile;

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.incompatible-enchants.enable",  "Reverts items like Armor with all Protection enchantments.");
        this.useWhitelist = config.getBoolean("illegals.enchantments.incompatible-enchants.item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean("illegals.enchantments.incompatible-enchants.use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList("illegals.enchantments.incompatible-enchants.whitelisted-items", Collections.singletonList("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.doPeriodicCheck = config.getBoolean("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.binding_curse = XEnchantment.BINDING_CURSE.getEnchant();
        this.vanishing_curse = XEnchantment.VANISHING_CURSE.getEnchant();
        this.crossbow_multishot = XEnchantment.MULTISHOT.getEnchant();
        this.crossbow_piercing = XEnchantment.PIERCING.getEnchant();
        this.trident_riptide = XEnchantment.RIPTIDE.getEnchant();
        this.trident_loyalty = XEnchantment.LOYALTY.getEnchant();
        this.trident_channeling = XEnchantment.CHANNELING.getEnchant();
        this.mending = XEnchantment.MENDING.getEnchant();
        this.bow_arrow_infinite = XEnchantment.ARROW_INFINITE.getEnchant();
        this.tools_silk_touch = XEnchantment.SILK_TOUCH.getEnchant();
        this.tools_loot_bonus_blocks = XEnchantment.LOOT_BONUS_BLOCKS.getEnchant();
        this.boots_depth_strider = XEnchantment.DEPTH_STRIDER.getEnchant();
        this.boots_frost_walker = XEnchantment.FROST_WALKER.getEnchant();
        this.sword_damage_all = XEnchantment.DAMAGE_ALL.getEnchant();
        this.sword_damage_arthropods = XEnchantment.DAMAGE_ARTHROPODS.getEnchant();
        this.sword_damage_undead = XEnchantment.DAMAGE_UNDEAD.getEnchant();
        this.armor_protection_environmental = XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant();
        this.armor_protection_explosions = XEnchantment.PROTECTION_EXPLOSIONS.getEnchant();
        this.armor_protection_fire = XEnchantment.PROTECTION_FIRE.getEnchant();
        this.armor_protection_projectile = XEnchantment.PROTECTION_PROJECTILE.getEnchant();
    }

    @Override
    public String name() {
        return "incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        final Server server = plugin.getServer();

        server.getPluginManager().registerEvents(this, plugin);

        if (doPeriodicCheck) {
            server.getScheduler().scheduleSyncRepeatingTask(plugin, () -> server.getOnlinePlayers().forEach(player ->
                    player.getInventory().forEach(item -> handleItem(item, getLegality(item)))), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.incompatible-enchants.enable", true);
    }

    @Override
    public ItemLegality getLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult == ItemLegality.LEGAL) {
            return;
        }

        final Material material = itemStack.getType();

        if (MaterialUtil.isArmor(material)) {
            filterProtectionEnchants(itemStack);
            filterCurses(itemStack);
            if (MaterialUtil.BOOTS.contains(material)) {
                filterBoots(itemStack);
            }
            return;
        }

        if (MaterialUtil.isElytra(itemStack)) {
            filterCurses(itemStack);
            return;
        }

        if (MaterialUtil.isTool(itemStack)) {
            filterTools(itemStack);
            if (MaterialUtil.AXES.contains(material)) {
                filterSharpnessEnchants(itemStack);
            }
            return;
        }

        if (MaterialUtil.SWORDS.contains(material)) {
            filterSharpnessEnchants(itemStack);
            return;
        }

        if (MaterialUtil.isBow(itemStack)) {
            filterBow(itemStack);
            return;
        }

        if (MaterialUtil.isTrident(itemStack)) {
            filterTrident(itemStack);
            return;
        }

        if (MaterialUtil.isCrossbow(itemStack)) {
            filterCrossbow(itemStack);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), getLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), getLegality(event.getCursor()));
        for (ItemStack itemStack : event.getWhoClicked().getInventory()) {
            handleItem(itemStack, getLegality(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality result = getLegality(droppedItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemLegality result = getLegality(event.getItem());
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality result = getLegality(handItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE, event.getPlayer())) return;

            handleItem(handItem, result);
        }
    }

    private void filterCurses(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(binding_curse) && enchantments.containsKey(vanishing_curse)) {
            item.removeEnchantment(binding_curse);
        }
    }

    private void filterCrossbow(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(crossbow_multishot) && enchantments.containsKey(crossbow_piercing)) {
            item.removeEnchantment(crossbow_multishot);
        }
    }

    private void filterTrident(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(trident_riptide)) {
            if (enchantments.containsKey(trident_loyalty) || enchantments.containsKey(trident_channeling)) {
                item.removeEnchantment(trident_riptide);
            }
        }
    }

    private void filterBow(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;
        if (enchantments.containsKey(mending) && enchantments.containsKey(bow_arrow_infinite)) {
            item.removeEnchantment(bow_arrow_infinite);
        }
    }

    private void filterTools(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(tools_silk_touch) && enchantments.containsKey(tools_loot_bonus_blocks)) {
            item.removeEnchantment(tools_loot_bonus_blocks);
        }
    }

    private void filterBoots(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.containsKey(boots_depth_strider) && enchantments.containsKey(boots_frost_walker)) {
            item.removeEnchantment(boots_frost_walker);
        }
    }

    private void filterSharpnessEnchants(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;

        // Prefer keeping Sharpness enchantment if it is present
        if (enchantments.containsKey(sword_damage_all)) {
            if (enchantments.containsKey(sword_damage_arthropods))
                item.removeEnchantment(sword_damage_arthropods);
            if (enchantments.containsKey(sword_damage_undead))
                item.removeEnchantment(sword_damage_undead);
            return;
        }

        if (enchantments.containsKey(sword_damage_arthropods) && enchantments.containsKey(sword_damage_undead)) {
            item.removeEnchantment(sword_damage_arthropods);
        }
    }

    private void filterProtectionEnchants(ItemStack item) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();
        if (enchantments.isEmpty()) return;
        // Prefer keeping Protection enchantment if it is present
        if (enchantments.containsKey(armor_protection_environmental)) {
            if (enchantments.containsKey(armor_protection_explosions))
                item.removeEnchantment(armor_protection_explosions);
            if (enchantments.containsKey(armor_protection_fire))
                item.removeEnchantment(armor_protection_fire);
            if (enchantments.containsKey(armor_protection_projectile))
                item.removeEnchantment(armor_protection_projectile);
            // If protection is not present, prefer blast protection
        } else if (enchantments.containsKey(armor_protection_explosions)) {
            if (enchantments.containsKey(armor_protection_fire))
                item.removeEnchantment(armor_protection_fire);
            if (enchantments.containsKey(armor_protection_projectile))
                item.removeEnchantment(armor_protection_projectile);
            // If protection and blast protection is not present, prefer projectile protection
        } else if (
                enchantments.containsKey(armor_protection_projectile)
                        && enchantments.containsKey(armor_protection_fire)
        ) {
            item.removeEnchantment(armor_protection_fire);
        }
    }
}
