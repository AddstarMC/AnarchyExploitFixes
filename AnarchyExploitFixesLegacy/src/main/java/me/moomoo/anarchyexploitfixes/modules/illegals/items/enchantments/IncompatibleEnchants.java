package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XEnchantment;
import com.google.common.collect.Sets;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, preventHopperBypass, checkStored, doSomething;

    private final Enchantment binding_curse, vanishing_curse, crossbow_multishot, crossbow_piercing,
            trident_riptide, trident_loyalty, trident_channeling, mending, bow_arrow_infinite, tools_silk_touch,
            tools_loot_bonus_blocks, boots_depth_strider, boots_frost_walker, sword_damage_all, sword_damage_arthropods,
            sword_damage_undead, armor_protection_environmental, armor_protection_explosions, armor_protection_fire,
            armor_protection_projectile;

    private static final Set<Enchantment> DAMAGE_ENCHANTS = Sets.newHashSet(
            XEnchantment.DAMAGE_ALL.getEnchant(),
            XEnchantment.DAMAGE_UNDEAD.getEnchant(),
            XEnchantment.DAMAGE_ARTHROPODS.getEnchant());
    private static final Set<Enchantment> PROTECT_ENCHANTS = Sets.newHashSet(
            XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant(),
            XEnchantment.PROTECTION_EXPLOSIONS.getEnchant(),
            XEnchantment.PROTECTION_FIRE.getEnchant(),
            XEnchantment.PROTECTION_PROJECTILE.getEnchant());

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.incompatible-enchants.enable",
                "Reverts items like Armor with all Protection enchantments. Bypass permission: " + bypassPermission().get());
        this.checkStored = config.getBoolean("illegals.enchantments.incompatible-enchants.check-stored-items", false);
        this.doSomething = config.getBoolean("illegals.enchantments.higher-enchants.delete-or-revert-item", true,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.useWhitelist = config.getBoolean("illegals.enchantments.incompatible-enchants.item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean("illegals.enchantments.incompatible-enchants.use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList("illegals.enchantments.incompatible-enchants.whitelisted-items", List.of("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.preventHopperBypass = config.getBoolean("illegals.enchantments.incompatible-enchants.prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.doPeriodicCheck = config.getBoolean("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.binding_curse = XEnchantment.BINDING_CURSE.getEnchant();
        this.vanishing_curse = XEnchantment.VANISHING_CURSE.getEnchant();
        this.crossbow_multishot = XEnchantment.MULTISHOT.getEnchant();
        this.crossbow_piercing = XEnchantment.PIERCING.getEnchant();
        this.trident_riptide = XEnchantment.RIPTIDE.getEnchant();
        this.trident_loyalty = XEnchantment.LOYALTY.getEnchant();
        this.trident_channeling = XEnchantment.CHANNELING.getEnchant();
        this.mending = XEnchantment.MENDING.getEnchant();
        this.bow_arrow_infinite = XEnchantment.ARROW_INFINITE.getEnchant();
        this.tools_silk_touch = XEnchantment.SILK_TOUCH.getEnchant();
        this.tools_loot_bonus_blocks = XEnchantment.LOOT_BONUS_BLOCKS.getEnchant();
        this.boots_depth_strider = XEnchantment.DEPTH_STRIDER.getEnchant();
        this.boots_frost_walker = XEnchantment.FROST_WALKER.getEnchant();
        this.sword_damage_all = XEnchantment.DAMAGE_ALL.getEnchant();
        this.sword_damage_arthropods = XEnchantment.DAMAGE_ARTHROPODS.getEnchant();
        this.sword_damage_undead = XEnchantment.DAMAGE_UNDEAD.getEnchant();
        this.armor_protection_environmental = XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant();
        this.armor_protection_explosions = XEnchantment.PROTECTION_EXPLOSIONS.getEnchant();
        this.armor_protection_fire = XEnchantment.PROTECTION_FIRE.getEnchant();
        this.armor_protection_projectile = XEnchantment.PROTECTION_PROJECTILE.getEnchant();
    }

    @Override
    public String name() {
        return "incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        final Server server = plugin.getServer();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            server.getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (determineLegality(event.getItem()) != ItemLegality.LEGAL) {
                        event.setCancelled(true);
                    }
                }
            }, plugin);
        }

        if (doPeriodicCheck) {
            server.getScheduler().scheduleSyncRepeatingTask(plugin, () -> server.getOnlinePlayers().forEach(player ->
                    player.getInventory().forEach(item -> handleItem(item, determineLegality(item)))), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.incompatible-enchants.enable", true);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();
            if (!enchantments.isEmpty()) {
                if (enchantments.contains(binding_curse) && enchantments.contains(vanishing_curse))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(bow_arrow_infinite) && enchantments.contains(mending))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(tools_silk_touch) && enchantments.contains(tools_loot_bonus_blocks))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(boots_depth_strider) && enchantments.contains(boots_frost_walker))
                    return ItemLegality.ILLEGAL;
                if (DAMAGE_ENCHANTS.stream().filter(enchantments::contains).count() > 1L)
                    return ItemLegality.ILLEGAL;
                if (PROTECT_ENCHANTS.stream().filter(enchantments::contains).count() > 1L)
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(crossbow_multishot) && enchantments.contains(crossbow_piercing))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(trident_riptide) && (enchantments.contains(trident_loyalty) || enchantments.contains(trident_channeling)))
                    return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        switch (checkResult) {
            case CONTAINS_ILLEGAL:
                itemStack.setType(Material.AIR);
                break;
            case ILLEGAL:
                final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();

                if (enchantments.contains(binding_curse) && enchantments.contains(vanishing_curse))
                    itemStack.removeEnchantment(binding_curse);
                if (enchantments.contains(crossbow_multishot) && enchantments.contains(crossbow_piercing))
                    itemStack.removeEnchantment(crossbow_multishot);
                if (enchantments.contains(trident_riptide) && (enchantments.contains(trident_loyalty) || enchantments.contains(trident_channeling)))
                    itemStack.removeEnchantment(trident_riptide);
                if (enchantments.contains(bow_arrow_infinite) && enchantments.contains(mending))
                    itemStack.removeEnchantment(bow_arrow_infinite);
                if (enchantments.contains(tools_silk_touch) && enchantments.contains(tools_loot_bonus_blocks))
                    itemStack.removeEnchantment(tools_loot_bonus_blocks);
                if (enchantments.contains(boots_depth_strider) && enchantments.contains(boots_frost_walker))
                    itemStack.removeEnchantment(boots_frost_walker);

                if (enchantments.contains(sword_damage_all)) { // Prefer keeping Sharpness enchantment if present
                    DAMAGE_ENCHANTS.stream().filter(enchant -> enchant != sword_damage_all).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(sword_damage_arthropods) && enchantments.contains(sword_damage_undead)) {
                    itemStack.removeEnchantment(sword_damage_arthropods);
                }

                if (enchantments.contains(armor_protection_environmental)) { // Prefer keeping Protection enchantment if present
                    PROTECT_ENCHANTS.stream().filter(enchant -> enchant != armor_protection_environmental).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(armor_protection_explosions)) { // If protection is present, prefer blast protection
                    PROTECT_ENCHANTS.stream().filter(enchant -> enchant != armor_protection_explosions).forEach(itemStack::removeEnchantment);
                } else if (enchantments.contains(armor_protection_projectile) && enchantments.contains(armor_protection_fire)) {
                    itemStack.removeEnchantment(armor_protection_fire); // If protection and blast protection is not present, prefer projectile protection
                }
        }
    }
}
