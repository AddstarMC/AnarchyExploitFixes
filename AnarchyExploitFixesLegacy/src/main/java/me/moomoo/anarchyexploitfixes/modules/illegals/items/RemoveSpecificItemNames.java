package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class RemoveSpecificItemNames implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Set<String> colorInsensitiveNames;
    private final Set<String> colorSensitiveNames = new HashSet<>();

    public RemoveSpecificItemNames() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        colorInsensitiveNames = new HashSet<>(config.getList("illegals.remove-specific-item-names.color-insensitive-item-names",
                Collections.singletonList("Super Insane Mega Sussy Item")));
        for (String colorSensEntry : config.getList("illegals.remove-specific-item-names.color-sensitive-item-names", Collections.singletonList("&b&1PvP KIT V2.")))
            colorSensitiveNames.add(ChatColor.translateAlternateColorCodes('&', colorSensEntry));
    }

    @Override
    public String name() {
        return "remove-items-with-specific-names";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-specific-item-names.enable", false);
    }

    private void handleBannedItemNamesIfPresent(ItemStack item) {
        if (item == null || !item.hasItemMeta()) return;
        ItemMeta meta = item.getItemMeta();
        if (!meta.hasDisplayName()) return;

        final String coloredItemName = item.getItemMeta().getDisplayName();

        if (colorInsensitiveNames.contains(ChatColor.stripColor(coloredItemName)) || colorSensitiveNames.contains(coloredItemName)) {
            meta.setDisplayName(null);
            item.setItemMeta(meta);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            handleBannedItemNamesIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            handleBannedItemNamesIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBannedItemNamesIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemNamesIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleBannedItemNamesIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            handleBannedItemNamesIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            handleBannedItemNamesIfPresent(event.getCursor());
            handleBannedItemNamesIfPresent(event.getCurrentItem());
            for (ItemStack item : event.getInventory())
                handleBannedItemNamesIfPresent(item);
            for (ItemStack item : event.getWhoClicked().getInventory())
                handleBannedItemNamesIfPresent(item);
        },2L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            handleBannedItemNamesIfPresent(item);
    }
}
