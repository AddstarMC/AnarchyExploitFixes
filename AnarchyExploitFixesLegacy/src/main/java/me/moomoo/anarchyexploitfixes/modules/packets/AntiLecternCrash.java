package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;

public class AntiLecternCrash extends PacketListenerAbstract implements AEFModule, Listener {

    private final Map<UUID, InventoryType> openInventoryTypes;
    private InventoryType LECTERN;

    public AntiLecternCrash() {
        super(PacketListenerPriority.HIGHEST);
        this.openInventoryTypes = new HashMap<>(Math.max(16, AnarchyExploitFixes.getInstance().getServer().getOnlinePlayers().size()));
        AnarchyExploitFixes.getConfiguration().addComment("patches.lectern-crash-patch.enable",
                "Patches crash method by sending a QUICK_MOVE packet while lectern inventory is open.");
        try {
            this.LECTERN = InventoryType.valueOf("LECTERN");
        } catch (IllegalArgumentException e) {
            this.LECTERN = null;
        }
    }

    @Override
    public String name() {
        return "lectern-crash-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getConfiguration().getBoolean("patches.lectern-crash-patch.enable", true)) {
            if (this.LECTERN == null)
                return false; // Can't enable if there are no lectern inventories in the game
            if (AnarchyExploitFixes.getConfiguration().packet_events_disabled) {
                LogUtil.moduleLog(Level.WARNING, name(), "Not patching exploit because you disabled packet events in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        if (new WrapperPlayClientClickWindow(event)
                .getWindowClickType() != WrapperPlayClientClickWindow.WindowClickType.QUICK_MOVE) return;

        if (
                this.openInventoryTypes.containsKey(event.getUser().getUUID())
                && this.openInventoryTypes.get(event.getUser().getUUID()) == LECTERN
        ) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryOpen(InventoryOpenEvent event) {
        this.openInventoryTypes.put(event.getPlayer().getUniqueId(), event.getView().getType());
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryClose(InventoryCloseEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }
}
