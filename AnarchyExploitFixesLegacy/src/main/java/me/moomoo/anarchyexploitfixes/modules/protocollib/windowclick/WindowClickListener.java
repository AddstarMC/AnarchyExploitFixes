package me.moomoo.anarchyexploitfixes.modules.protocollib.windowclick;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;

import java.util.logging.Level;

public class WindowClickListener extends PacketAdapter {

    private final int index_slot, index_button, index_clickType;

    public WindowClickListener() {
        super(AnarchyExploitFixes.getInstance(), ListenerPriority.HIGHEST, PacketType.Play.Client.WINDOW_CLICK);
        this.index_slot = AnarchyExploitFixes.getMCVersion() > 12 ? 2 : 1; // This needs cross version mapping urgently
        this.index_button = AnarchyExploitFixes.getMCVersion() > 12 ? 3 : 2;
        this.index_clickType = AnarchyExploitFixes.getMCVersion() > 12 ? 4 : 5;
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        final PacketContainer packet = event.getPacket();
        try {
            final int button = this.getButton(packet);

            if (button < 0 || button > 9 && button != 40 && button != 99) {
                event.setCancelled(true);
                return;
            }

            final int slot = this.getSlot(packet);

            if (slot != -999 && slot != -1) {
                event.setCancelled(slot < 0);
                return;
            }

            if (button == 40) {
                event.setCancelled(true);
                return;
            }

            switch (this.getClickType(packet)) {
                case SWAP:
                case PICKUP_ALL:
                    event.setCancelled(true);
                    return;
                case THROW:
                    event.setCancelled(slot == -1);
                    return;
                case QUICK_MOVE:
                    event.setCancelled(slot == -999);
            }
        } catch (Exception e) {
            LogUtil.moduleLog(Level.WARNING, "window-click-crash-patch",
                    "Error reading ClickSlotC2SPacket - " + e.getLocalizedMessage() + "\n" +
                            "This might be due to version incompatibilities.\n" +
                            "Packet in question: " + packet.toString());
        }
    }

    private int getSlot(PacketContainer packet) {
        return packet.getIntegers().read(index_slot);
    }

    private int getButton(PacketContainer packet) {
        return packet.getIntegers().read(index_button);
    }

    private enum InventoryClickType {
        PICKUP, QUICK_MOVE, SWAP, CLONE, THROW, QUICK_CRAFT, PICKUP_ALL
    }

    private InventoryClickType getClickType(PacketContainer packet) {
        return packet.getEnumModifier(InventoryClickType.class, index_clickType).read(0);
    }
}