package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

import java.time.Duration;
import java.util.UUID;

public class ElytraTimer implements AnarchyExploitFixesModule, Listener {

    private final Cache<UUID, Integer> elytraMoveCounts;
    private final int maxMoveEventsPerTime;
    private final boolean shouldCheckPermission, notify, kickPlayer;

    public ElytraTimer() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("elytra.timer-elytra-fly.patch-timer-elytra-fly",
                "Attempts to patch aef speed limit bypass using timer.\n"
                        + "This isn't the best implementation and its recommended to just adjust values in NCP.");
        this.shouldCheckPermission = config.getBoolean("elytra.timer-elytra-fly.use-bypass-permission", false);
        this.elytraMoveCounts = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(
                config.getInt("elytra.timer-elytra-fly.time-in-millis", 10000, "10000 Millis = 10 Secs")
        )).build();
        this.maxMoveEventsPerTime = config.getInt("elytra.timer-elytra-fly.max-elytra-move-events-per-time", 250,
                "Experimental value. Please adjust.");
        this.notify = config.getBoolean("elytra.timer-elytra-fly.notify-player-to-disable-timer", true,
                "Configure message in lang folder.");
        this.kickPlayer = config.getBoolean("elytra.timer-elytra-fly.kick-player", false,
                "If enabled, will disconnect player from the server.");
    }

    @Override
    public String name() {
        return "timer-elytra-fly";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.timer-elytra-fly.patch-timer-elytra-fly", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onElytraFly(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;

        Integer moveCounts = elytraMoveCounts.getIfPresent(player.getUniqueId());

        if (moveCounts == null) {
            elytraMoveCounts.put(player.getUniqueId(), 1);
            return;
        }

        moveCounts++;

        if (moveCounts > maxMoveEventsPerTime) {
            if (kickPlayer) {
                player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).elytra_disable_timer);
            } else {
                event.setCancelled(true);
                if (notify) player.sendActionBar(AnarchyExploitFixes.getLang(player.getLocale()).elytra_disable_timer);
            }
        }
    }
}
