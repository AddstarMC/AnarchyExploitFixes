package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedItemNames implements IllegalItemModule {

    private final Set<String> coloredNames, plainTextNames;

    public BannedItemNames() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.banned-item-names.enable", "Resets an item's name if configured in the config.");
        this.plainTextNames = new HashSet<>(config.getList("illegals.banned-item-names.plain-names",
                Collections.singletonList("Super Insane Mega Sussy Item")));
        this.coloredNames = config.getList("illegals.banned-item-names.color-sensitive-names",
                        Collections.singletonList("&b&1PvP KIT V2."))
                .stream()
                .map(serialized -> ChatColor.translateAlternateColorCodes('&', serialized))
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "banned-item-names";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.banned-item-names.enable", false);
    }

    @Override
    public ItemLegality getLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        final String displayName = itemStack.getItemMeta().getDisplayName();
        if (coloredNames.contains(displayName) || plainTextNames.contains(ChatColor.stripColor(displayName))) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult != ItemLegality.LEGAL) {
            ItemMeta meta = itemStack.getItemMeta();
            meta.setDisplayName(null);
            itemStack.setItemMeta(meta);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getWhoClicked())) return;
        
        handleItem(event.getCurrentItem(), getLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), getLegality(event.getCursor()));
        for (ItemStack itemStack : event.getInventory()) {
            handleItem(itemStack, getLegality(itemStack));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality result = getLegality(droppedItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            handleItem(droppedItem, result);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onInteract(PlayerInteractEvent event) {
        final ItemLegality result = getLegality(event.getItem());
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            event.setCancelled(true);
            handleItem(event.getItem(), result);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality result = getLegality(handItem);
        if (result != ItemLegality.LEGAL) {
            if (CachingPermTool.hasPermission(AEFPermission.BYPASS_ILLEGAL_BANNEDNAME, event.getPlayer())) return;
            
            event.setCancelled(true);
            handleItem(handItem, result);
        }
    }
}
