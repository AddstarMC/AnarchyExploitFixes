package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedItemNames implements IllegalItemModule {

    private final Set<String> coloredNames, plainTextNames;

    public BannedItemNames() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Resets an item's name if configured in the config. Bypass permission: " + bypassPermission().get());
        this.plainTextNames = new HashSet<>(config.getList(configPath() + ".plain-names",
                Collections.singletonList("Super Insane Mega Sussy Item")));
        this.coloredNames = config.getList(configPath() + ".color-sensitive-names",
                        Collections.singletonList("&b&1PvP KIT V2."))
                .stream()
                .map(serialized -> ChatColor.translateAlternateColorCodes('&', serialized))
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String configPath() {
        return "illegals.banned-item-names";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_BANNEDNAME;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR || !itemStack.hasItemMeta()) {
            return ItemLegality.LEGAL;
        }

        final String displayName = itemStack.getItemMeta().getDisplayName();
        if (coloredNames.contains(displayName) || plainTextNames.contains(ChatColor.stripColor(displayName))) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult != ItemLegality.LEGAL) {
            ItemMeta meta = itemStack.getItemMeta();
            meta.setDisplayName(null);
            itemStack.setItemMeta(meta);
        }
    }
}
