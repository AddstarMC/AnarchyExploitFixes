package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class PreventPlacingBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final Set<Material> bannedMaterial;
    private final Material ENDER_EYE, END_PORTAL_FRAME;

    public PreventPlacingBannedBlocks() {
        shouldEnable();

        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
            );
        } else {
            defaults = Arrays.asList("BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME");
        }

        this.bannedMaterial = AnarchyExploitFixes.getConfiguration().getList("illegals.ban-specific-blocks.banned-blocks", defaults)
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), confMaterial);
                        return null;
                    }
                })
                .collect(Collectors.toCollection(HashSet::new));

        this.ENDER_EYE = XMaterial.ENDER_EYE.parseMaterial();
        this.END_PORTAL_FRAME = XMaterial.END_PORTAL_FRAME.parseMaterial();
    }

    @Override
    public String name() {
        return "ban-specific-blocks.prevent-placing";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.prevent-placing", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!bannedMaterial.contains(event.getMaterial())) return;

        // This is a workaround because BlockPlaceEvent reports that players were placing end_portal_frames
        // when they were actually just putting eyes into them.
        if (event.getClickedBlock() != null && event.getClickedBlock().getType() == END_PORTAL_FRAME) {
            if (event.getItem() != null && event.getItem().getType() == ENDER_EYE) return;
        }

        event.setCancelled(true);
    }
}
