package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.PlayerInventory;

import java.time.Duration;
import java.util.*;
import java.util.logging.Level;

public class PreventPlacingBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final ExpiringSet<UUID> playersPuttingEyesInFrames;
    private final Set<Material> bannedMaterial = new HashSet<>();
    private final Material ENDER_EYE, END_PORTAL_FRAME;

    public PreventPlacingBannedBlocks() {
        shouldEnable();
        this.playersPuttingEyesInFrames = new ExpiringSet<>(Duration.ofSeconds(1));

        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
            );
        } else {
            defaults = Arrays.asList("BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME");
        }

        for (String configuredBlock : AnarchyExploitFixes.getConfiguration().getList("illegals.ban-specific-blocks.banned-blocks", defaults)) {
            try {
                Material bannedMaterial = Material.valueOf(configuredBlock);
                this.bannedMaterial.add(bannedMaterial);
            } catch (IllegalArgumentException e) {
                LogUtil.materialNotRecognized(Level.WARNING, name(), configuredBlock);
            }
        }

        this.ENDER_EYE = XMaterial.ENDER_EYE.parseMaterial();
        this.END_PORTAL_FRAME = XMaterial.END_PORTAL_FRAME.parseMaterial();
    }

    @Override
    public String name() {
        return "ban-specific-blocks.prevent-placing";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.prevent-placing", true);
    }

    // Try to work around a bug in older versions, where it looks like the player placed
    // an END_PORTAL_FRAME for the plugin when listening to BlockPlaceEvent.
    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onPlaceEyeInEndFrame(PlayerInteractEvent event) {
        if (!bannedMaterial.contains(END_PORTAL_FRAME)) return; // If Frame is not banned, no need to continue
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        if (event.getClickedBlock().getType() != END_PORTAL_FRAME) return;

        final PlayerInventory playerInventory = event.getPlayer().getInventory();
        if (
                playerInventory.getItemInMainHand().getType() == ENDER_EYE
                || playerInventory.getItemInOffHand().getType() == ENDER_EYE
        ) {
            playersPuttingEyesInFrames.add(event.getPlayer().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (
                bannedMaterial.contains(event.getBlock().getType())
                && !playersPuttingEyesInFrames.contains(event.getPlayer().getUniqueId())
        ) {
            event.setCancelled(true);
        }
    }
}
