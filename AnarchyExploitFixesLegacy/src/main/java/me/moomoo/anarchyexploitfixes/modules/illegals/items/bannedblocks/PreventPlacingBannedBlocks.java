package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.*;
import java.util.logging.Level;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class PreventPlacingBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final Set<Material> bannedMaterial;

    public PreventPlacingBannedBlocks() {
        shouldEnable();

        List<String> defaults = Stream.of(
                XMaterial.CHAIN_COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK_MINECART,
                XMaterial.REPEATING_COMMAND_BLOCK,
                XMaterial.BEDROCK,
                XMaterial.BARRIER,
                XMaterial.STRUCTURE_BLOCK,
                XMaterial.STRUCTURE_VOID,
                XMaterial.END_PORTAL_FRAME,
                XMaterial.END_PORTAL,
                XMaterial.NETHER_PORTAL,
                XMaterial.LIGHT,
                XMaterial.REINFORCED_DEEPSLATE)
                .filter(XMaterial::isSupported)
                .map(XMaterial::parseMaterial)
                .map(Enum::name)
                .collect(Collectors.toList());

        this.bannedMaterial = AnarchyExploitFixes.getConfiguration().getList("illegals.ban-specific-blocks.banned-blocks", defaults)
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), confMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String name() {
        return "ban-specific-blocks.prevent-placing";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.prevent-placing", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (bannedMaterial.contains(event.getMaterial())) {
            event.setCancelled(true);
        }
    }
}
