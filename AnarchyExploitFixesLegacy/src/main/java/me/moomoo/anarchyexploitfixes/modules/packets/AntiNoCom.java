package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.util.Vector3i;
import com.github.retrooper.packetevents.wrapper.play.client.*;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.util.NumberConversions;

import java.util.logging.Level;

public class AntiNoCom extends PacketListenerAbstract implements AEFModule {

    private final double maxDistanceSquared;

    public AntiNoCom() {
        super(PacketListenerPriority.HIGHEST);
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-nocom-coordinate-exploit.enable",  "Prevent the NoCom Coordinate exploit.");
        this.maxDistanceSquared = NumberConversions.square(config.getInt("patches.prevent-nocom-coordinate-exploit.nocom-max-distance", 24));
    }

    @Override
    public String name() {
        return "prevent-nocom-coordinate-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-nocom-coordinate-exploit.enable", true)) {
            if (AnarchyExploitFixes.getConfiguration().packet_events_disabled) {
                LogUtil.moduleLog(Level.WARNING, name(), "Not patching exploit because you disabled packet events in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        final Vector3i blockPos;
        if (event.getPacketType() == PacketType.Play.Client.PLAYER_DIGGING) {
            blockPos = new WrapperPlayClientPlayerDigging(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.PLAYER_BLOCK_PLACEMENT) {
            blockPos = new WrapperPlayClientPlayerBlockPlacement(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_SIGN) {
            blockPos = new WrapperPlayClientUpdateSign(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_COMMAND_BLOCK) {
            blockPos = new WrapperPlayClientUpdateCommandBlock(event).getPosition();
        } else {
            return;
        }

        final Player player = (Player) event.getPlayer();
        if (player == null) return;

        if (distanceSquared(blockPos, player.getLocation()) > maxDistanceSquared) {
            event.setCancelled(true);
        }
    }

    private double distanceSquared(final Vector3i packetPos, final Location playerPos) {
        return  NumberConversions.square(packetPos.x - playerPos.getX()) +
                NumberConversions.square(packetPos.y - playerPos.getY()) +
                NumberConversions.square(packetPos.z - playerPos.getZ());
    }
}
