package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

public interface IllegalItemModule extends AnarchyExploitFixesModule, Listener {

    AEFPermission bypassPermission();
    ItemLegality determineLegality(ItemStack itemStack);
    void handleItem(ItemStack itemStack, ItemLegality checkResult);

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onAttack(EntityDamageByEntityEvent event) {
        // Modifying this event in any way won't do anything on 1.12
        if (AnarchyExploitFixes.getMCVersion() <= 12) return;
        if (event.getDamager().getType() != EntityType.PLAYER) return;

        final Player player = (Player) event.getDamager();

        ItemStack mainHand = player.getInventory().getItemInMainHand();
        final ItemLegality mainHandLegality = determineLegality(mainHand);
        if (mainHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), player)) {
            event.setCancelled(true);
            event.setDamage(0.0);
            handleItem(mainHand, mainHandLegality);
        }

        ItemStack offHand = player.getInventory().getItemInOffHand();
        final ItemLegality offHandLegality = determineLegality(offHand);
        if (offHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), player)) {
            event.setCancelled(true);
            event.setDamage(0.0);
            handleItem(offHand, offHandLegality);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onDispense(BlockDispenseEvent event) {
        if (determineLegality(event.getItem()) != ItemLegality.LEGAL) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onInventoryClick(InventoryClickEvent event) {
        if (CachingPermTool.hasPermission(bypassPermission(), event.getWhoClicked())) return;

        handleItem(event.getCurrentItem(), determineLegality(event.getCurrentItem()));
        handleItem(event.getCursor(), determineLegality(event.getCursor()));
        for (ItemStack invItem : event.getWhoClicked().getInventory()) {
            handleItem(invItem, determineLegality(invItem));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        ItemStack droppedItem = event.getItem().getItemStack();
        final ItemLegality legality = determineLegality(droppedItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(droppedItem, legality);
            event.getItem().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality legality = determineLegality(droppedItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            handleItem(droppedItem, legality);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    default void onInteract(PlayerInteractEvent event) {
        ItemStack interactItem = event.getItem();
        final ItemLegality legality = determineLegality(interactItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(interactItem, legality);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    default void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality legality = determineLegality(handItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(handItem, legality);
        }
    }
}
