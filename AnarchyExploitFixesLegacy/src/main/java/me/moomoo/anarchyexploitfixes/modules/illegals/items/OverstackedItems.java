package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class OverstackedItems implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, checkStored, preventHopperBypass;

    public OverstackedItems() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.revert-overstacked-items.enable",
                "Revert illegally high stacked items.\n" +
                        "Bypass permission: " + bypassPermission().get());
        this.useWhitelist = config.getBoolean("illegals.revert-overstacked-items.item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean("illegals.revert-overstacked-items.use-as-blacklist-instead", true);
        this.checkStored = config.getBoolean("illegals.revert-overstacked-items.check-stored-items", false);
        this.whitelistedTypes = config.getList("illegals.revert-overstacked-items.whitelisted-items",
                        Collections.singletonList(XMaterial.TOTEM_OF_UNDYING.parseMaterial().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        LogUtil.materialNotRecognized(Level.WARNING, name(), configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.preventHopperBypass = config.getBoolean("illegals.revert-overstacked-items.prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.doPeriodicCheck = config.getBoolean("illegals.revert-overstacked-items.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.revert-overstacked-items.periodically-check-player-inventories.check-period-in-ticks", 60);
    }

    @Override
    public String name() {
        return "revert-overstacked-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        final Server server = plugin.getServer();

        server.getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            server.getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (determineLegality(event.getItem()) != ItemLegality.LEGAL) {
                        event.setCancelled(true);
                    }
                }
            }, plugin);
        }

        if (doPeriodicCheck) {
            server.getScheduler().scheduleSyncRepeatingTask(plugin, () -> server.getOnlinePlayers().forEach(player ->
                    player.getInventory().forEach(item -> handleItem(item, determineLegality(item)))), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.revert-overstacked-items.enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_OVERSTACKED;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (itemStack.getAmount() > itemStack.getMaxStackSize()) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        switch (checkResult) {
            case ILLEGAL:
                itemStack.setAmount(itemStack.getMaxStackSize());
                break;
            case CONTAINS_ILLEGAL:
                itemStack.setType(Material.AIR);
        }
    }
}
