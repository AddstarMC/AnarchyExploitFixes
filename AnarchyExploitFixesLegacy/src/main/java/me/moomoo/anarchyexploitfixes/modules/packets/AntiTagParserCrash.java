package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.Player;

import java.util.logging.Level;

public class AntiTagParserCrash extends PacketListenerAbstract implements AEFModule {

    private static final String[] ABUSABLE_SEQUENCES = { "@", "[", "nbt", "=", "{", "}", "]" };

    public AntiTagParserCrash() {
        super(PacketListenerPriority.HIGHEST);
        AnarchyExploitFixes.getConfiguration()
                .addComment("patches.tag-parser-crash-patch.enable", "Patches TagParser crash exploit.");
    }

    @Override
    public String name() {
        return "tag-parser-crash-patch";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        if (config.getBoolean("patches.tag-parser-crash-patch.enable", true)) {
            if (config.packet_events_disabled) {
                LogUtil.moduleLog(Level.WARNING, name(), "Not patching exploit because you disabled packet events in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.TAB_COMPLETE) return;
        final Player player = (Player) event.getPlayer();
        if (player == null || player.isOp()) return;

        final String text = new WrapperPlayClientTabComplete(event).getText();

        for (String sequence : ABUSABLE_SEQUENCES) {
            if (text.indexOf(sequence) != -1) {
                event.setCancelled(true);
                return;
            }
        }

        if (text.length() > 64) {
            final int index = text.indexOf(' ');
            if (index == -1 || index >= 64) {
                event.setCancelled(true);
            }
        }
    }
}
