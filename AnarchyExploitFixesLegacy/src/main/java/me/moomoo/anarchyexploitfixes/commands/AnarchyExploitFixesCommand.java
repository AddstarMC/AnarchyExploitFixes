package me.moomoo.anarchyexploitfixes.commands;

import cloud.commandframework.annotations.AnnotationParser;
import cloud.commandframework.arguments.parser.StandardParameters;
import cloud.commandframework.bukkit.CloudBukkitCapabilities;
import cloud.commandframework.execution.AsynchronousCommandExecutionCoordinator;
import cloud.commandframework.meta.CommandMeta;
import cloud.commandframework.paper.PaperCommandManager;
import com.google.common.collect.Sets;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.command.CommandSender;

import java.util.function.Function;

public interface AnarchyExploitFixesCommand {

    boolean shouldRegister();

    static void registerCommands() {
        try {
            PaperCommandManager<CommandSender> manager = new PaperCommandManager<>(
                    /* Owning plugin */ AnarchyExploitFixes.getInstance(),
                    /* Coordinator function */ AsynchronousCommandExecutionCoordinator.<CommandSender>builder().build(),
                    /* Command Sender -> C */ Function.identity(),
                    /* C -> Command Sender */ Function.identity()
            );

            if (manager.hasCapability(CloudBukkitCapabilities.BRIGADIER))
                manager.registerBrigadier();
            if (manager.hasCapability(CloudBukkitCapabilities.ASYNCHRONOUS_COMPLETION))
                manager.registerAsynchronousCompletions();

            // Command error messages
            manager.registerExceptionHandler(cloud.commandframework.exceptions.NoPermissionException.class, (sender, exception) ->
                    sender.sendMessage(AnarchyExploitFixes.getLang(sender).no_permission));
            manager.registerExceptionHandler(cloud.commandframework.exceptions.ArgumentParseException.class, (sender, exception) ->
                    sender.sendMessage(AnarchyExploitFixes.getLang(sender).failed_argument_parse));
            manager.registerExceptionHandler(cloud.commandframework.exceptions.InvalidSyntaxException.class, (sender, exception) ->
                    sender.sendMessage(AnarchyExploitFixes.getLang(sender).invalid_syntax.replace("%syntax%", "/"+exception.getCorrectSyntax())));

            final AnnotationParser<CommandSender> parser = new AnnotationParser<>(
                    manager,
                    CommandSender.class,
                    parameters -> CommandMeta.simple().with(
                            CommandMeta.DESCRIPTION,
                            parameters.get(StandardParameters.DESCRIPTION, "No description")
                    ).build()
            );

            for (AnarchyExploitFixesCommand command : Sets.newHashSet(
                    new AEFCommand(),
                    new HelpCommand(),
                    new SayCommand(),
                    new ToggleConnectionMsgsCommand()
            )) {
                if (command.shouldRegister()) {
                    parser.parse(command);
                }
            }
        } catch (Throwable t) {
            AnarchyExploitFixes.getLog().severe("Error registering commands! - " + t.getLocalizedMessage());
            AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
            plugin.getServer().getPluginManager().disablePlugin(plugin);
        }
    }
}