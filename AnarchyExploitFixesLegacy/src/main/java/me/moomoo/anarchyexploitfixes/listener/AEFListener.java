package me.moomoo.anarchyexploitfixes.listener;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.util.HashSet;
import java.util.Set;

public interface AEFListener {

    boolean shouldEnable();
    void enable();
    void disable();

    Set<AEFListener> enabledListeners = new HashSet<>();
    Reflections reflections = new Reflections(AEFListener.class.getPackage().getName());

    static void reloadListeners() {
        enabledListeners.forEach(AEFListener::disable);
        enabledListeners.clear();

        for (Class<?> clazz : reflections.get(Scanners.SubTypes.of(AEFListener.class).asClass())) {
            if (clazz.isInterface()) continue;

            try {
                AEFListener listener = (AEFListener) clazz.getDeclaredConstructor().newInstance();
                if (listener.shouldEnable()) {
                    listener.enable();
                    enabledListeners.add(listener);
                }
            } catch (Exception e) {
                AnarchyExploitFixes.getPrefixedLogger().warn("Failed to load listener " + clazz.getSimpleName());
            }
        }
    }
}
