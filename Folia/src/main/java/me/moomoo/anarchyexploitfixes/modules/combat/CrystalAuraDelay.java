package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.UUID;

public class CrystalAuraDelay implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> playersExplodingCrystals = new HashMap<>();
    private final boolean shouldCancelPlace;
    private final long crystalDelayInMillis;

    public CrystalAuraDelay() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.crystalDelayInMillis = config.getInt("combat.crystal-aura.regular-delay.delay-in-ticks", 4) * 50L;
        this.shouldCancelPlace = config.getBoolean("combat.crystal-aura.regular-delay.prevent-placing-crystals", false, "Use this if youre on 1.12, otherwise the delay will not work.");
    }

    @Override
    public String name() {
        return "crystal-aura.regular-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.crystal-aura.regular-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityDamage(EntityDamageByEntityEvent event) {
        if (event.getEntity() instanceof EnderCrystal && event.getDamager() instanceof Player) {
            final UUID playerUniqueId = event.getDamager().getUniqueId();
            if (
                    playersExplodingCrystals.containsKey(playerUniqueId)
                    && playersExplodingCrystals.get(playerUniqueId) > System.currentTimeMillis()
            ) {
                event.setCancelled(true);
            } else {
                playersExplodingCrystals.put(playerUniqueId, System.currentTimeMillis() + crystalDelayInMillis);
            }
        }
    }

    // Workaround for game versions where cancelling EntityDamageByEntityEvent doesn't do anything
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (!shouldCancelPlace) return;
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        final ItemStack endCrystal = event.getItem();
        if (endCrystal == null || !endCrystal.getType().equals(Material.END_CRYSTAL)) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (
                playersExplodingCrystals.containsKey(playerUniqueId)
                && playersExplodingCrystals.get(playerUniqueId) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersExplodingCrystals.remove(event.getPlayer().getUniqueId());
    }
}
