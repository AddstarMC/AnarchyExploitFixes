package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class BedAuraDelay implements AnarchyExploitFixesModule, Listener {
    
    private final HashMap<UUID, Long> playersClickingBeds = new HashMap<>();
    private final long bedAuraDelayInMillis;
    
    public BedAuraDelay() {
        shouldEnable();
        this.bedAuraDelayInMillis = AnarchyExploitFixes.getConfiguration().getInt("combat.bed-aura-delay.delay-in-ticks", 5) * 50L;
    }

    @Override
    public String name() {
        return "bed-aura-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.bed-aura-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (event.getClickedBlock().getWorld().getEnvironment().equals(World.Environment.NORMAL)) return;
        final String clickedMaterial = event.getClickedBlock().getType().name();
        if (!clickedMaterial.endsWith("_BED") && !clickedMaterial.equals("BED")) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (
                playersClickingBeds.containsKey(playerUniqueId)
                && playersClickingBeds.get(playerUniqueId) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
        } else {
            playersClickingBeds.put(playerUniqueId, System.currentTimeMillis() + bedAuraDelayInMillis);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersClickingBeds.remove(event.getPlayer().getUniqueId());
    }
}
